<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Microsoft.VisualStudio.Project.12.0</name>
    </assembly>
    <members>
        <member name="T:Microsoft.VisualStudio.Project.ActiveConfigurationChangedEventArgs">
            <summary>
            Defines the event args for the active configuration chnage event.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Project.ActiveConfigurationChangedEventArgs.hierarchy">
            <summary>
            The hierarchy whose configuration has changed 
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.ActiveConfigurationChangedEventArgs.#ctor(Microsoft.VisualStudio.Shell.Interop.IVsHierarchy)">
            <summary>
            Constructs a new event args.
            </summary>
            <param name="fileName">The hierarchy that has changed its configuration.</param>
        </member>
        <member name="P:Microsoft.VisualStudio.Project.ActiveConfigurationChangedEventArgs.Hierarchy">
            <summary>
            The hierarchy whose configuration has changed 
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Project.ProjectFileOpenedEventArgs.Added">
            <summary>
            True if the project is added to the solution after the solution is opened. false if the project is added to the solution while the solution is being opened.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Project.HierarchyNode">
            <summary>
            An object that deals with user interaction via a GUI in the form a hierarchy: a parent node with zero or more child nodes, each of which
            can itself be a hierarchy.  
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Project.HierarchyNode.isDisposed">
            <summary>
            Has the object been disposed.
            </summary>
            <devremark>We will not specify a property for isDisposed, rather it is expected that the a private flag is defined
            on all subclasses. We do not want get in a situation where the base class's dipose is not called because a child sets the flag through the property.</devremark>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.HierarchyNode.#ctor(Microsoft.VisualStudio.Project.ProjectNode)">
            <summary>
            Overloaded ctor. 
            </summary>
            <param name="root"></param>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.HierarchyNode.CreatePropertiesObject">
            <summary>
            Creates an object derived from NodeProperties that will be used to expose properties
            spacific for this object to the property browser.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.HierarchyNode.GetIconHandle(System.Boolean)">
            <summary>
            Return an iconhandle
            </summary>
            <param name="open"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.HierarchyNode.AddChild(Microsoft.VisualStudio.Project.HierarchyNode)">
            <summary>
            AddChild - add a node, sorted in the right location.
            </summary>
            <param name="node">The node to add.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.HierarchyNode.RemoveChild(Microsoft.VisualStudio.Project.HierarchyNode)">
            <summary>
            Removes a node from the hierarchy. After removing a node from the hierarchy, it may not be added again.
            </summary>
            <param name="node">The node to remove.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.HierarchyNode.GetAutomationObject">
            <summary>
            Returns an automation object representing this node
            </summary>
            <returns>The automation object</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.HierarchyNode.GetProperty(System.Int32)">
            <summary>
            Returns a property object based on a property id 
            </summary>
            <param name="propId">the property id of the property requested</param>
            <returns>the property object requested</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.HierarchyNode.SetProperty(System.Int32,System.Object)">
            <summary>
            Sets the value of a property for a given property id
            </summary>
            <param name="propid">the property id of the property to be set</param>
            <param name="value">value of the property</param>
            <returns>S_OK if succeeded</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.HierarchyNode.GetGuidProperty(System.Int32,System.Guid@)">
            <summary>
            Get a guid property
            </summary>
            <param name="propid">property id for the guid property requested</param>
            <param name="guid">the requested guid</param>
            <returns>S_OK if succeded</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.HierarchyNode.SetGuidProperty(System.Int32,System.Guid@)">
            <summary>
            Set a guid property.
            </summary>
            <param name="propid">property id of the guid property to be set</param>
            <param name="guid">the guid to be set</param>
            <returns>E_NOTIMPL</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.HierarchyNode.SetEditLabel(System.String)">
            <summary>
            Called by the shell when a node has been renamed from the GUI
            </summary>
            <param name="label"></param>
            <returns>E_NOTIMPL</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.HierarchyNode.GetEditLabel">
            <summary>
            Called by the shell to get the node caption when the user tries to rename from the GUI
            </summary>
            <returns>the node cation</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.HierarchyNode.GetMKDocument">
            <summary>
            This method is called by the interface method GetMkDocument to specify the item moniker.
            </summary>
            <returns>The moniker for this item</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.HierarchyNode.Remove(System.Boolean)">
            <summary>
            Removes items from the hierarchy. Project overwrites this
            </summary>
            <param name="removeFromStorage"></param>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.HierarchyNode.GetRelationalName">
            <summary>
            Returns the relational name which is defined as the first part of the caption until indexof NameRelationSeparator
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.HierarchyNode.GetRelationNameExtension">
            <summary>
            Returns the 'extension' of the relational name
            e.g. form1.resx returns .resx, form1.designer.cs returns .designer.cs
            </summary>
            <returns>The extension</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.HierarchyNode.CloseDocumentWindow(Microsoft.VisualStudio.Project.HierarchyNode)">
            <summary>
            Close open document frame for a specific node.
            </summary> 
        </member>
        <member name="M:Microsoft.VisualStudio.Project.HierarchyNode.UpdateSccStateIcons">
            <summary>
            Redraws the state icon if the node is not excluded from source control.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.HierarchyNode.SetEditLabel(System.String,System.String)">
            <summary>
            To be overwritten by descendants.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.HierarchyNode.GetDragTargetHandlerNode">
            <summary>
            Called by the drag and drop implementation to ask the node
            which is being dragged/droped over which nodes should
            process the operation.
            This allows for dragging to a node that cannot contain
            items to let its parent accept the drop
            </summary>
            <returns>HierarchyNode that accept the drop handling</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.HierarchyNode.AddNewFolder">
            <summary>
            Add a new Folder to the project hierarchy.
            </summary>
            <returns>S_OK if succeeded, otherwise an error</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.HierarchyNode.DoDefaultAction">
            <summary>
            Overwritten in subclasses
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.HierarchyNode.ExcludeFromProject">
            <summary>
            Handles the exclude from project command.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.HierarchyNode.ShowInDesigner(System.Collections.Generic.IList{Microsoft.VisualStudio.Project.HierarchyNode})">
            <summary>
            Handles the Show in Designer command.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.HierarchyNode.PrepareSelectedNodesForClipboard">
            <summary>
            Prepares a selected node for clipboard. 
            It takes the the project reference string of this item and adds it to a stringbuilder. 
            </summary>
            <returns>A stringbuilder.</returns>
            <devremark>This method has to be public since seleceted nodes will call it.</devremark>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.HierarchyNode.GetCanonicalName">
            <summary>
            Returns the Cannonical Name
            </summary>
            <returns>Cannonical Name</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.HierarchyNode.GetDocumentManager">
            <summary>
            Factory method for the Document Manager object
            </summary>
            <returns>null object, since a hierarchy node does not know its kind of document</returns>
            <remarks>Must be overriden by derived node classes if a document manager is needed</remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.HierarchyNode.DisplayContextMenu(System.Collections.Generic.IList{Microsoft.VisualStudio.Project.HierarchyNode},System.IntPtr)">
            <summary>
            Displays the context menu.
            </summary>
            <param name="selectedNodes">list of selected nodes.</param>
            <param name="pointerToVariant">contains the location (x,y) at which to show the menu.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.HierarchyNode.ShowContextMenu(System.Int32,System.Guid,Microsoft.VisualStudio.Shell.Interop.POINTS)">
            <summary>
            Shows the specified context menu at a specified location.
            </summary>
            <param name="menuId">The context menu ID.</param>
            <param name="groupGuid">The GUID of the menu group.</param>
            <param name="points">The location at which to show the menu.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.HierarchyNode.ExecCommandOnNode(System.Guid,System.UInt32,Microsoft.VisualStudio.OLE.Interop.OLECMDEXECOPT,System.IntPtr,System.IntPtr)">
            <summary>
            Handles command execution.
            </summary>
            <param name="cmdGroup">Unique identifier of the command group</param>
            <param name="cmd">The command to be executed.</param>
            <param name="nCmdexecopt">Values describe how the object should execute the command.</param>
            <param name="pvaIn">Pointer to a VARIANTARG structure containing input arguments. Can be NULL</param>
            <param name="pvaOut">VARIANTARG structure to receive command output. Can be NULL.</param>
            <returns>If the method succeeds, it returns S_OK. If it fails, it returns an error code.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.HierarchyNode.ExecCommandThatDependsOnSelectedNodes(System.Guid,System.UInt32,Microsoft.VisualStudio.OLE.Interop.OLECMDEXECOPT,System.IntPtr,System.IntPtr,Microsoft.VisualStudio.Project.CommandOrigin,System.Collections.Generic.IList{Microsoft.VisualStudio.Project.HierarchyNode},System.Boolean@)">
            <summary>
            Executes a command that can only be executed once the whole selection is known.
            </summary>
            <param name="cmdGroup">Unique identifier of the command group</param>
            <param name="cmdId">The command to be executed.</param>
            <param name="cmdExecOpt">Values describe how the object should execute the command.</param>
            <param name="dataIn">Pointer to a VARIANTARG structure containing input arguments. Can be NULL</param>
            <param name="dataOut">VARIANTARG structure to receive command output. Can be NULL.</param>
            <param name="commandOrigin">The origin of the command. From IOleCommandTarget or hierarchy.</param>
            <param name="selectedNodes">The list of the selected nodes.</param>
            <param name="handled">An out parameter specifying that the command was handled.</param>
            <returns>If the method succeeds, it returns S_OK. If it fails, it returns an error code.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.HierarchyNode.ExecCommandIndependentOfSelection(System.Guid,System.UInt32,Microsoft.VisualStudio.OLE.Interop.OLECMDEXECOPT,System.IntPtr,System.IntPtr,Microsoft.VisualStudio.Project.CommandOrigin,System.Boolean@)">
            <summary>
            Executes command that are independent of a selection.
            </summary>
            <param name="cmdGroup">Unique identifier of the command group</param>
            <param name="cmdId">The command to be executed.</param>
            <param name="cmdExecOpt">Values describe how the object should execute the command.</param>
            <param name="dataIn">Pointer to a VARIANTARG structure containing input arguments. Can be NULL</param>
            <param name="dataOut">VARIANTARG structure to receive command output. Can be NULL.</param>
            <param name="commandOrigin">The origin of the command. From IOleCommandTarget or hierarchy.</param>
            <param name="handled">An out parameter specifying that the command was handled.</param>
            <returns>If the method succeeds, it returns S_OK. If it fails, it returns an error code.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.HierarchyNode.InternalExecCommand(System.Guid,System.UInt32,Microsoft.VisualStudio.OLE.Interop.OLECMDEXECOPT,System.IntPtr,System.IntPtr,Microsoft.VisualStudio.Project.CommandOrigin)">
            <summary>
            The main entry point for command excection. Gets called from the IVsUIHierarchy and IOleCommandTarget methods.
            </summary>
            <param name="cmdGroup">Unique identifier of the command group</param>
            <param name="cmdId">The command to be executed.</param>
            <param name="cmdExecOpt">Values describe how the object should execute the command.</param>
            <param name="dataIn">Pointer to a VARIANTARG structure containing input arguments. Can be NULL</param>
            <param name="dataOut">VARIANTARG structure to receive command output. Can be NULL.</param>
            <param name="commandOrigin">The origin of the command. From IOleCommandTarget or hierarchy.</param>
            <returns>If the method succeeds, it returns S_OK. If it fails, it returns an error code.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.HierarchyNode.QueryStatusCommandFromOleCommandTarget(System.Guid,System.UInt32,System.Boolean@)">
            <summary>
            Handles menus originating from IOleCommandTarget.
            </summary>
            <param name="cmdGroup">Unique identifier of the command group</param>
            <param name="cmd">The command to be executed.</param>
            <param name="handled">Specifies whether the menu was handled.</param>
            <returns>A QueryStatusResult describing the status of the menu.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.HierarchyNode.DisableCommandOnNodesThatDoNotSupportMultiSelection(System.Guid,System.UInt32,System.Collections.Generic.IList{Microsoft.VisualStudio.Project.HierarchyNode},System.Boolean@)">
            <summary>
            Specifies which command does not support multiple selection and should be disabled if multi-selected.
            </summary>
            <param name="cmdGroup">Unique identifier of the command group</param>
            <param name="cmd">The command to be executed.</param>
            <param name="selectedNodes">The list of selected nodes.</param>
            <param name="handled">Specifies whether the menu was handled.</param>
            <returns>A QueryStatusResult describing the status of the menu.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.HierarchyNode.QueryStatusOnNode(System.Guid,System.UInt32,System.IntPtr,EnvDTE.vsCommandStatus@)">
            <summary>
            Handles command status on a node. Should be overridden by descendant nodes. If a command cannot be handled then the base should be called.
            </summary>
            <param name="cmdGroup">A unique identifier of the command group. The pguidCmdGroup parameter can be NULL to specify the standard group.</param>
            <param name="cmd">The command to query status for.</param>
            <param name="pCmdText">Pointer to an OLECMDTEXT structure in which to return the name and/or status information of a single command. Can be NULL to indicate that the caller does not require this information.</param>
            <param name="result">An out parameter specifying the QueryStatusResult of the command.</param>
            <returns>If the method succeeds, it returns S_OK. If it fails, it returns an error code.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.HierarchyNode.DisableCmdInCurrentMode(System.Guid,System.UInt32)">
            <summary>
            Disables commands when the project is in run/break mode.
            </summary>/
            <param name="commandGroup">Unique identifier of the command group</param>
            <param name="command">The command to be executed.</param>
            <returns>A QueryStatusResult describing the status of the menu.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.HierarchyNode.QueryStatusSelection(System.Guid,System.UInt32,Microsoft.VisualStudio.OLE.Interop.OLECMD[],System.IntPtr,Microsoft.VisualStudio.Project.CommandOrigin)">
            <summary>
            Queries the object for the command status on a list of selected nodes.
            </summary>
            <param name="cmdGroup">A unique identifier of the command group.</param>
            <param name="cCmds">The number of commands in the prgCmds array</param>
            <param name="prgCmds">A caller-allocated array of OLECMD structures that indicate the commands for which the caller requires status information. This method fills the cmdf member of each structure with values taken from the OLECMDF enumeration</param>
            <param name="pCmdText">Pointer to an OLECMDTEXT structure in which to return the name and/or status information of a single command. Can be NULL to indicate that the caller does not require this information. </param>
            <param name="commandOrigin">Specifies the origin of the command. Either it was called from the QueryStatusCommand on IVsUIHierarchy or from the IOleCommandTarget</param>
            <returns>If the method succeeds, it returns S_OK. If it fails, it returns an error code.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.HierarchyNode.QueryStatusSelectionOnNodes(System.Collections.Generic.IList{Microsoft.VisualStudio.Project.HierarchyNode},System.Guid,System.UInt32,System.IntPtr)">
            <summary>
            Queries the selected nodes for the command status. 
            A command is supported iff any nodes supports it.
            A command is enabled iff all nodes enable it.
            A command is invisible iff any node sets invisibility.
            A command is latched only if all are latched.
            </summary>
            <param name="selectedNodes">The list of selected nodes.</param>
            <param name="cmdGroup">A unique identifier of the command group.</param>
            <param name="cmd">The command id to query for.</param>
            <param name="pCmdText">Pointer to an OLECMDTEXT structure in which to return the name and/or status information of a single command. Can be NULL to indicate that the caller does not require this information. </param>
            <returns>Retuns the result of the query on the slected nodes.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.HierarchyNode.CanShowDefaultIcon">
            <summary>
            Overwrite this method to tell that you support the default icon for this node.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.HierarchyNode.AfterSaveItemAs(System.IntPtr,System.String)">
            <summary>
            Performs save as operation for an item after the save as dialog has been processed.
            </summary>
            <param name="docData">A pointer to the rdt</param>
            <param name="newName">The newName of the item</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.HierarchyNode.Dispose(System.Boolean)">
            <summary>
            The method that does the cleanup.
            </summary>
            <param name="disposing">Is the Dispose called by some internal member, or it is called by from GC.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.HierarchyNode.GetAddFileFlags(System.String[])">
            <summary>
            Sets the VSADDFILEFLAGS that will be used to call the  IVsTrackProjectDocumentsEvents2 OnAddFiles
            </summary>
            <param name="files">The files to which an array of VSADDFILEFLAGS has to be specified.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.HierarchyNode.GetQueryAddFileFlags(System.String[])">
            <summary>
            Sets the VSQUERYADDFILEFLAGS that will be used to call the  IVsTrackProjectDocumentsEvents2 OnQueryAddFiles
            </summary>
            <param name="files">The files to which an array of VSADDFILEFLAGS has to be specified.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.HierarchyNode.GetRemoveFileFlags(System.String[])">
            <summary>
            Sets the VSREMOVEFILEFLAGS that will be used to call the  IVsTrackProjectDocumentsEvents2 OnRemoveFiles
            </summary>
            <param name="files">The files to which an array of VSREMOVEFILEFLAGS has to be specified.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.HierarchyNode.GetQueryRemoveFileFlags(System.String[])">
            <summary>
            Sets the VSQUERYREMOVEFILEFLAGS that will be used to call the  IVsTrackProjectDocumentsEvents2 OnQueryRemoveFiles
            </summary>
            <param name="files">The files to which an array of VSQUERYREMOVEFILEFLAGS has to be specified.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.HierarchyNode.GetSccFiles(System.Collections.Generic.IList{System.String},System.Collections.Generic.IList{Microsoft.VisualStudio.Shell.Interop.tagVsSccFilesFlags})">
            <summary>
            This method should be overridden to provide the list of files and associated flags for source control.
            </summary>
            <param name="files">The list of files to be placed under source control.</param>
            <param name="flags">The flags that are associated to the files.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.HierarchyNode.GetSccSpecialFiles(System.String,System.Collections.Generic.IList{System.String},System.Collections.Generic.IList{Microsoft.VisualStudio.Shell.Interop.tagVsSccFilesFlags})">
            <summary>
            This method should be overridden to provide the list of special files and associated flags for source control.
            </summary>
            <param name="sccFile">One of the file associated to the node.</param>
            <param name="files">The list of files to be placed under source control.</param>
            <param name="flags">The flags that are associated to the files.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.HierarchyNode.DeleteFromStorage(System.String)">
            <summary>
            Delete the item corresponding to the specified path from storage.
            </summary>
            <param name="path">Url of the item to delete</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.HierarchyNode.IgnoreItemFileChanges(System.Boolean)">
            <summary>
            Determines whether a file change should be ignored or not.
            </summary>
            <param name="ignoreFlag">Flag indicating whether or not to ignore changes (true to ignore changes).</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.HierarchyNode.IsItemReloadable">
            <summary>
            Called to determine whether a project item is reloadable. 
            </summary>
            <returns>True if the project item is reloadable.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.HierarchyNode.ReloadItem(System.UInt32)">
            <summary>
            Reloads an item.
            </summary>
            <param name="reserved">Reserved parameter defined at the IVsPersistHierarchyItem2::ReloadItem parameter.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.HierarchyNode.CopyToClipboard">
            <summary>
            Handle the Copy operation to the clipboard
            This method is typically overriden on the project node
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.HierarchyNode.CutToClipboard">
            <summary>
            Handle the Cut operation to the clipboard
            This method is typically overriden on the project node
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.HierarchyNode.PasteFromClipboard(Microsoft.VisualStudio.Project.HierarchyNode)">
            <summary>
            Handle the paste from Clipboard command.
            This method is typically overriden on the project node
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.HierarchyNode.AllowPasteCommand">
            <summary>
            Determines if the paste command should be allowed.
            This method is typically overriden on the project node
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.HierarchyNode.RegisterClipboardNotifications(System.Boolean)">
            <summary>
            Register/Unregister for Clipboard events for the UiHierarchyWindow (solution explorer)
            This method is typically overriden on the project node
            </summary>
            <param name="value">true for register, false for unregister</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.HierarchyNode.Redraw(Microsoft.VisualStudio.Project.UIHierarchyElements)">
            <summary>
            Causes the hierarchy to be redrawn.
            </summary>
            <param name="element">Used by the hierarchy to decide which element to redraw</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.HierarchyNode.FindChildByProjectElement(Microsoft.VisualStudio.Project.ProjectElement)">
            <summary>
            Finds a non virtual hierarchy item by its project element.
            </summary>
            <param name="node">The Project element to find</param>
            <returns>The node found</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.HierarchyNode.Dispose">
            <summary>
            The IDispose interface Dispose method for disposing the object determinastically.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.HierarchyNode.ParseCanonicalName(System.String,System.UInt32@)">
            <summary>
            the canonicalName of an item is it's URL, or better phrased,
            the persistence data we put into @RelPath, which is a relative URL
            to the root project
            returning the itemID from this means scanning the list
            </summary>
            <param name="name"></param>
            <param name="itemId"></param>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.HierarchyNode.IsItemDirty(System.UInt32,System.IntPtr,System.Int32@)">
            <summary>
            Determines whether the hierarchy item changed. 
            </summary>
            <param name="itemId">Item identifier of the hierarchy item contained in VSITEMID.</param>
            <param name="docData">Pointer to the IUnknown interface of the hierarchy item.</param>
            <param name="isDirty">true if the hierarchy item changed.</param>
            <returns>If the method succeeds, it returns S_OK. If it fails, it returns an error code. </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.HierarchyNode.SaveItem(Microsoft.VisualStudio.Shell.Interop.VSSAVEFLAGS,System.String,System.UInt32,System.IntPtr,System.Int32@)">
            <summary>
            Saves the hierarchy item to disk. 
            </summary>
            <param name="saveFlag">Flags whose values are taken from the VSSAVEFLAGS enumeration.</param>
            <param name="silentSaveAsName">New filename when doing silent save as</param>
            <param name="itemid">Item identifier of the hierarchy item saved from VSITEMID.</param>
            <param name="docData">Item identifier of the hierarchy item saved from VSITEMID.</param>
            <param name="cancelled">[out] true if the save action was canceled.</param>
            <returns>[out] true if the save action was canceled.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.HierarchyNode.IgnoreItemFileChanges(System.UInt32,System.Boolean)">
            <summary>
            Flag indicating that changes to a file can be ignored when item is saved or reloaded. 
            </summary>
            <param name="itemId">Specifies the item id from VSITEMID.</param>
            <param name="ignore">true to ignore, false to stop ignoring.</param>
            <returns>If the method succeeds, it returns S_OK. If it fails, it returns an error code.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.HierarchyNode.IsItemReloadable(System.UInt32,System.Boolean@)">
            <summary>
            Called to determine whether a project item is reloadable before calling ReloadItem. 
            </summary>
            <param name="itemId">Item identifier of an item in the hierarchy. Valid values are VSITEMID_NIL, VSITEMID_ROOT and VSITEMID_SELECTION.</param>
            <param name="isReloadable">A flag indicating that the project item is reloadable (1 for reloadable, 0 for non-reloadable).</param>
            <returns>If the method succeeds, it returns S_OK. If it fails, it returns an error code. </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.HierarchyNode.ReloadItem(System.UInt32,System.UInt32)">
            <summary>
            Called to reload a project item. 
            </summary>
            <param name="itemId">Specifies itemid from VSITEMID.</param>
            <param name="reserved">Reserved.</param>
            <returns>If the method succeeds, it returns S_OK. If it fails, it returns an error code. </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.HierarchyNode.Microsoft#VisualStudio#OLE#Interop#IOleCommandTarget#Exec(System.Guid@,System.UInt32,System.UInt32,System.IntPtr,System.IntPtr)">
            <summary>
            CommandTarget.Exec is called for most major operations if they are NOT UI based. Otherwise IVSUInode::exec is called first
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.HierarchyNode.Exec(System.Guid@,System.UInt32,Microsoft.VisualStudio.OLE.Interop.OLECMDEXECOPT,System.IntPtr,System.IntPtr)">
            <summary>
            CommandTarget.Exec is called for most major operations if they are NOT UI based. Otherwise IVSUInode::exec is called first
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.HierarchyNode.QueryStatus(System.Guid@,System.UInt32,Microsoft.VisualStudio.OLE.Interop.OLECMD[],System.IntPtr)">
            <summary>
            Queries the object for the command status
            </summary>
            <remarks>we only support one command at a time, i.e. the first member in the OLECMD array</remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.HierarchyNode.FindNodesOfType``1(System.Collections.Generic.ICollection{``0})">
            <summary>
            Recursively find all nodes of type T
            </summary>
            <typeparam name="T">The type of hierachy node being serched for</typeparam>
            <param name="nodes">A list of nodes of type T</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.HierarchyNode.AddFileToNodeFromProjectReference(System.String,Microsoft.VisualStudio.Project.HierarchyNode)">
            <summary>
            Adds an item from a project refererence to target node.
            </summary>
            <param name="projectRef"></param>
            <param name="targetNode"></param>
        </member>
        <member name="P:Microsoft.VisualStudio.Project.HierarchyNode.Url">
            <summary>
            The URL of the node.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.VisualStudio.Project.HierarchyNode.Caption">
            <summary>
            The Caption of the node.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.VisualStudio.Project.HierarchyNode.ItemTypeGuid">
            <summary>
            The item type guid associated to a node.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.VisualStudio.Project.HierarchyNode.NameRelationSeparator">
            <summary>
            Defines a string that is used to separate the name relation from the extension
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Project.HierarchyNode.ImageIndex">
            <summary>
            Return an imageindex
            </summary>
            <returns></returns>
        </member>
        <member name="P:Microsoft.VisualStudio.Project.HierarchyNode.StateIconIndex">
            <summary>
            Return an state icon index
            </summary>
            <returns></returns>
            <summary>
            Sets the state icon for a file.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Project.HierarchyNode.CanExecuteCommand">
            <summary>
            Defines whether a node can execute a command if in selection.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Project.HierarchyNode.SortPriority">
            <summary>
            Used to determine the sort order of different node types
            in the solution explorer window.
            Nodes with the same priorities are sorted based on their captions.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Project.HierarchyNode.NodeProperties">
            <summary>
            Defines the properties attached to this node.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Project.HierarchyNode.Object">
            <summary>
            Returns an object that is a special view over this object; this is the value
            returned by the Object property of the automation objects.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Project.HierarchyNode.ExcludeNodeFromScc">
            <summary>
            Specifies if a Node is under source control.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Project.HierarchyNode.HasParentNodeNameRelation">
            <summary>
            Defines if a node a name relation to its parent node
            
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.ReferenceNode.#ctor(Microsoft.VisualStudio.Project.ProjectNode,Microsoft.VisualStudio.Project.ProjectElement)">
            <summary>
            constructor for the ReferenceNode
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.ReferenceNode.#ctor(Microsoft.VisualStudio.Project.ProjectNode)">
            <summary>
            constructor for the ReferenceNode
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.ReferenceNode.GetAutomationObject">
            <summary>
            Get an instance of the automation object for ReferenceNode
            </summary>
            <returns>An instance of Automation.OAReferenceItem type if succeeded</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.ReferenceNode.GetEditLabel">
            <summary>
            Disable inline editing of Caption of a ReferendeNode
            </summary>
            <returns>null</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.ReferenceNode.GetMKDocument">
            <summary>
            This method is called by the interface method GetMkDocument to specify the item moniker.
            </summary>
            <returns>The moniker for this item</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.ReferenceNode.ExcludeFromProject">
            <summary>
            Not supported.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.ReferenceNode.PrepareSelectedNodesForClipboard">
            <summary>
            References node cannot be dragged.
            </summary>
            <returns>A stringbuilder.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.ReferenceNode.AddReference">
            <summary>
            Links a reference node to the project and hierarchy.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.ReferenceNode.RefreshReference">
            <summary>
            Refreshes a reference by re-resolving it and redrawing the icon.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.ReferenceNode.ResolveReference">
            <summary>
            Resolves references.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.ReferenceNode.CanAddReference(Microsoft.VisualStudio.Project.ReferenceNode.CannotAddReferenceErrorMessage@)">
            <summary>
            Validates that a reference can be added.
            </summary>
            <param name="errorHandler">A CannotAddReferenceErrorMessage delegate to show the error message.</param>
            <returns>true if the reference can be added.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.ReferenceNode.IsAlreadyAdded">
            <summary>
            Checks if a reference is already added. The method parses all references and compares the Url.
            </summary>
            <returns>true if the assembly has already been added.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.ReferenceNode.IsAlreadyAdded(Microsoft.VisualStudio.Project.ReferenceNode@)">
            <summary>
            Checks if a reference is already added. The method parses all references and compares the Url.
            </summary>
            <param name="existingEquivalentNode">The existing reference, if one is found.</param>
            <returns>true if the assembly has already been added.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.ReferenceNode.ShowObjectBrowser">
            <summary>
            Shows the Object Browser
            </summary>
            <returns></returns>
        </member>
        <member name="F:Microsoft.VisualStudio.Project.AssemblyReferenceNode.assemblyName">
            <summary>
            The name of the assembly this refernce represents
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Project.AssemblyReferenceNode.fileChangeListener">
            <summary>
            Defines the listener that would listen on file changes on the nested project node.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Project.AssemblyReferenceNode.isDisposed">
            <summary>
            A flag for specifying if the object was disposed.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.AssemblyReferenceNode.#ctor(Microsoft.VisualStudio.Project.ProjectNode,Microsoft.VisualStudio.Project.ProjectElement)">
            <summary>
            Constructor for the ReferenceNode
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.AssemblyReferenceNode.#ctor(Microsoft.VisualStudio.Project.ProjectNode,System.String)">
            <summary>
            Constructor for the AssemblyReferenceNode
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.AssemblyReferenceNode.Close">
            <summary>
            Closes the node.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.AssemblyReferenceNode.BindReferenceData">
            <summary>
            Links a reference node to the project and hierarchy.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.AssemblyReferenceNode.Dispose(System.Boolean)">
            <summary>
            Disposes the node
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.AssemblyReferenceNode.IsAlreadyAdded(Microsoft.VisualStudio.Project.ReferenceNode@)">
            <summary>
            Checks if an assembly is already added. The method parses all references and compares the full assemblynames, or the location of the assemblies to decide whether two assemblies are the same.
            </summary>
            <returns>true if the assembly has already been added.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.AssemblyReferenceNode.CanShowDefaultIcon">
            <summary>
            Determines if this is node a valid node for painting the default reference icon.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.AssemblyReferenceNode.SetHintPathAndPrivateValue(System.String)">
            <summary>
            Sets the hint path to the provided value. 
            It also sets the private value to true if it has not been already provided through the associated project element.
            </summary>
            <param name="hintPath">The hint path to set.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.AssemblyReferenceNode.SetReferenceProperties">
            <summary>
            This function ensures that some properties of the reference are set.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.AssemblyReferenceNode.ResolveAssemblyReference">
            <summary>
            Does the actual job of resolving an assembly reference. We need a private method that does not violate 
            calling virtual method from the constructor.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.AssemblyReferenceNode.InitializeFileChangeEvents">
            <summary>
            Registers with File change events
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.AssemblyReferenceNode.UnregisterFromFileChangeService">
            <summary>
            Unregisters this node from file change notifications.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.AssemblyReferenceNode.OnAssemblyReferenceChangedOnDisk(System.Object,Microsoft.VisualStudio.Project.FileChangedOnDiskEventArgs)">
            <summary>
            Event callback. Called when one of the assembly file is changed.
            </summary>
            <param name="sender">The FileChangeManager object.</param>
            <param name="e">Event args containing the file name that was updated.</param>
        </member>
        <member name="P:Microsoft.VisualStudio.Project.AssemblyReferenceNode.AssemblyName">
            <summary>
            The name of the assembly this reference represents.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.VisualStudio.Project.AssemblyReferenceNode.ResolvedAssembly">
            <summary>
            Returns the name of the assembly this reference refers to on this specific
            machine. It can be different from the AssemblyName property because it can
            be more specific.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Project.AutomationBrowsableAttribute">
            <summary>
            All public properties on Nodeproperties or derived classes are assumed to be used by Automation by default.
            Set this attribute to false on Properties that should not be visible for Automation.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Project.IEventSource`1">
            <summary>
            Class used to identify a source of events of type SinkType.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Project.Automation.OAVSProjectEvents">
            <summary>
            Provides access to language-specific project events
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Project.ProjectFileClosingEventArgs.Removed">
            <summary>
            true if the project was removed from the solution before the solution was closed. false if the project was removed from the solution while the solution was being closed.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.BuildableProjectConfig.RefreshReferences">
            <summary>
            Refreshes references and redraws them correctly.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Project.BuildKind">
            <summary>
            The type of build performed.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Project.BuildPropertyPageTag">
            <summary>
            Enumerated list of the properties shown on the build property page
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Project.BuildStatus">
            <summary>
            Provides information about the current build status.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.BuildStatus.StartBuild(Microsoft.VisualStudio.Project.BuildKind)">
            <summary>
            Called when a build has started
            </summary>
            <param name="kind"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.BuildStatus.EndBuild">
            <summary>
            Called when a build is ended.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Project.BuildStatus.IsInProgress">
            <summary>
            Gets a value whether a build is in progress.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Project.CommandOrigin">
            <summary>
            Defines the component from which a command was issued.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Project.NodeProperties">
            <summary>
            To create your own localizable node properties, subclass this and add public properties
            decorated with your own localized display name, category and description attributes.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Project.LocalizableProperties">
            <summary>
            Enables a managed object to expose properties and attributes for COM objects.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.NodeProperties.GetProjectDesignerPages(Microsoft.VisualStudio.OLE.Interop.CAUUID[])">
            <summary>
            Implementation of the IVsSpecifyProjectDesignerPages. It will retun the pages that are configuration independent.
            </summary>
            <param name="pages">The pages to return.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.NodeProperties.GetProjectItem(Microsoft.VisualStudio.Shell.Interop.IVsHierarchy@,System.UInt32@)">
            <summary>
            Maps back to the hierarchy or project item object corresponding to the browse object.
            </summary>
            <param name="hier">Reference to the hierarchy object.</param>
            <param name="itemid">Reference to the project item.</param>
            <returns>If the method succeeds, it returns S_OK. If it fails, it returns an error code. </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.NodeProperties.GetComponentName">
            <summary>
            Get the Caption of the Hierarchy Node instance. If Caption is null or empty we delegate to base
            </summary>
            <returns>Caption of Hierarchy node instance</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.NodeProperties.GetCommonPropertyPages(Microsoft.VisualStudio.OLE.Interop.CAUUID[])">
            <summary>
            Retrieves the common property pages. The NodeProperties is the BrowseObject and that will be called to support 
            configuration independent properties.
            </summary>
            <param name="pages">The pages to return.</param>
        </member>
        <member name="P:Microsoft.VisualStudio.Project.NodeProperties.Name">
            <summary>
            Used by Property Pages Frame to set it's title bar. The Caption of the Hierarchy Node is returned.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.DataCacheEntry.#ctor(Microsoft.VisualStudio.OLE.Interop.FORMATETC,Microsoft.VisualStudio.Project.SafeGlobalAllocHandle,Microsoft.VisualStudio.OLE.Interop.DATADIR)">
            <summary>
            The IntPtr is data allocated that should be removed. It is allocated by the ProcessSelectionData method.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.DataCacheEntry.Dispose">
            <summary>
            The IDispose interface Dispose method for disposing the object determinastically.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.DataCacheEntry.Dispose(System.Boolean)">
            <summary>
            The method that does the cleanup.
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="T:Microsoft.VisualStudio.Project.DebugMode">
            <summary>
            Debug values used by DebugModeConverter.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Project.DefaultSortOrderNode">
            <summary>
            A set of constants that specify the default sort order for different types of hierarchy nodes.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Project.DeleteToken">
            <summary>
            Storage classes for token to be deleted
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Project.DeleteToken.token">
            <summary>
            String to delete
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.DeleteToken.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="token">Deletable token.</param>
        </member>
        <member name="P:Microsoft.VisualStudio.Project.DeleteToken.StringToDelete">
            <summary>
            Token marking the end of the block to delete
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Project.DesignTimeAssemblyResolution.MockEngine">
            <summary>
            Engine required by RAR, primarily for collecting logs
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Project.DesignTimeAssemblyResolution.RarInputs">
            <summary>
            Accesssor for RAR related properties in the projectInstance.
            See ResolveAssemblyReferennce task msdn docs for member descriptions
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.DragDropHelper.GetDroppedFiles(System.UInt16,Microsoft.VisualStudio.OLE.Interop.IDataObject,Microsoft.VisualStudio.Project.DropDataType@)">
            <summary>
            Retrives data from a VS format.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.DragDropHelper.GetData(Microsoft.VisualStudio.Project.SafeGlobalAllocHandle)">
            <summary>
            Returns the data packed after the DROPFILES structure.
            </summary>
            <param name="dropHandle"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Project.FileChangedOnDiskEventArgs">
            <summary>
            Event args class for triggering file change event arguments.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Project.FileChangedOnDiskEventArgs.fileName">
            <summary>
            File name that was changed on disk.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Project.FileChangedOnDiskEventArgs.itemID">
            <summary>
            The item ide of the file that has changed.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Project.FileChangedOnDiskEventArgs.fileChangeFlag">
            <summary>
            The reason the file has changed on disk.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.FileChangedOnDiskEventArgs.#ctor(System.String,System.UInt32,Microsoft.VisualStudio.Shell.Interop._VSFILECHANGEFLAGS)">
            <summary>
            Constructs a new event args.
            </summary>
            <param name="fileName">File name that was changed on disk.</param>
            <param name="id">The item id of the file that was changed on disk.</param>
        </member>
        <member name="P:Microsoft.VisualStudio.Project.FileChangedOnDiskEventArgs.FileName">
            <summary>
            Gets the file name that was changed on disk.
            </summary>
            <value>The file that was changed on disk.</value>
        </member>
        <member name="P:Microsoft.VisualStudio.Project.FileChangedOnDiskEventArgs.ItemID">
            <summary>
            Gets item id of the file that has changed
            </summary>
            <value>The file that was changed on disk.</value>
        </member>
        <member name="P:Microsoft.VisualStudio.Project.FileChangedOnDiskEventArgs.FileChangeFlag">
            <summary>
            The reason while the file has chnaged on disk.
            </summary>
            <value>The reason while the file has chnaged on disk.</value>
        </member>
        <member name="T:Microsoft.VisualStudio.Project.FileChangeManager">
            <summary>
            This object is in charge of reloading nodes that have file monikers that can be listened to changes
            </summary>
            <summary>
            This object is in charge of reloading nodes that have file monikers that can be listened to changes
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Project.FileChangeManager.fileChangeService">
            <summary>
            Reference to the FileChange service.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Project.FileChangeManager.observedItems">
            <summary>
            Maps between the observed item identified by its filename (in canonicalized form) and the cookie used for subscribing 
            to the events.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Project.FileChangeManager.disposed">
            <summary>
            Has Disposed already been called?
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.FileChangeManager.#ctor(System.IServiceProvider)">
            <summary>
            Overloaded ctor.
            </summary>
            <param name="nodeParam">An instance of a project item.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.FileChangeManager.Dispose">
            <summary>
            Disposes resources.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.FileChangeManager.Microsoft#VisualStudio#Shell#Interop#IVsFileChangeEvents#FilesChanged(System.UInt32,System.String[],System.UInt32[])">
            <summary>
            Called when one of the file have changed on disk.
            </summary>
            <param name="numberOfFilesChanged">Number of files changed.</param>
            <param name="filesChanged">Array of file names.</param>
            <param name="flags">Array of flags indicating the type of changes. See _VSFILECHANGEFLAGS.</param>
            <returns>If the method succeeds, it returns S_OK. If it fails, it returns an error code.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.FileChangeManager.Microsoft#VisualStudio#Shell#Interop#IVsFileChangeEvents#DirectoryChanged(System.String)">
            <summary>
            Notifies clients of changes made to a directory. 
            </summary>
            <param name="directory">Name of the directory that had a change.</param>
            <returns>If the method succeeds, it returns S_OK. If it fails, it returns an error code. </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.FileChangeManager.ObserveItem(System.String)">
            <summary>
            Observe when the given file is updated on disk. In this case we do not care about the item id that represents the file in the hierarchy.
            </summary>
            <param name="fileName">File to observe.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.FileChangeManager.ObserveItem(System.String,System.UInt32)">
            <summary>
            Observe when the given file is updated on disk.
            </summary>
            <param name="fileName">File to observe.</param>
            <param name="id">The item id of the item to observe.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.FileChangeManager.IgnoreItemChanges(System.String,System.Boolean)">
            <summary>
            Ignore item file changes for the specified item.
            </summary>
            <param name="fileName">File to ignore observing.</param>
            <param name="ignore">Flag indicating whether or not to ignore changes (1 to ignore, 0 to stop ignoring).</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.FileChangeManager.StopObservingItem(System.String)">
            <summary>
            Stop observing when the file is updated on disk.
            </summary>
            <param name="fileName">File to stop observing.</param>
        </member>
        <member name="E:Microsoft.VisualStudio.Project.FileChangeManager.FileChangedOnDisk">
            <summary>
            Event that is raised when one of the observed file names have changed on disk.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Project.FileChangeManager.ObservedItemInfo">
            <summary>
            Defines a data structure that can link a item moniker to the item and its file change cookie.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Project.FileChangeManager.ObservedItemInfo.itemID">
            <summary>
            Defines the id of the item that is to be reloaded.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Project.FileChangeManager.ObservedItemInfo.fileChangeCookie">
            <summary>
            Defines the file change cookie that is returned when listening on file changes on the nested project item.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Project.FileChangeManager.ObservedItemInfo.ItemID">
            <summary>
            Defines the nested project item that is to be reloaded.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Project.FileChangeManager.ObservedItemInfo.FileChangeCookie">
            <summary>
            Defines the file change cookie that is returned when listenning on file changes on the nested project item.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Project.GlobalProperty">
            <summary>
            Defines the global propeties used by the msbuild project.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Project.GlobalProperty.BuildingInsideVisualStudio">
            <summary>
            Property specifying that we are building inside VS.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Project.GlobalProperty.DevEnvDir">
            <summary>
            The VS installation directory. This is the same as the $(DevEnvDir) macro.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Project.GlobalProperty.SolutionName">
            <summary>
            The name of the solution the project is created. This is the same as the $(SolutionName) macro.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Project.GlobalProperty.SolutionFileName">
            <summary>
            The file name of the solution. This is the same as $(SolutionFileName) macro.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Project.GlobalProperty.SolutionPath">
            <summary>
            The full path of the solution. This is the same as the $(SolutionPath) macro.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Project.GlobalProperty.SolutionDir">
            <summary>
            The directory of the solution. This is the same as the $(SolutionDir) macro.
            </summary>               
        </member>
        <member name="F:Microsoft.VisualStudio.Project.GlobalProperty.SolutionExt">
            <summary>
            The extension of teh directory. This is the same as the $(SolutionExt) macro.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Project.GlobalProperty.FxCopDir">
            <summary>
            The fxcop installation directory.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Project.GlobalProperty.VSIDEResolvedNonMSBuildProjectOutputs">
            <summary>
            The ResolvedNonMSBuildProjectOutputs msbuild property
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Project.GlobalProperty.Configuration">
            <summary>
            The Configuartion property.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Project.GlobalProperty.Platform">
            <summary>
            The platform property.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Project.GlobalProperty.RunCodeAnalysisOnce">
            <summary>
            The RunCodeAnalysisOnce property
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Project.GlobalProperty.VisualStudioStyleErrors">
            <summary>
            The VisualStudioStyleErrors property
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Project.HierarchyAddType">
            <summary>
            Defines the type of item to be added to the hierarchy.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Project.DropEffects">
            <summary>
            DropEffect as defined in oleidl.h
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Project.HierarchyNodeEventArgs">
            <summary>
            This class is used for the events raised by a HierarchyNode object.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Project.IBuildDependencyOnProjectContainer">
            <summary>
            This interface defines the rules for handling build dependency on a project container.
            </summary>
            <remarks>Normally this should be an internal interface but since it shouldbe available for the aggregator it must be made public.</remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.IBuildDependencyOnProjectContainer.EnumNestedHierachiesForBuildDependency">
            <summary>
            Enumerates the nested hierachies present that will participate in the build dependency update.
            </summary>
            <returns>A list of hierrachies.</returns>
        </member>
        <member name="P:Microsoft.VisualStudio.Project.IBuildDependencyOnProjectContainer.BuildNestedProjectsOnBuild">
            <summary>
            Defines whether the nested projects should be build with the parent project.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Project.IBuildDependencyUpdate">
            <summary>
            Interface for manipulating build dependency
            </summary>
            <remarks>Normally this should be an internal interface but since it shouldbe available for the aggregator it must be made public.</remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.IBuildDependencyUpdate.AddBuildDependency(Microsoft.VisualStudio.Shell.Interop.IVsBuildDependency)">
            <summary>
            Adds a BuildDependency to the container
            </summary>
            <param name="dependency">The dependency to add</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.IBuildDependencyUpdate.RemoveBuildDependency(Microsoft.VisualStudio.Shell.Interop.IVsBuildDependency)">
            <summary>
            Removes the builddependency from teh container.
            </summary>
            <param name="dependency">The dependency to add</param>
        </member>
        <member name="P:Microsoft.VisualStudio.Project.IBuildDependencyUpdate.BuildDependencies">
            <summary>
            Defines a container for storing BuildDependencies
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Project.IProjectConfigProperties">
            <summary>
            Defines the config dependent properties exposed through automation
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Project.IProjectEvents">
            <summary>
            Defines the events that are internally defined for communication with other subsytems.
            </summary>
        </member>
        <member name="E:Microsoft.VisualStudio.Project.IProjectEvents.ProjectFileOpened">
            <summary>
            Event raised just after the project file opened.
            </summary>
        </member>
        <member name="E:Microsoft.VisualStudio.Project.IProjectEvents.ProjectFileClosing">
            <summary>
            Event raised before the project file closed.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Project.IProjectEventsListener">
            <summary>
            Defines the interface that will specify ehethrr the object is a project events listener.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Project.IProjectEventsListener.IsProjectEventsListener">
            <summary>
            Is the object a project events listener.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Project.IProjectEventsProvider">
            <summary>
            Enable getting and setting the project events provider
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Project.IProjectEventsProvider.ProjectEventsProvider">
            <summary>
            Defines the provider for the project events
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Project.IReferenceContainer">
            <summary>
            Defines a container for manipulating references
            </summary>
            <remarks>Normally this should be an internal interface but since it should be available for
            the aggregator it must be made public.</remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.Project.IReferenceContainerProvider">
            <summary>
            Provides access to the reference data container.
            </summary>
            <remarks>Normally this should be an internal interface but since it should be available for
            the aggregator it must be made public.</remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.Project.ISingleFileGenerator">
            <summary>
            Defines support for single file generator
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.ISingleFileGenerator.RunGenerator(System.String)">
            <summary>
             Runs the generator on the item represented by the document moniker.
             </summary>
             <param name="document"></param>
        </member>
        <member name="T:Microsoft.VisualStudio.Project.MSBuildResult">
            <summary>
            Defines the current status of the build process.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Project.MSBuildResult.Suspended">
            <summary>
            The build is currently suspended.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Project.MSBuildResult.Resumed">
            <summary>
            The build has been restarted.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Project.MSBuildResult.Failed">
            <summary>
            The build failed.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Project.MSBuildResult.Successful">
            <summary>
            The build was successful.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Project.MSBuildTarget">
            <summary>
            Defines the constant strings for various msbuild targets
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Project.OleServiceProvider.Mutex">
            <summary>
            Defines an object that will be a mutex for this object for synchronizing thread calls.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.OleServiceProvider.Dispose">
            <summary>
            The IDispose interface Dispose method for disposing the object determinastically.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.OleServiceProvider.AddService(System.Type,System.Object,System.Boolean)">
            <summary>
            Adds the given service to the service container.
            </summary>
            <param name="serviceType">The type of the service to add.</param>
            <param name="serviceInstance">An instance of the service.</param>
            <param name="shouldDisposeServiceInstance">true if the Dipose of the service provider is allowed to dispose the sevice instance.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.OleServiceProvider.RemoveService(System.Type)">
            <devdoc>
            Removes the given service type from the service container.
            </devdoc>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.OleServiceProvider.Dispose(System.Boolean)">
            <summary>
            The method that does the cleanup.
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="T:Microsoft.VisualStudio.Project.OutputType">
            <summary>
            Defines possible types of output that can produced by a language project
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Project.OutputType.Library">
            <summary>
            The output type is a class library.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Project.OutputType.WinExe">
            <summary>
            The output type is a windows executable.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Project.OutputType.Exe">
            <summary>
            The output type is an executable.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Project.SuppressEvents">
            <summary>
            Flags for specifying which events to stop triggering.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.ProjectNodeProperties.GetEditor(System.Type)">
            <summary>
            ICustomTypeDescriptor.GetEditor
            To enable the "Property Pages" button on the properties browser
            the browse object (project properties) need to be unmanaged
            or it needs to provide an editor of type ComponentEditor.
            </summary>
            <param name="editorBaseType">Type of the editor</param>
            <returns>Editor</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Project.ProjectPropertyChangedArgs">
            <summary>
            Argument of the event raised when a project property is changed.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Project.PropertyPageTypeConverterAttribute">
            <summary>
            Defines a type converter.
            </summary>
            <remarks>This is needed to get rid of the type TypeConverter type that could not give back the Type we were passing to him.
            We do not want to use reflection to get the type back from the  ConverterTypeName. Also the GetType methos does not spwan converters from other assemblies.</remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.Project.Automation.AutomationScope">
            <summary>
            Helper class that handle the scope of an automation function.
            It should be used inside a "using" directive to define the scope of the
            automation function and make sure that the ExitAutomation method is called.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.Automation.AutomationScope.#ctor(System.IServiceProvider)">
            <summary>
            Defines the beginning of the scope of an automation function. This constuctor
            calls EnterAutomationFunction to signal the Shell that the current function is
            changing the status of the automation objects.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.Automation.AutomationScope.ExitAutomation">
            <summary>
            Ends the scope of the automation function. This function is also called by the
            Dispose method.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.Automation.AutomationScope.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Project.Automation.AutomationScope.Extensibility">
            <summary>
            Gets the IVsExtensibility3 interface used in the automation function.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Project.Automation.OAFileItem">
            <summary>
            Represents an automation object for a file in a project
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.Automation.OAProjectItem`1.get_Extender(System.String)">
            <summary>
            Gets the requested Extender if it is available for this object
            </summary>
            <param name="extenderName">The name of the extender.</param>
            <returns>The extender object.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.Automation.OAProjectItem`1.Save(System.String)">
            <summary>
            Saves the project item. 
            </summary>
            <param name="fileName">The name with which to save the project or project item.</param>
            <remarks>Implemented by subclasses.</remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.Automation.OAProjectItem`1.Remove">
            <summary>
            Removes the project item from hierarchy.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.Automation.OAProjectItem`1.Delete">
            <summary>
            Removes the item from its project and its storage. 
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.Automation.OAProjectItem`1.SaveAs(System.String)">
            <summary>
            Saves the project item.
            </summary>
            <param name="newFileName">The file name with which to save the solution, project, or project item. If the file exists, it is overwritten.</param>
            <returns>true if save was successful</returns>
            <remarks>This method is implemented on subclasses.</remarks>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Microsoft.VisualStudio.Project.Automation.OAProjectItem`1.get_IsOpen(System.String)" -->
        <member name="M:Microsoft.VisualStudio.Project.Automation.OAProjectItem`1.get_FileNames(System.Int16)">
            <summary>
            Gets the full path and names of the files associated with a project item.
            </summary>
            <param name="index"> The index of the item</param>
            <returns>The full path of the associated item</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Is thrown if index is not one</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.Automation.OAProjectItem`1.ExpandView">
            <summary>
            Expands the view of Solution Explorer to show project items. 
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.Automation.OAProjectItem`1.Open(System.String)">
            <summary>
            Opens the project item in the specified view. Not implemented because this abstract class dont know what to open
            </summary>
            <param name="ViewKind">Specifies the view kind in which to open the item</param>
            <returns>Window object</returns>
        </member>
        <member name="P:Microsoft.VisualStudio.Project.Automation.OAProjectItem`1.Project">
            <summary>
            Returns the automation project
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Project.Automation.OAProjectItem`1.Object">
            <summary>
            Gets an object that can be accessed by name at run time.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Project.Automation.OAProjectItem`1.Document">
            <summary>
            Gets the Document associated with the item, if one exists.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Project.Automation.OAProjectItem`1.FileCount">
            <summary>
            Gets the number of files associated with a ProjectItem.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Project.Automation.OAProjectItem`1.Properties">
            <summary>
            Gets a collection of all properties that pertain to the object. 
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Project.Automation.OAProjectItem`1.FileCodeModel">
            <summary>
            Gets the FileCodeModel object for the project item.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Project.Automation.OAProjectItem`1.ProjectItems">
            <summary>
            Gets a ProjectItems for the object.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Project.Automation.OAProjectItem`1.Kind">
            <summary>
            Gets a GUID string indicating the kind or type of the object.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Project.Automation.OAProjectItem`1.DTE">
            <summary>
            Gets the top-level extensibility object.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Project.Automation.OAProjectItem`1.Collection">
            <summary>
            Gets the ProjectItems collection containing the ProjectItem object supporting this property.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Project.Automation.OAProjectItem`1.ExtenderNames">
            <summary>
            Gets a list of available Extenders for the object.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Project.Automation.OAProjectItem`1.ConfigurationManager">
            <summary>
            Gets the ConfigurationManager object for this ProjectItem. 
            </summary>
            <remarks>We do not support config management based per item.</remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Project.Automation.OAProjectItem`1.ContainingProject">
            <summary>
            Gets the project hosting the ProjectItem.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Project.Automation.OAProjectItem`1.Saved">
            <summary>
            Gets or sets a value indicating whether or not the object has been modified since last being saved or opened.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Project.Automation.OAProjectItem`1.ExtenderCATID">
            <summary>
            Gets the Extender category ID (CATID) for the object.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Project.Automation.OAProjectItem`1.SubProject">
            <summary>
            If the project item is the root of a subproject, then the SubProject property returns the Project object for the subproject.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Project.Automation.OAProjectItem`1.IsDirty">
            <summary>
            Microsoft Internal Use Only. Checks if the document associated to this item is dirty.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Project.Automation.OAProjectItem`1.Name">
            <summary>
            Gets or sets the name of the object.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.Automation.OAFileItem.Open(System.String)">
            <summary>
            Opens the file item in the specified view.
            </summary>
            <param name="ViewKind">Specifies the view kind in which to open the item (file)</param>
            <returns>Window object</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.Automation.OAFileItem.Save(System.String)">
            <summary>
            Saves the project item.
            </summary>
            <param name="fileName">The name with which to save the project or project item.</param>
            <exception cref="T:System.InvalidOperationException">Is thrown if the save operation failes.</exception>
            <exception cref="T:System.ArgumentNullException">Is thrown if fileName is null.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.Automation.OAFileItem.SaveAs(System.String)">
            <summary>
            Saves the project item.
            </summary>
            <param name="fileName">The file name with which to save the solution, project, or project item. If the file exists, it is overwritten</param>
            <returns>true if the rename was successful. False if Save as failes</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Microsoft.VisualStudio.Project.Automation.OAFileItem.get_IsOpen(System.String)" -->
        <member name="M:Microsoft.VisualStudio.Project.Automation.OAFileItem.DoSave(System.Boolean,System.String)">
            <summary>
            Saves or Save As the  file
            </summary>
            <param name="isCalledFromSaveAs">Flag determining which Save method called , the SaveAs or the Save.</param>
            <param name="fileName">The name of the project file.</param>        
        </member>
        <member name="P:Microsoft.VisualStudio.Project.Automation.OAFileItem.IsDirty">
            <summary>
            Returns the dirty state of the document.
            </summary>
            <exception cref="T:System.InvalidOperationException">Is thrown if the project is closed or it the service provider attached to the project is invalid.</exception>
            <exception cref="!:ComException">Is thrown if the dirty state cannot be retrived.</exception>
        </member>
        <member name="P:Microsoft.VisualStudio.Project.Automation.OAFileItem.Document">
            <summary>
            Gets the Document associated with the item, if one exists.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Project.Automation.OAFileItem.ProjectItems">
            <summary>
            Gets the ProjectItems for the object.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Project.Automation.OAFolderItem">
            <summary>
            Represents an automation object for a folder in a project
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Project.Automation.OANavigableProjectItems">
            <summary>
            This can navigate a collection object only (partial implementation of ProjectItems interface)
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.Automation.OANavigableProjectItems.#ctor(Microsoft.VisualStudio.Project.Automation.OAProject,Microsoft.VisualStudio.Project.HierarchyNode)">
            <summary>
            Constructor.
            </summary>
            <param name="project">The associated project.</param>
            <param name="nodeWithItems">The node that defines the items.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.Automation.OANavigableProjectItems.#ctor(Microsoft.VisualStudio.Project.Automation.OAProject,System.Collections.Generic.IList{EnvDTE.ProjectItem},Microsoft.VisualStudio.Project.HierarchyNode)">
            <summary>
            Constructor.
            </summary>
            <param name="project">The associated project.</param>
            <param name="items">A list of items that will make up the items defined by this object.</param>
            <param name="nodeWithItems">The node that defines the items.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.Automation.OANavigableProjectItems.AddFromDirectory(System.String)">
            <summary>
            Adds one or more ProjectItem objects from a directory to the ProjectItems collection. 
            </summary>
            <param name="directory">The directory from which to add the project item.</param>
            <returns>A ProjectItem object.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.Automation.OANavigableProjectItems.AddFromTemplate(System.String,System.String)">
            <summary>
            Creates a new project item from an existing item template file and adds it to the project. 
            </summary>
            <param name="fileName">The full path and file name of the template project file.</param>
            <param name="name">The file name to use for the new project item.</param>
            <returns>A ProjectItem object. </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.Automation.OANavigableProjectItems.AddFolder(System.String,System.String)">
            <summary>
            Creates a new folder in Solution Explorer. 
            </summary>
            <param name="name">The name of the folder node in Solution Explorer.</param>
            <param name="kind">The type of folder to add. The available values are based on vsProjectItemsKindConstants and vsProjectItemKindConstants</param>
            <returns>A ProjectItem object.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.Automation.OANavigableProjectItems.AddFromFileCopy(System.String)">
            <summary>
            Copies a source file and adds it to the project. 
            </summary>
            <param name="filePath">The path and file name of the project item to be added.</param>
            <returns>A ProjectItem object. </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.Automation.OANavigableProjectItems.AddFromFile(System.String)">
            <summary>
            Adds a project item from a file that is installed in a project directory structure. 
            </summary>
            <param name="fileName">The file name of the item to add as a project item. </param>
            <returns>A ProjectItem object. </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.Automation.OANavigableProjectItems.AddFileLink(System.String)">
            <summary>
            Adds a project item which is a link to a file outside the project directory structure.
            </summary>
            <param name="fileName">The file to be linked to the project.</param>
            <returns>A ProjectItem object.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.Automation.OANavigableProjectItems.Item(System.Object)">
            <summary>
            Get Project Item from index
            </summary>
            <param name="index">Either index by number (1-based) or by name can be used to get the item</param>
            <returns>Project Item. null is return if invalid index is specified</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.Automation.OANavigableProjectItems.GetEnumerator">
            <summary>
            Returns an enumeration for items in a collection. 
            </summary>
            <returns>An IEnumerator for this object.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.Automation.OANavigableProjectItems.GetListOfProjectItems">
            <summary>
            Retrives a list of items associated with the current node.
            </summary>
            <returns>A List of project items</returns>
        </member>
        <member name="P:Microsoft.VisualStudio.Project.Automation.OANavigableProjectItems.Items">
            <summary>
            Defines an internal list of project items
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Project.Automation.OANavigableProjectItems.Project">
            <summary>
            Defines a relationship to the associated project.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Project.Automation.OANavigableProjectItems.NodeWithItems">
            <summary>
            Defines the node that contains the items
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Project.Automation.OANavigableProjectItems.Count">
            <summary>
            Gets a value indicating the number of objects in the collection.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Project.Automation.OANavigableProjectItems.Parent">
            <summary>
            Gets the immediate parent object of a ProjectItems collection.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Project.Automation.OANavigableProjectItems.Kind">
            <summary>
            Gets an enumeration indicating the type of object.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Project.Automation.OANavigableProjectItems.DTE">
            <summary>
            Gets the top-level extensibility object.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Project.Automation.OANavigableProjectItems.ContainingProject">
            <summary>
            Gets the project hosting the project item or items.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Project.Automation.OANestedProjectItem.ProjectItems">
            <summary>
            Returns the collection of project items defined in the nested project
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Project.Automation.OANestedProjectItem.SubProject">
            <summary>
            Returns the nested project.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Project.Automation.OANullProperty">
            <summary>
            This object defines a so called null object that is returned as instead of null. This is because callers in VSCore usually crash if a null propery is returned for them.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.Automation.OAProject.get_Extender(System.String)">
            <summary>
            Gets the requested Extender object if it is available for this object.
            </summary>
            <param name="name">The name of the extender object.</param>
            <returns>An Extender object. </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.Automation.OAProject.SaveAs(System.String)">
            <summary>
            Saves the project. 
            </summary>
            <param name="fileName">The file name with which to save the solution, project, or project item. If the file exists, it is overwritten</param>
            <exception cref="T:System.InvalidOperationException">Is thrown if the save operation failes.</exception>
            <exception cref="T:System.ArgumentNullException">Is thrown if fileName is null.</exception>        
        </member>
        <member name="M:Microsoft.VisualStudio.Project.Automation.OAProject.Save(System.String)">
            <summary>
            Saves the project
            </summary>
            <param name="fileName">The file name of the project</param>
            <exception cref="T:System.InvalidOperationException">Is thrown if the save operation failes.</exception>
            <exception cref="T:System.ArgumentNullException">Is thrown if fileName is null.</exception>        
        </member>
        <member name="M:Microsoft.VisualStudio.Project.Automation.OAProject.Delete">
            <summary>
            Removes the project from the current solution. 
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.Automation.OAProject.NotifyPropertiesDelete">
            <summary>
            Microsoft Internal Use Only. 
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.Automation.OAProject.DoSave(System.Boolean,System.String)">
            <summary>
            Saves or Save Asthe project.
            </summary>
            <param name="isCalledFromSaveAs">Flag determining which Save method called , the SaveAs or the Save.</param>
            <param name="fileName">The name of the project file.</param>        
        </member>
        <member name="P:Microsoft.VisualStudio.Project.Automation.OAProject.Name">
            <summary>
            Gets or sets the name of the object. 
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Project.Automation.OAProject.FileName">
            <summary>
            Microsoft Internal Use Only.  Gets the file name of the project.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Project.Automation.OAProject.IsDirty">
            <summary>
            Microsoft Internal Use Only. Specfies if the project is dirty.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Project.Automation.OAProject.Collection">
            <summary>
            Gets the Projects collection containing the Project object supporting this property.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Project.Automation.OAProject.DTE">
            <summary>
            Gets the top-level extensibility object.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Project.Automation.OAProject.Kind">
            <summary>
            Gets a GUID string indicating the kind or type of the object.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Project.Automation.OAProject.ProjectItems">
            <summary>
            Gets a ProjectItems collection for the Project object.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Project.Automation.OAProject.Properties">
            <summary>
            Gets a collection of all properties that pertain to the Project object.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Project.Automation.OAProject.UniqueName">
            <summary>
            Returns the name of project as a relative path from the directory containing the solution file to the project file
            </summary>
            <value>Unique name if project is in a valid state. Otherwise null</value>
        </member>
        <member name="P:Microsoft.VisualStudio.Project.Automation.OAProject.Object">
            <summary>
            Gets an interface or object that can be accessed by name at run time.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Project.Automation.OAProject.ExtenderNames">
            <summary>
            Gets a list of available Extenders for the object.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Project.Automation.OAProject.ExtenderCATID">
            <summary>
            Gets the Extender category ID (CATID) for the object.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Project.Automation.OAProject.FullName">
            <summary>
            Gets the full path and name of the Project object's file.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Project.Automation.OAProject.Saved">
            <summary>
            Gets or sets a value indicatingwhether the object has not been modified since last being saved or opened.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Project.Automation.OAProject.ConfigurationManager">
            <summary>
            Gets the ConfigurationManager object for this Project .
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Project.Automation.OAProject.Globals">
            <summary>
            Gets the Globals object containing add-in values that may be saved in the solution (.sln) file, the project file, or in the user's profile data.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Project.Automation.OAProject.ParentProjectItem">
            <summary>
            Gets a ProjectItem object for the nested project in the host project. 
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Project.Automation.OAProject.CodeModel">
            <summary>
            Gets the CodeModel object for the project.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Project.Automation.OAProjectItems">
            <summary>
            Contains ProjectItem objects
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.Automation.OAProjectItems.AddFromTemplate(System.String,System.String)">
            <summary>
            Creates a new project item from an existing item template file and adds it to the project. 
            </summary>
            <param name="fileName">The full path and file name of the template project file.</param>
            <param name="name">The file name to use for the new project item.</param>
            <returns>A ProjectItem object. </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.Automation.OAProjectItems.AddFolder(System.String,System.String)">
            <summary>
            Adds a folder to the collection of ProjectItems with the given name.
            
            The kind must be null, empty string, or the string value of vsProjectItemKindPhysicalFolder.
            Virtual folders are not supported by this implementation.
            </summary>
            <param name="name">The name of the new folder to add</param>
            <param name="kind">A string representing a Guid of the folder kind.</param>
            <returns>A ProjectItem representing the newly added folder.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.Automation.OAProjectItems.AddFromFileCopy(System.String)">
            <summary>
            Copies a source file and adds it to the project.
            </summary>
            <param name="filePath">The path and file name of the project item to be added.</param>
            <returns>A ProjectItem object. </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.Automation.OAProjectItems.AddFromFile(System.String)">
            <summary>
            Adds a project item from a file that is installed in a project directory structure. 
            </summary>
            <param name="fileName">The file name of the item to add as a project item. </param>
            <returns>A ProjectItem object. </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.Automation.OAProjectItems.AddFileLink(System.String)">
            <summary>
            Adds a project item which is a link to a file outside the project directory structure.
            </summary>
            <param name="fileName">The file to be linked to the project.</param>
            <returns>A ProjectItem object.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.Automation.OAProjectItems.AddItem(System.String,Microsoft.VisualStudio.Shell.Interop.VSADDITEMOPERATION)">
            <summary>
            Adds an item to the project.
            </summary>
            <param name="path">The full path of the item to add.</param>
            <param name="op">The <paramref name="VSADDITEMOPERATION"/> to use when adding the item.</param>
            <returns>A ProjectItem object. </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.Automation.OAProjectItems.EvaluateAddResult(Microsoft.VisualStudio.Shell.Interop.VSADDRESULT,System.String)">
            <summary>
            Evaluates the result of an add operation.
            </summary>
            <param name="result">The <paramref name="VSADDRESULT"/> returned by the Add methods</param>
            <param name="path">The full path of the item added.</param>
            <returns>A ProjectItem object.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.Automation.OAProjectItems.GetTemplateNoZip(System.String)">
            <summary>
            Removes .zip extensions from the components of a path.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Project.Automation.OAProperties">
            <summary>
            Contains all of the properties of a given object that are contained in a generic collection of properties.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.Automation.OAProperties.GetEnumerator">
            <summary>
            Gets an enumeration for items in a collection. 
            </summary>
            <returns>An enumerator. </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.Automation.OAProperties.Item(System.Object)">
            <summary>
            Returns an indexed member of a Properties collection. 
            </summary>
            <param name="index">The index at which to return a mamber.</param>
            <returns>A Property object.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.Automation.OAProperties.AddPropertiesFromType(System.Type)">
            <summary>
            Add properties to the collection of properties filtering only those properties which are com-visible and AutomationBrowsable
            </summary>
            <param name="targetType">The type of NodeProperties the we should filter on</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.Automation.OAProperties.AddProperty(System.Reflection.PropertyInfo)">
            <summary>
            Creates a new OAProperty object and adds it to the current list of properties
            </summary>
            <param name="propertyInfo">The property to be associated with an OAProperty object</param>
        </member>
        <member name="P:Microsoft.VisualStudio.Project.Automation.OAProperties.Target">
            <summary>
            Defines the NodeProperties object that contains the defines the properties.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Project.Automation.OAProperties.Node">
            <summary>
            The hierarchy node for the object which properties this item represent
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Project.Automation.OAProperties.Properties">
            <summary>
            Defines a dictionary of the properties contained.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Project.Automation.OAProperties.Application">
            <summary>
            Microsoft Internal Use Only.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Project.Automation.OAProperties.Count">
            <summary>
            Gets a value indicating the number of objects in the collection.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Project.Automation.OAProperties.DTE">
            <summary>
            Gets the top-level extensibility object.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Project.Automation.OAProperties.Parent">
            <summary>
            Gets the immediate parent object of a Properties collection.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.Automation.OAProperty.get_IndexedValue(System.Object,System.Object,System.Object,System.Object)">
            <summary>
            Returns one element of a list. 
            </summary>
            <param name="index1">The index of the item to display.</param>
            <param name="index2">The index of the item to display. Reserved for future use.</param>
            <param name="index3">The index of the item to display. Reserved for future use.</param>
            <param name="index4">The index of the item to display. Reserved for future use.</param>
            <returns>The value of a property</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.Automation.OAProperty.let_Value(System.Object)">
            <summary>
            Setter function to set properties values. 
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.Automation.OAProperty.set_IndexedValue(System.Object,System.Object,System.Object,System.Object,System.Object)">
            <summary>
            Sets the value of the property at the specified index.
            </summary>
            <param name="index1">The index of the item to set.</param>
            <param name="index2">Reserved for future use.</param>
            <param name="index3">Reserved for future use.</param>
            <param name="index4">Reserved for future use.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="P:Microsoft.VisualStudio.Project.Automation.OAProperty.Application">
            <summary>
            Microsoft Internal Use Only.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Project.Automation.OAProperty.Collection">
            <summary>
            Gets the Collection containing the Property object supporting this property.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Project.Automation.OAProperty.DTE">
            <summary>
            Gets the top-level extensibility object.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Project.Automation.OAProperty.Name">
            <summary>
            Gets the name of the object.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Project.Automation.OAProperty.NumIndices">
            <summary>
            Gets the number of indices required to access the value.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Project.Automation.OAProperty.Object">
            <summary>
            Sets or gets the object supporting the Property object.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Project.Automation.OAProperty.Parent">
            <summary>
            Microsoft Internal Use Only.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Project.Automation.OAProperty.Value">
            <summary>
            Gets or sets the value of the property returned by the Property object.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Project.Automation.OAReferenceFolderItem">
            <summary>
            Contains OAReferenceItem objects 
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Project.Automation.OAReferenceFolderItem.ProjectItems">
            <summary>
            Returns the project items collection of all the references defined for this project.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Project.Automation.OAReferenceItem">
            <summary>
            Represents the automation object equivalent to a ReferenceNode object
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.Automation.OAReferenceItem.Delete">
            <summary>
            Not implemented. If called throws invalid operation exception.
            </summary>	
        </member>
        <member name="M:Microsoft.VisualStudio.Project.Automation.OAReferenceItem.Open(System.String)">
            <summary>
            Not implemented. If called throws invalid operation exception.
            </summary>
            <param name="viewKind"> A Constants. vsViewKind indicating the type of view to use.</param>
            <returns></returns>
        </member>
        <member name="P:Microsoft.VisualStudio.Project.Automation.OAReferenceItem.Name">
            <summary>
            Gets or sets the name of the object.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Project.Automation.OAReferenceItem.Collection">
            <summary>
            Gets the ProjectItems collection containing the ProjectItem object supporting this property.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Project.Automation.OAReferenceBase`1">
            <summary>
            Represents the automation equivalent of ReferenceNode
            </summary>
            <typeparam name="RefType"></typeparam>
        </member>
        <member name="P:Microsoft.VisualStudio.Project.Automation.OAReferenceBase`1.RuntimeVersion">
            <summary>
            Gets the version of the runtime the reference was built against.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Project.Automation.OAReferenceBase`1.Aliases">
            <summary>
            Gets or sets the aliased names for the specified reference. This property applies to Visual C# only.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Project.Automation.OAReferenceBase`1.AutoReferenced">
            <summary>
            Gets whether the reference is automatically referenced by the compiler.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Project.Automation.OAReferenceBase`1.Isolated">
            <summary>
            Gets or sets whether the COM reference is isolated, that is, not registered with Windows.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Project.Automation.OAReferenceBase`1.RefType">
            <summary>
            Gets the type of reference: assembly, COM, or native.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Project.Automation.OAReferenceBase`1.Resolved">
            <summary>
            Gets whether the current reference was resolved.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Project.Automation.OAReferenceBase`1.SpecificVersion">
            <summary>
            Gets or sets whether only a specific version of the reference is used.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Project.Automation.OAReferenceBase`1.SubType">
            <summary>
            Sets or Gets the assembly subtype.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Project.Automation.OAProjectReference">
            <summary>
            Represents a project reference of the solution
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Project.Automation.OAReferences">
            <summary>
            Represents the automation object for the equivalent ReferenceContainerNode object
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Project.Automation.OAVSProject">
            <summary>
            Represents an automation friendly version of a language-specific project.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Project.Automation.OAVSProject.Events2">
            <summary>
            Gets a VSProjectEvents2 object that allows you to respond to events of the Imports,
            References, BuildManager, and VSLangProjWebReferencesEvents objects.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Project.Automation.OAVSProject.PublishManager">
            <summary>
            Gets a PublishManager object to allow click once publishing.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Project.Automation.OAVSProjectItem">
            <summary>
            Represents a language-specific project item
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Project.Automation.OAVSProjectItem.FileNode">
            <summary>
            File Node property
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Project.BuildPropertyPage">
            <summary>
            Defines the properties on the build property page and the logic the binds the properties to project data (load and save)
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Project.SettingsPage">
            <summary>
            The base class for property pages.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.SettingsPage.SetConfigProperty(System.String,Microsoft.VisualStudio.Shell.Interop._PersistStorageType,System.String)">
            <summary>
            Sets the value of a configuration dependent property.
            If the attribute does not exist it is created.  
            If value is null it will be set to an empty string.
            </summary>
            <param name="name">property name.</param>
            <param name="value">value of property</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.SettingsPage.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Project.ComReferenceNode">
            <summary>
            This type of node is used for references to COM components.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.ComReferenceNode.#ctor(Microsoft.VisualStudio.Project.ProjectNode,Microsoft.VisualStudio.Project.ProjectElement)">
            <summary>
            Constructor for the ComReferenceNode. 
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.ComReferenceNode.#ctor(Microsoft.VisualStudio.Project.ProjectNode,Microsoft.VisualStudio.Shell.Interop.VSCOMPONENTSELECTORDATA)">
            <summary>
            Overloaded constructor for creating a ComReferenceNode from selector data
            </summary>
            <param name="root">The Project node</param>
            <param name="selectorData">The component selctor data.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.ComReferenceNode.#ctor(Microsoft.VisualStudio.Project.ProjectNode,Microsoft.VisualStudio.Shell.Interop.VSCOMPONENTSELECTORDATA,System.String)">
            <summary>
            Overloaded constructor for creating a ComReferenceNode from selector data
            </summary>
            <param name="root">The Project node</param>
            <param name="selectorData">The component selctor data.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.ComReferenceNode.BindReferenceData">
            <summary>
            Links a reference node to the project and hierarchy.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.ComReferenceNode.IsAlreadyAdded(Microsoft.VisualStudio.Project.ReferenceNode@)">
            <summary>
            Checks if a reference is already added. The method parses all references and compares the the FinalItemSpec and the Guid.
            </summary>
            <returns>true if the assembly has already been added.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.ComReferenceNode.CanShowDefaultIcon">
            <summary>
            Determines if this is node a valid node for painting the default reference icon.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.ComReferenceNode.GetProjectElementBasedOnInputFromComponentSelectorData">
            <summary>
            This is an helper method to convert the VSCOMPONENTSELECTORDATA recieved by the
            implementer of IVsComponentUser into a ProjectElement that can be used to create
            an instance of this class.
            This should not be called for project reference or reference to managed assemblies.
            </summary>
            <returns>ProjectElement corresponding to the COM component passed in</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.ComReferenceNode.SetInstalledFilePath">
            <summary>
            Verify that the TypeLib is registered and set the the installed file path of the com reference.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Microsoft.VisualStudio.Project.ComReferenceNode.TypeGuid">
            <summary>
            Returns the Guid of the COM object.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Project.ComReferenceNode.InstalledFilePath">
            <summary>
            Returns the path where the COM object is installed.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.ConfigProvider.GetProjectConfiguration(System.String,System.String)">
            <summary>
            Creates new Project Configuartion objects based on the configuration name.
            </summary>
            <param name="configName">The name of the configuration</param>
            <returns>An instance of a ProjectConfig object.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.ConfigProvider.OpenProjectCfg(System.String,Microsoft.VisualStudio.Shell.Interop.IVsProjectCfg@)">
            <summary>
            Provides access to the IVsProjectCfg interface implemented on a project's configuration object. 
            </summary>
            <param name="projectCfgCanonicalName">The canonical name of the configuration to access.</param>
            <param name="projectCfg">The IVsProjectCfg interface of the configuration identified by szProjectCfgCanonicalName.</param>
            <returns>If the method succeeds, it returns S_OK. If it fails, it returns an error code. </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.ConfigProvider.get_UsesIndependentConfigurations(System.Int32@)">
            <summary>
            Checks whether or not this configuration provider uses independent configurations. 
            </summary>
            <param name="usesIndependentConfigurations">true if independent configurations are used, false if they are not used. By default returns true.</param>
            <returns>If the method succeeds, it returns S_OK. If it fails, it returns an error code.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.ConfigProvider.AddCfgsOfCfgName(System.String,System.String,System.Int32)">
            <summary>
            Copies an existing configuration name or creates a new one. 
            </summary>
            <param name="name">The name of the new configuration.</param>
            <param name="cloneName">the name of the configuration to copy, or a null reference, indicating that AddCfgsOfCfgName should create a new configuration.</param>
            <param name="fPrivate">Flag indicating whether or not the new configuration is private. If fPrivate is set to true, the configuration is private. If set to false, the configuration is public. This flag can be ignored.</param>
            <returns>If the method succeeds, it returns S_OK. If it fails, it returns an error code. </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.ConfigProvider.AddCfgsOfPlatformName(System.String,System.String)">
            <summary>
            Copies an existing platform name or creates a new one. 
            </summary>
            <param name="platformName">The name of the new platform.</param>
            <param name="clonePlatformName">The name of the platform to copy, or a null reference, indicating that AddCfgsOfPlatformName should create a new platform.</param>
            <returns>If the method succeeds, it returns S_OK. If it fails, it returns an error code.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.ConfigProvider.DeleteCfgsOfCfgName(System.String)">
            <summary>
            Deletes a specified configuration name. 
            </summary>
            <param name="name">The name of the configuration to be deleted.</param>
            <returns>If the method succeeds, it returns S_OK. If it fails, it returns an error code. </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.ConfigProvider.DeleteCfgsOfPlatformName(System.String)">
            <summary>
            Deletes a specified platform name. 
            </summary>
            <param name="platName">The platform name to delete.</param>
            <returns>If the method succeeds, it returns S_OK. If it fails, it returns an error code.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.ConfigProvider.GetCfgNames(System.UInt32,System.String[],System.UInt32[])">
            <summary>
            Returns the existing configurations stored in the project file.
            </summary>
            <param name="celt">Specifies the requested number of property names. If this number is unknown, celt can be zero.</param>
            <param name="names">On input, an allocated array to hold the number of configuration property names specified by celt. This parameter can also be a null reference if the celt parameter is zero. 
            On output, names contains configuration property names.</param>
            <param name="actual">The actual number of property names returned.</param>
            <returns>If the method succeeds, it returns S_OK. If it fails, it returns an error code.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.ConfigProvider.GetCfgOfName(System.String,System.String,Microsoft.VisualStudio.Shell.Interop.IVsCfg@)">
            <summary>
            Returns the configuration associated with a specified configuration or platform name. 
            </summary>
            <param name="name">The name of the configuration to be returned.</param>
            <param name="platName">The name of the platform for the configuration to be returned.</param>
            <param name="cfg">The implementation of the IVsCfg interface.</param>
            <returns>If the method succeeds, it returns S_OK. If it fails, it returns an error code.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.ConfigProvider.GetCfgProviderProperty(System.Int32,System.Object@)">
            <summary>
            Returns a specified configuration property. 
            </summary>
            <param name="propid">Specifies the property identifier for the property to return. For valid propid values, see __VSCFGPROPID.</param>
            <param name="var">The value of the property.</param>
            <returns>If the method succeeds, it returns S_OK. If it fails, it returns an error code.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.ConfigProvider.GetCfgs(System.UInt32,Microsoft.VisualStudio.Shell.Interop.IVsCfg[],System.UInt32[],System.UInt32[])">
            <summary>
            Returns the per-configuration objects for this object. 
            </summary>
            <param name="celt">Number of configuration objects to be returned or zero, indicating a request for an unknown number of objects.</param>
            <param name="a">On input, pointer to an interface array or a null reference. On output, this parameter points to an array of IVsCfg interfaces belonging to the requested configuration objects.</param>
            <param name="actual">The number of configuration objects actually returned or a null reference, if this information is not necessary.</param>
            <param name="flags">Flags that specify settings for project configurations, or a null reference (Nothing in Visual Basic) if no additional flag settings are required. For valid prgrFlags values, see __VSCFGFLAGS.</param>
            <returns>If the method succeeds, it returns S_OK. If it fails, it returns an error code.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.ConfigProvider.GetPlatformNames(System.UInt32,System.String[],System.UInt32[])">
            <summary>
            Returns one or more platform names. 
            </summary>
            <param name="celt">Specifies the requested number of platform names. If this number is unknown, celt can be zero.</param>
            <param name="names">On input, an allocated array to hold the number of platform names specified by celt. This parameter can also be a null reference if the celt parameter is zero. On output, names contains platform names.</param>
            <param name="actual">The actual number of platform names returned.</param>
            <returns>If the method succeeds, it returns S_OK. If it fails, it returns an error code.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.ConfigProvider.GetSupportedPlatformNames(System.UInt32,System.String[],System.UInt32[])">
            <summary>
            Returns the set of platforms that are installed on the user's machine. 
            </summary>
            <param name="celt">Specifies the requested number of supported platform names. If this number is unknown, celt can be zero.</param>
            <param name="names">On input, an allocated array to hold the number of names specified by celt. This parameter can also be a null reference (Nothing in Visual Basic)if the celt parameter is zero. On output, names contains the names of supported platforms</param>
            <param name="actual">The actual number of platform names returned.</param>
            <returns>If the method succeeds, it returns S_OK. If it fails, it returns an error code.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.ConfigProvider.RenameCfgsOfCfgName(System.String,System.String)">
            <summary>
            Assigns a new name to a configuration. 
            </summary>
            <param name="old">The old name of the target configuration.</param>
            <param name="newname">The new name of the target configuration.</param>
            <returns>If the method succeeds, it returns S_OK. If it fails, it returns an error code.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.ConfigProvider.UnadviseCfgProviderEvents(System.UInt32)">
            <summary>
            Cancels a registration for configuration event notification. 
            </summary>
            <param name="cookie">The cookie used for registration.</param>
            <returns>If the method succeeds, it returns S_OK. If it fails, it returns an error code.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.ConfigProvider.AdviseCfgProviderEvents(Microsoft.VisualStudio.Shell.Interop.IVsCfgProviderEvents,System.UInt32@)">
            <summary>
            Registers the caller for configuration event notification. 
            </summary>
            <param name="sink">Reference to the IVsCfgProviderEvents interface to be called to provide notification of configuration events.</param>
            <param name="cookie">Reference to a token representing the completed registration</param>
            <returns>If the method succeeds, it returns S_OK. If it fails, it returns an error code.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.ConfigProvider.ClonePropertyGroup(Microsoft.Build.Evaluation.Project,Microsoft.Build.Construction.ProjectPropertyGroupElement)">
            <summary>
            For internal use only.
            This creates a copy of an existing configuration and add it to the project.
            Caller should change the condition on the PropertyGroup.
            If derived class want to accomplish this, they should call ConfigProvider.AddCfgsOfCfgName()
            It is expected that in the future MSBuild will have support for this so we don't have to
            do it manually.
            </summary>
            <param name="group">PropertyGroup to clone</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.ConfigProvider.GetAutomationObject(System.String,System.Object@)">
            <summary>
            Proved access to an IDispatchable object being a list of configuration properties
            </summary>
            <param name="configurationName">Combined Name and Platform for the configuration requested</param>
            <param name="configurationProperties">The IDispatchcable object</param>
            <returns>S_OK if successful</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.ConfigProvider.NotifyOnCfgNameAdded(System.String)">
            <summary>
            Called when a new configuration name was added.
            </summary>
            <param name="name">The name of configuration just added.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.ConfigProvider.NotifyOnCfgNameDeleted(System.String)">
            <summary>
            Called when a config name was deleted.
            </summary>
            <param name="name">The name of the configuration.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.ConfigProvider.NotifyOnCfgNameRenamed(System.String,System.String)">
            <summary>
            Called when a config name was renamed
            </summary>
            <param name="oldName">Old configuration name</param>
            <param name="newName">New configuration name</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.ConfigProvider.NotifyOnPlatformNameAdded(System.String)">
            <summary>
            Called when a platform name was added
            </summary>
            <param name="platformName">The name of the platform.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.ConfigProvider.NotifyOnPlatformNameDeleted(System.String)">
            <summary>
            Called when a platform name was deleted
            </summary>
            <param name="platformName">The name of the platform.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.ConfigProvider.GetPlatformsFromProject">
            <summary>
            Gets all the platforms defined in the project
            </summary>
            <returns>An array of platform names.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.ConfigProvider.GetSupportedPlatformsFromProject">
            <summary>
            Return the supported platform names.
            </summary>
            <returns>An array of supported platform names.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.ConfigProvider.GetPlatformNameFromPlatformProperty(System.String)">
            <summary>
            Helper function to convert AnyCPU to Any CPU.
            </summary>
            <param name="oldName">The oldname.</param>
            <returns>The new name.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.ConfigProvider.GetPlatformPropertyFromPlatformName(System.String)">
            <summary>
            Helper function to convert Any CPU to AnyCPU.
            </summary>
            <param name="oldName">The oldname.</param>
            <returns>The new name.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.ConfigProvider.GetPlatforms(System.UInt32,System.String[],System.UInt32[],System.String[])">
            <summary>
            Common method for handling platform names.
            </summary>
            <param name="celt">Specifies the requested number of platform names. If this number is unknown, celt can be zero.</param>
            <param name="names">On input, an allocated array to hold the number of platform names specified by celt. This parameter can also be null if the celt parameter is zero. On output, names contains platform names</param>
            <param name="actual">A count of the actual number of platform names returned.</param>
            <param name="platforms">An array of available platform names</param>
            <returns>A count of the actual number of platform names returned.</returns>
            <devremark>The platforms array is never null. It is assured by the callers.</devremark>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.ConfigProvider.GetPropertiesConditionedOn(System.String)">
            <summary>
            Get all the configurations in the project.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Project.ConfigProvider.ProjectManager">
            <summary>
            The associated project.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "P:Microsoft.VisualStudio.Project.ConfigProvider.NewConfigProperties" -->
        <member name="T:Microsoft.VisualStudio.Project.ProjectConfigProperties">
            <summary>
            Implements the configuration dependent properties interface
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Project.DataObject">
            <summary>
            Unfortunately System.Windows.Forms.IDataObject and
            Microsoft.VisualStudio.OLE.Interop.IDataObject are different...
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Project.DependentFileNode">
            <summary>
            Defines the logic for all dependent file nodes (solution explorer icon, commands etc.)
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Project.IProjectSourceNode">
            <summary>
            This interface provides the ability to identify the items which have the cability of including / excluding
            themselves to / from the project system. It also tells if the item is a member of the project or not.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.IProjectSourceNode.ExcludeFromProject">
            <summary>
            Exclude the item from the project system.
            </summary>
            <returns>Returns success or failure code.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.IProjectSourceNode.IncludeInProject">
            <summary>
            Include the item into the project system.
            </summary>
            <returns>Returns success or failure code.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.IProjectSourceNode.IncludeInProject(System.Boolean)">
            <summary>
            Include the item into the project system recursively.
            </summary>
            <param name="recursive">Flag that indicates if the inclusion should be recursive or not.</param>
            <returns>Returns success or failure code.</returns>
        </member>
        <member name="P:Microsoft.VisualStudio.Project.IProjectSourceNode.IsNonmemberItem">
            <summary>
            Gets if the item is not a member of the project.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.FileNode.#ctor(Microsoft.VisualStudio.Project.ProjectNode,Microsoft.VisualStudio.Project.ProjectElement)">
            <summary>
            Constructor for the FileNode
            </summary>
            <param name="root">Root of the hierarchy</param>
            <param name="e">Associated project element</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.FileNode.GetAutomationObject">
            <summary>
            Get an instance of the automation object for a FileNode
            </summary>
            <returns>An instance of the Automation.OAFileNode if succeeded</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Microsoft.VisualStudio.Project.FileNode.SetEditLabel(System.String)" -->
        <member name="M:Microsoft.VisualStudio.Project.FileNode.DeleteFromStorage(System.String)">
            <summary>
            Delete the item corresponding to the specified path from storage.
            </summary>
            <param name="path"></param>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.FileNode.SetEditLabel(System.String,System.String)">
            <summary>
            Rename the underlying document based on the change the user just made to the edit label.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.FileNode.GetDocumentManager">
            <summary>
            Returns a specific Document manager to handle files
            </summary>
            <returns>Document manager object</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Microsoft.VisualStudio.Project.FileNode.GetDragTargetHandlerNode" -->
        <member name="M:Microsoft.VisualStudio.Project.FileNode.AfterSaveItemAs(System.IntPtr,System.String)">
            <summary>
            Performs a SaveAs operation of an open document. Called from SaveItem after the running document table has been updated with the new doc data.
            </summary>
            <param name="docData">A pointer to the document in the rdt</param>
            <param name="newFilePath">The new file path to the document</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.FileNode.CanShowDefaultIcon">
            <summary>
            Determines if this is node a valid node for painting the default file icon.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.FileNode.IsFileOnDisk(System.Boolean)">
            <summary>
            Determine if this item is represented physical on disk and shows a messagebox in case that the file is not present and a UI is to be presented.
            </summary>
            <param name="showMessage">true if user should be presented for UI in case the file is not present</param>
            <returns>true if file is on disk</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.FileNode.IsFileOnDisk(System.String)">
            <summary>
            Determine if the file represented by "path" exist in storage.
            Override this method if your files are not persisted on disk.
            </summary>
            <param name="path">Url representing the file</param>
            <returns>True if the file exist</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.FileNode.RenameFileNode(System.String,System.String,System.String,Microsoft.VisualStudio.Project.HierarchyNode)">
            <summary>
            Renames the file in the hierarchy by removing old node and adding a new node in the hierarchy.
            </summary>
            <param name="oldFileName">The old file name.</param>
            <param name="newFileName">The new file name</param>
            <param name="newParentId">The new parent id of the item.</param>
            <returns>The newly added FileNode.</returns>
            <remarks>While a new node will be used to represent the item, the underlying MSBuild item will be the same and as a result file properties saved in the project file will not be lost.</remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.FileNode.RenameChildNodes(Microsoft.VisualStudio.Project.FileNode)">
            <summary>
            Rename all childnodes
            </summary>
            <param name="newFileNode">The newly added Parent node.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.FileNode.RecoverFromRenameFailure(System.String,System.String)">
            <summary>
            Tries recovering from a rename failure.
            </summary>
            <param name="fileThatFailed"> The file that failed to be renamed.</param>
            <param name="originalFileName">The original filenamee</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.FileNode.RenameInStorage(System.String,System.String)">
            <summary>
            This should be overriden for node that are not saved on disk
            </summary>
            <param name="oldName">Previous name in storage</param>
            <param name="newName">New name in storage</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.FileNode.CreateSingleFileGenerator">
            <summary>
            factory method for creating single file generators.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.FileNode.GetSccSpecialFiles(System.String,System.Collections.Generic.IList{System.String},System.Collections.Generic.IList{Microsoft.VisualStudio.Shell.Interop.tagVsSccFilesFlags})">
            <summary>
            This method should be overridden to provide the list of special files and associated flags for source control.
            </summary>
            <param name="sccFile">One of the file associated to the node.</param>
            <param name="files">The list of files to be placed under source control.</param>
            <param name="flags">The flags that are associated to the files.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.FileNode.SetProperty(System.Int32,System.Object)">
            <summary>
            Sets the node property.
            </summary>
            <param name="propid">Property id.</param>
            <param name="value">Property value.</param>
            <returns>Returns success or failure code.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.FileNode.GetProperty(System.Int32)">
            <summary>
            Gets the node property.
            </summary>
            <param name="propId">Property id.</param>
            <returns>The property value.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.FileNode.GetEditLabel">
            <summary>
            Provides the node name for inline editing of caption. 
            Overriden to diable this fuctionality for non member fodler node.
            </summary>
            <returns>Caption of the file node if the node is a member item, null otherwise.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.FileNode.Microsoft#VisualStudio#Project#IProjectSourceNode#ExcludeFromProject">
            <summary>
            Exclude the item from the project system.
            </summary>
            <returns>Returns success or failure code.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.FileNode.Microsoft#VisualStudio#Project#IProjectSourceNode#IncludeInProject">
            <summary>
            Include the item into the project system.
            </summary>
            <returns>Returns success or failure code.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.FileNode.Microsoft#VisualStudio#Project#IProjectSourceNode#IncludeInProject(System.Boolean)">
            <summary>
            Include the item into the project system recursively.
            </summary>
            <param name="recursive">Flag that indicates if the inclusion should be recursive or not.</param>
            <returns>Returns success or failure code.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.FileNode.RenameDocument(System.String,System.String)">
            <summary>
            Get's called to rename the eventually running document this hierarchyitem points to
            </summary>
            returns FALSE if the doc can not be renamed
        </member>
        <member name="M:Microsoft.VisualStudio.Project.FileNode.RenameCaseOnlyChange(System.String)">
            <summary>
            Renames the file node for a case only change.
            </summary>
            <param name="newFileName">The new file name.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.FileNode.OnCustomToolChanged(System.Object,Microsoft.VisualStudio.Project.HierarchyNodeEventArgs)">
            <summary>
            Event handler for the Custom tool property changes
            </summary>
            <param name="sender">FileNode sending it</param>
            <param name="e">Node event args</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.FileNode.OnCustomToolNameSpaceChanged(System.Object,Microsoft.VisualStudio.Project.HierarchyNodeEventArgs)">
            <summary>
            Event handler for the Custom tool namespce property changes
            </summary>
            <param name="sender">FileNode sending it</param>
            <param name="e">Node event args</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.FileNode.RunGenerator">
            <summary>
            Runs a generator.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Project.FileNode.Caption">
            <summary>
            overwrites of the generic hierarchyitem.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Project.FileNode.ExcludeNodeFromScc">
            <summary>
            Specifies if a Node is under source control.
            </summary>
            <value>Specifies if a Node is under source control.</value>
        </member>
        <member name="P:Microsoft.VisualStudio.Project.FileNode.IsNonmemberItem">
            <summary>
            Flag that indicates if this node is not a member of the project.
            </summary>
            <value>true if the item is not a member of the project build, false otherwise.</value>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.DependentFileNode.#ctor(Microsoft.VisualStudio.Project.ProjectNode,Microsoft.VisualStudio.Project.ProjectElement)">
            <summary>
            Constructor for the DependentFileNode
            </summary>
            <param name="root">Root of the hierarchy</param>
            <param name="e">Associated project element</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.DependentFileNode.GetEditLabel">
            <summary>
            Disable rename
            </summary>
            <param name="label">new label</param>
            <returns>E_NOTIMPLE in order to tell the call that we do not support rename</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.DependentFileNode.GetIconHandle(System.Boolean)">
            <summary>
            Gets a handle to the icon that should be set for this node
            </summary>
            <param name="open">Whether the folder is open, ignored here.</param>
            <returns>Handle to icon for the node</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.DependentFileNode.QueryStatusOnNode(System.Guid,System.UInt32,System.IntPtr,EnvDTE.vsCommandStatus@)">
            <summary>
            Disable certain commands for dependent file nodes 
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.DependentFileNode.PrepareSelectedNodesForClipboard">
            <summary>
            DependentFileNodes node cannot be dragged.
            </summary>
            <returns>null</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.DependentFileNode.UpdateSccStateIcons">
            <summary>
            Redraws the state icon if the node is not excluded from source control.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Project.DependentFileNode.ImageIndex">
            <summary>
            Defines if the node has a name relation to its parent node
            e.g. Form1.ext and Form1.resx are name related (until first occurence of extention separator)
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Project.DesignPropertyDescriptor">
            <summary>
            The purpose of DesignPropertyDescriptor is to allow us to customize the
            display name of the property in the property grid.  None of the CLR
            implementations of PropertyDescriptor allow you to change the DisplayName.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.DesignPropertyDescriptor.GetEditor(System.Type)">
            <summary>
            Delegates to base.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.DesignPropertyDescriptor.GetTypeFromNameProperty(System.String)">
            <summary>
            Convert name to a Type object.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.DesignPropertyDescriptor.CanResetValue(System.Object)">
            <summary>
            Delegates to base.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.DesignPropertyDescriptor.GetValue(System.Object)">
            <summary>
            Delegates to base.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.DesignPropertyDescriptor.ResetValue(System.Object)">
            <summary>
            Delegates to base.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.DesignPropertyDescriptor.SetValue(System.Object,System.Object)">
            <summary>
            Delegates to base.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.DesignPropertyDescriptor.ShouldSerializeValue(System.Object)">
            <summary>
            Delegates to base.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.DesignPropertyDescriptor.#ctor(System.ComponentModel.PropertyDescriptor,Microsoft.VisualStudio.Project.ProjectNode)">
            <summary>
            Constructor.  Copy the base property descriptor and also hold a pointer
            to it for calling its overridden abstract methods.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Project.DesignPropertyDescriptor.DisplayName">
            <summary>
            Delegates to base.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Project.DesignPropertyDescriptor.ComponentType">
            <summary>
            Delegates to base.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Project.DesignPropertyDescriptor.IsReadOnly">
            <summary>
            Delegates to base.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Project.DesignPropertyDescriptor.PropertyType">
            <summary>
            Delegates to base.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Project.DesignPropertyDescriptor.Converter">
            <summary>
            Return type converter for property
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Project.DocumentManager">
            <summary>
            This abstract class handles opening, saving of items in the hierarchy.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.DocumentManager.Open(System.Guid@,System.IntPtr,Microsoft.VisualStudio.Shell.Interop.IVsWindowFrame@,Microsoft.VisualStudio.Project.WindowFrameShowAction)">
            <summary>
            Open a document using the standard editor. This method has no implementation since a document is abstract in this context
            </summary>
            <param name="logicalView">In MultiView case determines view to be activated by IVsMultiViewDocumentView. For a list of logical view GUIDS, see constants starting with LOGVIEWID_ defined in NativeMethods class</param>
            <param name="docDataExisting">IntPtr to the IUnknown interface of the existing document data object</param>
            <param name="windowFrame">A reference to the window frame that is mapped to the document</param>
            <param name="windowFrameAction">Determine the UI action on the document window</param>
            <returns>NotImplementedException</returns>
            <remarks>See FileDocumentManager class for an implementation of this method</remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.DocumentManager.OpenWithSpecific(System.UInt32,System.Guid@,System.String,System.Guid@,System.IntPtr,Microsoft.VisualStudio.Shell.Interop.IVsWindowFrame@,Microsoft.VisualStudio.Project.WindowFrameShowAction)">
            <summary>
            Open a document using a specific editor. This method has no implementation.
            </summary>
            <param name="editorFlags">Specifies actions to take when opening a specific editor. Possible editor flags are defined in the enumeration Microsoft.VisualStudio.Shell.Interop.__VSOSPEFLAGS</param>
            <param name="editorType">Unique identifier of the editor type</param>
            <param name="physicalView">Name of the physical view. If null, the environment calls MapLogicalView on the editor factory to determine the physical view that corresponds to the logical view. In this case, null does not specify the primary view, but rather indicates that you do not know which view corresponds to the logical view</param>
            <param name="logicalView">In MultiView case determines view to be activated by IVsMultiViewDocumentView. For a list of logical view GUIDS, see constants starting with LOGVIEWID_ defined in NativeMethods class</param>
            <param name="docDataExisting">IntPtr to the IUnknown interface of the existing document data object</param>
            <param name="frame">A reference to the window frame that is mapped to the document</param>
            <param name="windowFrameAction">Determine the UI action on the document window</param>
            <returns>NotImplementedException</returns>
            <remarks>See FileDocumentManager for an implementation of this method</remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.DocumentManager.Close(Microsoft.VisualStudio.Shell.Interop.__FRAMECLOSE)">
            <summary>
            Close an open document window
            </summary>
            <param name="closeFlag">Decides how to close the document</param>
            <returns>S_OK if successful, otherwise an error is returned</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.DocumentManager.Save(System.Boolean)">
            <summary>
            Silently saves an open document
            </summary>
            <param name="saveIfDirty">Save the open document only if it is dirty</param>
            <remarks>The call to SaveDocData may return Microsoft.VisualStudio.Shell.Interop.PFF_RESULTS.STG_S_DATALOSS to indicate some characters could not be represented in the current codepage</remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.DocumentManager.GetDocInfo(System.Boolean@,System.Boolean@,System.Boolean@,System.UInt32@,Microsoft.VisualStudio.Shell.Interop.IVsPersistDocData@)">
            <summary>
            Get document properties from RDT
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.DocumentManager.UpdateCaption(System.IServiceProvider,System.String,System.IntPtr)">
            <summary>
            Updates the caption for all windows associated to the document.
            </summary>
            <param name="site">The service provider.</param>
            <param name="caption">The new caption.</param>
            <param name="docData">The IUnknown interface to a document data object associated with a registered document.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.DocumentManager.RenameDocument(System.IServiceProvider,System.String,System.String,System.UInt32)">
            <summary>
            Rename document in the running document table from oldName to newName.
            </summary>
            <param name="provider">The service provider.</param>
            <param name="oldName">Full path to the old name of the document.</param>		
            <param name="newName">Full path to the new name of the document.</param>		
            <param name="newItemId">The new item id of the document</param>		
        </member>
        <member name="T:Microsoft.VisualStudio.Project.DropDataType">
            <summary>
            Defines drop types
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Project.DropDataType.Shell">
            <summary>
            Windows Explorer
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Project.DropDataType.VSStorage">
            <summary>
            VSProject storage items
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Project.DropDataType.VSReference">
            <summary>
            VSProject reference items
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Project.FileDocumentManager">
            <summary>
            This class handles opening, saving of file items in the hierarchy.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.FileDocumentManager.Open(System.Guid@,System.IntPtr,Microsoft.VisualStudio.Shell.Interop.IVsWindowFrame@,Microsoft.VisualStudio.Project.WindowFrameShowAction)">
            <summary>
            Open a file using the standard editor
            </summary>
            <param name="logicalView">In MultiView case determines view to be activated by IVsMultiViewDocumentView. For a list of logical view GUIDS, see constants starting with LOGVIEWID_ defined in NativeMethods class</param>
            <param name="docDataExisting">IntPtr to the IUnknown interface of the existing document data object</param>
            <param name="windowFrame">A reference to the window frame that is mapped to the file</param>
            <param name="windowFrameAction">Determine the UI action on the document window</param>
            <returns>If the method succeeds, it returns S_OK. If it fails, it returns an error code.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.FileDocumentManager.OpenWithSpecific(System.UInt32,System.Guid@,System.String,System.Guid@,System.IntPtr,Microsoft.VisualStudio.Shell.Interop.IVsWindowFrame@,Microsoft.VisualStudio.Project.WindowFrameShowAction)">
            <summary>
            Open a file with a specific editor
            </summary>
            <param name="editorFlags">Specifies actions to take when opening a specific editor. Possible editor flags are defined in the enumeration Microsoft.VisualStudio.Shell.Interop.__VSOSPEFLAGS</param>
            <param name="editorType">Unique identifier of the editor type</param>
            <param name="physicalView">Name of the physical view. If null, the environment calls MapLogicalView on the editor factory to determine the physical view that corresponds to the logical view. In this case, null does not specify the primary view, but rather indicates that you do not know which view corresponds to the logical view</param>
            <param name="logicalView">In MultiView case determines view to be activated by IVsMultiViewDocumentView. For a list of logical view GUIDS, see constants starting with LOGVIEWID_ defined in NativeMethods class</param>
            <param name="docDataExisting">IntPtr to the IUnknown interface of the existing document data object</param>
            <param name="windowFrame">A reference to the window frame that is mapped to the file</param>
            <param name="windowFrameAction">Determine the UI action on the document window</param>
            <returns>If the method succeeds, it returns S_OK. If it fails, it returns an error code.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.FileDocumentManager.Open(System.Boolean,System.Boolean,Microsoft.VisualStudio.Project.WindowFrameShowAction)">
            <summary>
            Open a file in a document window with a std editor
            </summary>
            <param name="newFile">Open the file as a new file</param>
            <param name="openWith">Use a dialog box to determine which editor to use</param>
            <param name="windowFrameAction">Determine the UI action on the document window</param>
            <returns>If the method succeeds, it returns S_OK. If it fails, it returns an error code.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.FileDocumentManager.Open(System.Boolean,System.Boolean,System.Guid,Microsoft.VisualStudio.Shell.Interop.IVsWindowFrame@,Microsoft.VisualStudio.Project.WindowFrameShowAction)">
            <summary>
            Open a file in a document window with a std editor
            </summary>
            <param name="newFile">Open the file as a new file</param>
            <param name="openWith">Use a dialog box to determine which editor to use</param>
            <param name="logicalView">In MultiView case determines view to be activated by IVsMultiViewDocumentView. For a list of logical view GUIDS, see constants starting with LOGVIEWID_ defined in NativeMethods class</param>
            <param name="frame">A reference to the window frame that is mapped to the file</param>
            <param name="windowFrameAction">Determine the UI action on the document window</param>
            <returns>If the method succeeds, it returns S_OK. If it fails, it returns an error code.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.FileDocumentManager.Open(System.Boolean,System.Boolean,System.Guid@,System.IntPtr,Microsoft.VisualStudio.Shell.Interop.IVsWindowFrame@,Microsoft.VisualStudio.Project.WindowFrameShowAction)">
            <summary>
            Open a file in a document window
            </summary>
            <param name="newFile">Open the file as a new file</param>
            <param name="openWith">Use a dialog box to determine which editor to use</param>
            <param name="logicalView">In MultiView case determines view to be activated by IVsMultiViewDocumentView. For a list of logical view GUIDS, see constants starting with LOGVIEWID_ defined in NativeMethods class</param>
            <param name="docDataExisting">IntPtr to the IUnknown interface of the existing document data object</param>
            <param name="windowFrame">A reference to the window frame that is mapped to the file</param>
            <param name="windowFrameAction">Determine the UI action on the document window</param>
            <returns>If the method succeeds, it returns S_OK. If it fails, it returns an error code.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.FolderNode.#ctor(Microsoft.VisualStudio.Project.ProjectNode,System.String,Microsoft.VisualStudio.Project.ProjectElement)">
            <summary>
            Constructor for the FolderNode
            </summary>
            <param name="root">Root node of the hierarchy</param>
            <param name="relativePath">relative path from root i.e.: "NewFolder1\\NewFolder2\\NewFolder3</param>
            <param name="element">Associated project element</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.FolderNode.GetAutomationObject">
            <summary>
            Get the automation object for the FolderNode
            </summary>
            <returns>An instance of the Automation.OAFolderNode type if succeeded</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.FolderNode.SetProperty(System.Int32,System.Object)">
            <summary>
            Sets the node property.
            </summary>
            <param name="propid">Property id.</param>
            <param name="value">Property value.</param>
            <returns>Returns success or failure code.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.FolderNode.GetProperty(System.Int32)">
            <summary>
            Gets the node property.
            </summary>
            <param name="propId">Property id.</param>
            <returns>The property value.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.FolderNode.GetEditLabel">
            <summary>
            Provides the node name for inline editing of caption. 
            Overriden to diable this fuctionality for non member fodler node.
            </summary>
            <returns>Caption of the folder node if the node is a member item, null otherwise.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.FolderNode.CollapseFolder">
            <summary>
            Collapses the folder.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.FolderNode.ExpandFolder">
            <summary>
            Expands the folder.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.FolderNode.SetEditLabel(System.String)">
            <summary>
            Rename Folder
            </summary>
            <param name="label">new Name of Folder</param>
            <returns>VSConstants.S_OK, if succeeded</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.FolderNode.GetSccFiles(System.Collections.Generic.IList{System.String},System.Collections.Generic.IList{Microsoft.VisualStudio.Shell.Interop.tagVsSccFilesFlags})">
            <summary>
            Enumerate the files associated with this node.
            A folder node is not a file and as such no file to enumerate.
            </summary>
            <param name="files">The list of files to be placed under source control.</param>
            <param name="flags">The flags that are associated to the files.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.FolderNode.GetSccSpecialFiles(System.String,System.Collections.Generic.IList{System.String},System.Collections.Generic.IList{Microsoft.VisualStudio.Shell.Interop.tagVsSccFilesFlags})">
            <summary>
            This method should be overridden to provide the list of special files and associated flags for source control.
            </summary>
            <param name="sccFile">One of the file associated to the node.</param>
            <param name="files">The list of files to be placed under source control.</param>
            <param name="flags">The flags that are associated to the files.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.FolderNode.UpdateSccStateIcons">
            <summary>
            Recursevily walks the folder nodes and redraws the state icons
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.FolderNode.AddToMSBuild(System.Boolean)">
            <summary>
            Adds the this node to the build system.
            </summary>
            <param name="recursive">Flag to indicate if the addition should be recursive.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.FolderNode.SetExpanded(System.Boolean)">
            <summary>
            Sets the expanded state of the folder.
            </summary>
            <param name="expanded">Flag that indicates the expanded state of the folder.
            This should be 'true' for expanded and 'false' for collapsed state.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.FolderNode.Microsoft#VisualStudio#Project#IProjectSourceNode#ExcludeFromProject">
            <summary>
            Exclude the item from the project system.
            </summary>
            <returns>Returns success or failure code.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.FolderNode.Microsoft#VisualStudio#Project#IProjectSourceNode#IncludeInProject">
            <summary>
            Include the item into the project system.
            </summary>
            <returns>Returns success or failure code.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.FolderNode.Microsoft#VisualStudio#Project#IProjectSourceNode#IncludeInProject(System.Boolean)">
            <summary>
            Include the item into the project system recursively.
            </summary>
            <param name="recursive">Flag that indicates if the inclusion should be recursive or not.</param>
            <returns>Returns success or failure code.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.FolderNode.DeleteFolder(System.String)">
            <summary>
            Override if your node is not a file system folder so that
            it does nothing or it deletes it from your storage location.
            </summary>
            <param name="path">Path to the folder to delete</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.FolderNode.CreateDirectory">
            <summary>
            creates the physical directory for a folder node
            Override if your node does not use file system folder
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.FolderNode.CreateDirectory(System.String)">
            <summary>
            Creates a folder nodes physical directory
            Override if your node does not use file system folder
            </summary>
            <param name="newName"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.FolderNode.RenameDirectory(System.String)">
            <summary>
            Rename the physical directory for a folder node
            Override if your node does not use file system folder
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.FolderNode.ShowFileOrFolderAlreadExistsErrorMessage(System.String)">
            <summary>
            Show error message if not in automation mode, otherwise throw exception
            </summary>
            <param name="newPath">path of file or folder already existing on disk</param>
            <returns>S_OK</returns>
        </member>
        <member name="P:Microsoft.VisualStudio.Project.FolderNode.ExcludeNodeFromScc">
            <summary>
            Specifies if a Node is under source control.
            </summary>
            <value>Specifies if a Node is under source control.</value>
        </member>
        <member name="P:Microsoft.VisualStudio.Project.FolderNode.StateIconIndex">
            <summary>
            This relates to the SCC glyph
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Project.FolderNode.IsNonmemberItem">
            <summary>
            Flag that indicates if this node is not a member of the project.
            </summary>
            <value>true if the item is not a member of the project build, false otherwise.</value>
        </member>
        <member name="T:Microsoft.VisualStudio.Project.IdeBuildLogger">
            <summary>
            This class implements an MSBuild logger that output events to VS outputwindow and tasklist.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.IdeBuildLogger.#ctor(Microsoft.VisualStudio.Shell.Interop.IVsOutputWindowPane,Microsoft.VisualStudio.Shell.TaskProvider,Microsoft.VisualStudio.Shell.Interop.IVsHierarchy)">
            <summary>
            Constructor.  Inititialize member data.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.IdeBuildLogger.Initialize(Microsoft.Build.Framework.IEventSource)">
            <summary>
            Overridden from the Logger class.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.IdeBuildLogger.BuildStartedHandler(System.Object,Microsoft.Build.Framework.BuildStartedEventArgs)">
            <summary>
            This is the delegate for BuildStartedHandler events.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.IdeBuildLogger.BuildFinishedHandler(System.Object,Microsoft.Build.Framework.BuildFinishedEventArgs)">
            <summary>
            This is the delegate for BuildFinishedHandler events.
            </summary>
            <param name="sender"></param>
            <param name="buildEvent"></param>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.IdeBuildLogger.ProjectStartedHandler(System.Object,Microsoft.Build.Framework.ProjectStartedEventArgs)">
            <summary>
            This is the delegate for ProjectStartedHandler events.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.IdeBuildLogger.ProjectFinishedHandler(System.Object,Microsoft.Build.Framework.ProjectFinishedEventArgs)">
            <summary>
            This is the delegate for ProjectFinishedHandler events.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.IdeBuildLogger.TargetStartedHandler(System.Object,Microsoft.Build.Framework.TargetStartedEventArgs)">
            <summary>
            This is the delegate for TargetStartedHandler events.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.IdeBuildLogger.TargetFinishedHandler(System.Object,Microsoft.Build.Framework.TargetFinishedEventArgs)">
            <summary>
            This is the delegate for TargetFinishedHandler events.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.IdeBuildLogger.TaskStartedHandler(System.Object,Microsoft.Build.Framework.TaskStartedEventArgs)">
            <summary>
            This is the delegate for TaskStartedHandler events.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.IdeBuildLogger.TaskFinishedHandler(System.Object,Microsoft.Build.Framework.TaskFinishedEventArgs)">
            <summary>
            This is the delegate for TaskFinishedHandler events.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.IdeBuildLogger.CustomHandler(System.Object,Microsoft.Build.Framework.CustomBuildEventArgs)">
            <summary>
            This is the delegate for CustomHandler events.
            </summary>
            <param name="sender"></param>
            <param name="buildEvent"></param>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.IdeBuildLogger.ErrorHandler(System.Object,Microsoft.Build.Framework.BuildErrorEventArgs)">
            <summary>
            This is the delegate for error events.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.IdeBuildLogger.WarningHandler(System.Object,Microsoft.Build.Framework.BuildWarningEventArgs)">
            <summary>
            This is the delegate for warning events.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.IdeBuildLogger.MessageHandler(System.Object,Microsoft.Build.Framework.BuildMessageEventArgs)">
            <summary>
            This is the delegate for Message event types
            </summary>		
        </member>
        <member name="M:Microsoft.VisualStudio.Project.IdeBuildLogger.LogAtImportance(Microsoft.Build.Framework.MessageImportance)">
            <summary>
            This method takes a MessageImportance and returns true if messages
            at importance i should be loggeed.  Otherwise return false.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.IdeBuildLogger.GetFormattedErrorMessage(System.String,System.Int32,System.Int32,System.Boolean,System.String,System.String)">
            <summary>
            Format error messages for the task list
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.IdeBuildLogger.SetVerbosity">
            <summary>
            Sets the verbosity level.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.IdeBuildLogger.ClearCachedVerbosity">
            <summary>
            Clear the cached verbosity, so that it will be re-evaluated from the build verbosity registry key.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.IdeBuildLogger.BeginInvokeWithErrorMessage(System.IServiceProvider,System.Windows.Threading.Dispatcher,System.Action)">
            <summary>
            Call Dispatcher.BeginInvoke, showing an error message if there was a non-critical exception.
            </summary>
            <param name="serviceProvider">service provider</param>
            <param name="dispatcher">dispatcher</param>
            <param name="action">action to invoke</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.IdeBuildLogger.CallWithErrorMessage(System.IServiceProvider,System.Action)">
            <summary>
            Show error message if exception is caught when invoking a method
            </summary>
            <param name="serviceProvider">service provider</param>
            <param name="action">action to invoke</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.IdeBuildLogger.ShowErrorMessage(System.IServiceProvider,System.Exception)">
            <summary>
            Show error window about the exception
            </summary>
            <param name="serviceProvider">service provider</param>
            <param name="exception">exception</param>
        </member>
        <member name="P:Microsoft.VisualStudio.Project.IdeBuildLogger.InteractiveBuild">
            <summary>
            When the build is not a "design time" (background or secondary) build this is True
            </summary>
            <remarks>
            The only known way to detect an interactive build is to check this.outputWindowPane for null.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Project.IdeBuildLogger.BuildVerbosityRegistryRoot">
            <summary>
            When building from within VS, setting this will
            enable the logger to retrive the verbosity from
            the correct registry hive.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Project.IdeBuildLogger.OutputWindowPane">
            <summary>
            Set to null to avoid writing to the output window
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.ImageHandler.#ctor">
            <summary>
            Builds an empty ImageHandler object.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.ImageHandler.#ctor(System.IO.Stream)">
            <summary>
            Builds an ImageHandler object from a Stream providing the bitmap that
            stores the images for the image list.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.ImageHandler.#ctor(System.Windows.Forms.ImageList)">
            <summary>
            Builds an ImageHandler object from an ImageList object.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.ImageHandler.Close">
            <summary>
            Closes the ImageHandler object freeing its resources.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.ImageHandler.AddImage(System.Drawing.Image)">
            <summary>
            Add an image to the ImageHandler.
            </summary>
            <param name="image">the image object to be added.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.ImageHandler.GetIconHandle(System.Int32)">
            <summary>
            Returns the handle to an icon build from the image of index
            iconIndex in the image list.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.ImageHandler.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Project.ImageHandler.ImageList">
            <summary>
            Get or set the ImageList object for this ImageHandler.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Project.PropPageStatus">
            <summary>
            Defines the currect state of a property page.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Project.ReplaceBetweenPairToken">
            <summary>
            Storage classes for string to be deleted between tokens to be deleted 
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Project.ReplaceBetweenPairToken.tokenStart">
            <summary>
            Token start
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Project.ReplaceBetweenPairToken.tokenEnd">
            <summary>
            End token
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Project.ReplaceBetweenPairToken.replacement">
            <summary>
            Replacement string
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Project.ReplaceBetweenPairToken.tokenidentifier">
            <summary>
            Token identifier string
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.ReplaceBetweenPairToken.#ctor(System.String,System.String,System.String,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="blockStart">Start token</param>
            <param name="blockEnd">End Token</param>
            <param name="replacement">Replacement string.</param>
        </member>
        <member name="P:Microsoft.VisualStudio.Project.ReplaceBetweenPairToken.TokenStart">
            <summary>
            Token marking the begining of the block to delete
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Project.ReplaceBetweenPairToken.TokenEnd">
            <summary>
            Token marking the end of the block to delete
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Project.ReplaceBetweenPairToken.TokenReplacement">
            <summary>
            Token marking the end of the block to delete
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Project.ReplaceBetweenPairToken.TokenIdentifier">
            <summary>
            Token Identifier
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Project.ReplacePairToken">
            <summary>
             Storage classes for replacement tokens
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Project.ReplacePairToken.token">
            <summary>
            token string
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Project.ReplacePairToken.replacement">
            <summary>
            Replacement string
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.ReplacePairToken.#ctor(System.String,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="token">replaceable token</param>
            <param name="replacement">replacement string</param>
        </member>
        <member name="P:Microsoft.VisualStudio.Project.ReplacePairToken.Token">
            <summary>
            Token that needs to be replaced
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Project.ReplacePairToken.Replacement">
            <summary>
            String to replace the token with
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Project.SingleFileGeneratorFactory">
            <summary>
            Provides implementation IVsSingleFileGeneratorFactory for
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Project.SingleFileGeneratorFactory.baseGeneratorRegistryKey">
            <summary>
            Base generator registry key for MPF based project
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Project.SingleFileGeneratorFactory.GeneratorClsid">
            <summary>
            CLSID reg value name under HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\VisualStudio\[VsVer]\Generators\[ProjFacGuid]\[GeneratorProgId]
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Project.SingleFileGeneratorFactory.GeneratesDesignTimeSource">
            <summary>
            GeneratesDesignTimeSource reg value name under HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\VisualStudio\[VsVer]\Generators\[ProjFacGuid]\[GeneratorProgId]
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Project.SingleFileGeneratorFactory.GeneratesSharedDesignTimeSource">
            <summary>
            GeneratesSharedDesignTimeSource reg value name under HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\VisualStudio\[VsVer]\Generators\[ProjFacGuid]\[GeneratorProgId]
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Project.SingleFileGeneratorFactory.UseDesignTimeCompilationFlag">
            <summary>
            UseDesignTimeCompilationFlag reg value name under HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\VisualStudio\[VsVer]\Generators\[ProjFacGuid]\[GeneratorProgId]
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Project.SingleFileGeneratorFactory.generatorsMap">
            <summary>
            Caches all the generators registered for the project type.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Project.SingleFileGeneratorFactory.projectType">
            <summary>
            The project type guid of the associated project.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Project.SingleFileGeneratorFactory.serviceProvider">
            <summary>
            A service provider
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.SingleFileGeneratorFactory.#ctor(System.Guid,System.IServiceProvider)">
            <summary>
            Constructor for SingleFileGeneratorFactory
            </summary>
            <param name="projectGuid">The project type guid of the associated project.</param>
            <param name="serviceProvider">A service provider.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.SingleFileGeneratorFactory.CreateGeneratorInstance(System.String,System.Int32@,System.Int32@,System.Int32@,Microsoft.VisualStudio.Shell.Interop.IVsSingleFileGenerator@)">
            <summary>
            Creates an instance of the single file generator requested
            </summary>
            <param name="progId">prog id of the generator to be created. For e.g HKLM\SOFTWARE\Microsoft\VisualStudio\9.0Exp\Generators\[prjfacguid]\[wszProgId]</param>
            <param name="generatesDesignTimeSource">GeneratesDesignTimeSource key value</param>
            <param name="generatesSharedDesignTimeSource">GeneratesSharedDesignTimeSource key value</param>
            <param name="useTempPEFlag">UseDesignTimeCompilationFlag key value</param>
            <param name="generate">IVsSingleFileGenerator interface</param>
            <returns>S_OK if succesful</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.SingleFileGeneratorFactory.GetDefaultGenerator(System.String,System.String@)">
            <summary>
            Gets the default generator based on the file extension. HKLM\Software\Microsoft\VS\9.0\Generators\[prjfacguid]\.extension
            </summary>
            <param name="filename">File name with extension</param>
            <param name="progID">The generator prog ID</param>
            <returns>S_OK if successful</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.SingleFileGeneratorFactory.GetGeneratorInformation(System.String,System.Int32@,System.Int32@,System.Int32@,System.Guid@)">
            <summary>
            Gets the generator information.
            </summary>
            <param name="progId">prog id of the generator to be created. For e.g HKLM\SOFTWARE\Microsoft\VisualStudio\9.0Exp\Generators\[prjfacguid]\[wszProgId]</param>
            <param name="generatesDesignTimeSource">GeneratesDesignTimeSource key value</param>
            <param name="generatesSharedDesignTimeSource">GeneratesSharedDesignTimeSource key value</param>
            <param name="useTempPEFlag">UseDesignTimeCompilationFlag key value</param>
            <param name="guiddGenerator">CLSID key value</param>
            <returns>S_OK if succesful</returns>
        </member>
        <member name="P:Microsoft.VisualStudio.Project.SingleFileGeneratorFactory.ProjectGuid">
            <summary>
            Defines the project type guid of the associated project.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Project.SingleFileGeneratorFactory.ServiceProvider">
            <summary>
            Defines an associated service provider.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Project.SingleFileGeneratorFactory.BaseGeneratorsKey">
            <summary>
            Returns the project generator key under [VS-ConfigurationRoot]]\Generators
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Project.SingleFileGeneratorFactory.LocalRegistry">
            <summary>
            Returns the local registry instance
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.SingleFileGeneratorFactory.GeneratorMetaData.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Project.SingleFileGeneratorFactory.GeneratorMetaData.Generator">
            <summary>
            Generator instance
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Project.SingleFileGeneratorFactory.GeneratorMetaData.GeneratesDesignTimeSource">
            <summary>
            GeneratesDesignTimeSource reg value name under HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\VisualStudio\[VsVer]\Generators\[ProjFacGuid]\[GeneratorProgId]
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Project.SingleFileGeneratorFactory.GeneratorMetaData.GeneratesSharedDesignTimeSource">
            <summary>
            GeneratesSharedDesignTimeSource reg value name under HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\VisualStudio\[VsVer]\Generators\[ProjFacGuid]\[GeneratorProgId]
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Project.SingleFileGeneratorFactory.GeneratorMetaData.UseDesignTimeCompilationFlag">
            <summary>
            UseDesignTimeCompilationFlag reg value name under HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\VisualStudio\[VsVer]\Generators\[ProjFacGuid]\[GeneratorProgId]
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Project.SingleFileGeneratorFactory.GeneratorMetaData.GeneratorClsid">
            <summary>
            Generator Class ID.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Project.TokenReplaceType">
            <summary>
            Replacement type
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Project.UIHierarchyElements">
            <summary>
            Used by the hierarchy node to decide which element to redraw.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Project.UIHierarchyElements.Icon">
            <summary>
            This will be translated to VSHPROPID_IconIndex
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Project.UIHierarchyElements.SccState">
            <summary>
            This will be translated to VSHPROPID_StateIconIndex
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Project.UIHierarchyElements.Caption">
            <summary>
            This will be translated to VSHPROPID_Caption
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Project.UIThread.WrappedStacktraceKey">
            <summary>
            RunSync puts orignal exception stacktrace to Exception.Data by this key if action throws on UI thread
            </summary>
            WrappedStacktraceKey is a string to keep exception serializable.
        </member>
        <member name="F:Microsoft.VisualStudio.Project.UIThread.instance">
            <summary>
            The singleton instance.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.UIThread.Dispose">
            <summary>
            Dispose implementation.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.UIThread.InitUnitTestingMode">
            <summary>
            Initializes unit testing mode for this object
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.UIThread.Run(System.Action)">
            <summary>
            Runs an action asynchronously on an associated forms synchronization context.
            </summary>
            <param name="action">The action to run</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.UIThread.RunSync(System.Action)">
            <summary>
            Runs an action synchronously on an associated forms synchronization context
            </summary>
            <param name="action">The action to run.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.UIThread.DoOnUIThread``1(System.Func{``0})">
            <summary>
            Performs a callback on the UI thread, blocking until the action completes.  Uses the VS mechanism 
            of marshalling back to the main STA thread via COM RPC.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.UIThread.DoOnUIThread(System.Action)">
            <summary>
            Performs a callback on the UI thread, blocking until the action completes.  Uses the VS mechanism 
            of marshalling back to the main STA thread via COM RPC.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.UIThread.Initialize">
            <summary>
            Initializes this object.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Project.UIThread.Instance">
            <summary>
            Gets the singleton instance
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Project.UIThread.IsUIThread">
            <summary>
            Checks whether this is the UI thread.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Project.UIThread.IsUnitTest">
            <summary>
            Gets a value indicating whether unit tests are running.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.NativeMethods.IsSamePath(System.String,System.String)">
            <devdoc>
            Please use this "approved" method to compare file names.
            </devdoc>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.NativeMethods.SetParent(System.IntPtr,System.IntPtr)">
            <summary>
            Changes the parent window of the specified child window.
            </summary>
            <param name="hWnd">Handle to the child window.</param>
            <param name="hWndParent">Handle to the new parent window. If this parameter is NULL, the desktop window becomes the new parent window.</param>
            <returns>A handle to the previous parent window indicates success. NULL indicates failure.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.NativeMethods.GetBinaryType(System.String,System.UInt32@)">
            <summary>
            Indicates whether the file type is binary or not
            </summary>
            <param name="lpApplicationName">Full path to the file to check</param>
            <param name="lpBinaryType">If file isbianry the bitness of the app is indicated by lpBinaryType value.</param>
            <returns>True if the file is binary false otherwise</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Project.NestedProjectBuildDependency">
            <summary>
            Used for adding a build dependency to nested project (not a real project reference)
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Project.NestedProjectNode.Mutex">
            <summary>
            Defines an object that will be a mutex for this object for synchronizing thread calls.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Project.NestedProjectNode.isDisposed">
            <summary>
            Sets the dispose flag on the object.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.NestedProjectNode.OnChanged(System.Int32)">
            <summary>
            Notifies a sink that the [bindable] property specified by dispID has changed. 
            If dispID is DISPID_UNKNOWN, then multiple properties have changed together. 
            The client (owner of the sink) should then retrieve the current value of each property of interest from the object that generated the notification.
            In our case we will care about the  VSLangProj80.VsProjPropId.VBPROJPROPID_FileName and update the changes in the parent project file.
            </summary>
            <param name="dispid">Dispatch identifier of the property that is about to change or DISPID_UNKNOWN if multiple properties are about to change.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.NestedProjectNode.OnRequestEdit(System.Int32)">
            <summary>
            Notifies a sink that a [requestedit] property is about to change and that the object is asking the sink how to proceed.
            </summary>
            <param name="dispid">Dispatch identifier of the property that is about to change or DISPID_UNKNOWN if multiple properties are about to change.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.NestedProjectNode.GetAutomationObject">
            <summary>
            Get the automation object for the NestedProjectNode
            </summary>
            <returns>An instance of the Automation.OANestedProjectItem type if succeded</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.NestedProjectNode.GetProperty(System.Int32)">
            <summary>
            Gets properties of a given node or of the hierarchy.
            </summary>
            <param name="propId">Identifier of the hierarchy property</param>
            <returns>It return an object which type is dependent on the propid.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.NestedProjectNode.GetGuidProperty(System.Int32,System.Guid@)">
            <summary>
            Gets properties whose values are GUIDs.
            </summary>
            <param name="propid">Identifier of the hierarchy property</param>
            <param name="guid"> Pointer to a GUID property specified in propid</param>
            <returns>If the method succeeds, it returns S_OK. If it fails, it returns an error code.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.NestedProjectNode.IsItemDirty(System.UInt32,System.IntPtr,System.Int32@)">
            <summary>
            Determines whether the hierarchy item changed.
            </summary>
            <param name="itemId">Item identifier of the hierarchy item contained in VSITEMID</param>
            <param name="punkDocData">Pointer to the IUnknown interface of the hierarchy item. </param>
            <param name="pfDirty">TRUE if the hierarchy item changed.</param>
            <returns>If the method succeeds, it returns S_OK. If it fails, it returns an error code.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.NestedProjectNode.SaveItem(Microsoft.VisualStudio.Shell.Interop.VSSAVEFLAGS,System.String,System.UInt32,System.IntPtr,System.Int32@)">
            <summary>
            Saves the hierarchy item to disk.
            </summary>
            <param name="dwSave">Flags whose values are taken from the VSSAVEFLAGS enumeration.</param>
            <param name="silentSaveAsName">File name to be applied when dwSave is set to VSSAVE_SilentSave. </param>
            <param name="itemid">Item identifier of the hierarchy item saved from VSITEMID. </param>
            <param name="punkDocData">Pointer to the IUnknown interface of the hierarchy item saved.</param>
            <param name="pfCancelled">TRUE if the save action was canceled. </param>
            <returns>If the method succeeds, it returns S_OK. If it fails, it returns an error code.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.NestedProjectNode.GetIconHandle(System.Boolean)">
            <summary>
            Gets the icon handle. It tries first the nested to get the icon handle. If that is not supported it will get it from
            the image list of the nested if that is supported. If neither of these is supported a default image will be shown.
            </summary>
            <returns>An object representing the icon.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.NestedProjectNode.Close">
            <summary>
            Return S_OK. Implementation of Closing a nested project is done in CloseNestedProject which is called by CloseChildren.
            </summary>
            <returns>S_OK</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.NestedProjectNode.GetMKDocument">
            <summary>
            Returns the moniker of the nested project.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.NestedProjectNode.SetEditLabel(System.String)">
            <summary>
            Called by the shell when a node has been renamed from the GUI
            </summary>
            <param name="label">The name of the new label.</param>
            <returns>A success or failure value.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.NestedProjectNode.GetEditLabel">
            <summary>
            Called by the shell to get the node caption when the user tries to rename from the GUI
            </summary>
            <returns>the node cation</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.NestedProjectNode.CanDeleteItem(Microsoft.VisualStudio.Shell.Interop.__VSDELETEITEMOPERATION)">
            <summary>
            This is temporary until we have support for re-adding a nested item
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.NestedProjectNode.ReloadItem(System.UInt32)">
            <summary>
            Delegates the call to the inner hierarchy.
            </summary>
            <param name="reserved">Reserved parameter defined at the IVsPersistHierarchyItem2::ReloadItem parameter.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.NestedProjectNode.IgnoreItemFileChanges(System.Boolean)">
            <summary>
            Flag indicating that changes to a file can be ignored when item is saved or reloaded. 
            </summary>
            <param name="ignoreFlag">Flag indicating whether or not to ignore changes (1 to ignore, 0 to stop ignoring).</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.NestedProjectNode.GetAddFileFlags(System.String[])">
            <summary>
            Sets the VSADDFILEFLAGS that will be used to call the  IVsTrackProjectDocumentsEvents2 OnAddFiles
            </summary>
            <param name="files">The files to which an array of VSADDFILEFLAGS has to be specified.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.NestedProjectNode.GetQueryAddFileFlags(System.String[])">
            <summary>
            Sets the VSQUERYADDFILEFLAGS that will be used to call the  IVsTrackProjectDocumentsEvents2 OnQueryAddFiles
            </summary>
            <param name="files">The files to which an array of VSADDFILEFLAGS has to be specified.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.NestedProjectNode.GetRemoveFileFlags(System.String[])">
            <summary>
            Sets the VSREMOVEFILEFLAGS that will be used to call the  IVsTrackProjectDocumentsEvents2 OnRemoveFiles
            </summary>
            <param name="files">The files to which an array of VSREMOVEFILEFLAGS has to be specified.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.NestedProjectNode.GetQueryRemoveFileFlags(System.String[])">
            <summary>
            Sets the VSQUERYREMOVEFILEFLAGS that will be used to call the  IVsTrackProjectDocumentsEvents2 OnQueryRemoveFiles
            </summary>
            <param name="files">The files to which an array of VSQUERYREMOVEFILEFLAGS has to be specified.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.NestedProjectNode.Init(System.String,System.String,System.String,Microsoft.VisualStudio.Shell.Interop.__VSCREATEPROJFLAGS)">
            <summary>
            Initialize the nested hierarhy node.
            </summary>
            <param name="fileName">The file name of the nested project.</param>
            <param name="destination">The location of the nested project.</param>
            <param name="projectName">The name of the project.</param>
            <param name="createFlags">The nested project creation flags </param>
            <remarks>This methos should be called just after a NestedProjectNode object is created.</remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.NestedProjectNode.AddVirtualProject">
            <summary>
            Links a nested project as a virtual project to the solution.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.NestedProjectNode.Dispose(System.Boolean)">
            <summary>
            The method that does the cleanup.
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.NestedProjectNode.CreateProjectDirectory">
            <summary>
            Creates the project directory if it does not exist.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.NestedProjectNode.LockRdtEntry">
            <summary>
            Lock the RDT Entry for the nested project.
            By default this document is marked as "Dont Save as". That means the menu File->SaveAs is disabled for the
            nested project node.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.NestedProjectNode.UnlockRdtEntry">
            <summary>
            Unlock the RDT entry for the nested project
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.NestedProjectNode.RenameNestedProjectInParentProject(System.String)">
            <summary>
            Renames the project file in the parent project structure.
            </summary>
            <param name="label">The new label.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.NestedProjectNode.SaveNestedProjectItemInProjectFile(System.String)">
            <summary>
            Saves the nested project information in the project file.
            </summary>
            <param name="newFileName"></param>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.NestedProjectNode.CloseNestedProjectNode">
            <summary>
            Closes a nested project and releases the nested hierrachy pointer.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.NestedProjectNode.DelegateGetPropertyToNested(System.Int32)">
            <summary>
            Delegates Getproperty calls to the inner nested.
            </summary>
            <param name="propID">The property to delegate.</param>
            <returns>The return of the GetProperty from nested.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.NestedProjectNode.DelegateSetPropertyToNested(System.Int32,System.Object)">
            <summary>
            Delegates Setproperty calls to the inner nested.
            </summary>
            <param name="propID">The property to delegate.</param>
            <param name="value">The property to set.</param>
            <returns>The return of the SetProperty from nested.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.NestedProjectNode.ObserveNestedProjectFile">
            <summary>
            Starts observing changes on this file.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.NestedProjectNode.StopObservingNestedProjectFile">
            <summary>
            Stops observing changes on this file.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.NestedProjectNode.IgnoreNestedProjectFile(System.Boolean)">
            <summary>
            Ignores observing changes on this file depending on the boolean flag.
            </summary>
            <param name="ignoreFlag">Flag indicating whether or not to ignore changes (1 to ignore, 0 to stop ignoring).</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.NestedProjectNode.ConnectPropertyNotifySink">
            <summary>
            We need to advise property notify sink on project properties so that
            we know when the project file is renamed through a property. 
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.NestedProjectNode.DisconnectPropertyNotifySink">
            <summary>
            Disconnects the propertynotify sink
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.NestedProjectNode.GetConnectionPointFromPropertySink">
            <summary>
            Gets a ConnectionPoint for the IPropertyNotifySink interface.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Microsoft.VisualStudio.Project.NestedProjectNode.VirtualProjectFlags">
            <summary>
            Returns the __VSADDVPFLAGS that will be passed in when calling AddVirtualProjectEx
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Project.NestedProjectNode.Url">
            <summary>
            The path of the nested project.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Project.NestedProjectNode.Caption">
            <summary>
            The Caption of the nested project.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Project.NestedProjectNode.CanExecuteCommand">
            <summary>
            Defines whether a node can execute a command if in selection.
            We do this in order to let the nested project to handle the execution of its own commands.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.Output.#ctor(Microsoft.VisualStudio.Project.ProjectNode,Microsoft.Build.Execution.ProjectItemInstance)">
            <summary>
            Constructor for IVSOutput2 implementation
            </summary>
            <param name="projectManager">Project that produce this output</param>
            <param name="outputAssembly">MSBuild generated item corresponding to the output assembly (by default, these would be of type MainAssembly</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.Output.get_DeploySourceURL(System.String@)">
            <summary>
            This path must start with file:/// if it wants other project
            to be able to reference the output on disk.
            If the output is not on disk, then this requirement does not
            apply as other projects probably don't know how to access it.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Project.OutputGroup">
            <summary>
            Allows projects to group outputs according to usage.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.OutputGroup.#ctor(System.String,System.String,Microsoft.VisualStudio.Project.ProjectNode,Microsoft.VisualStudio.Project.ProjectConfig)">
            <summary>
            Constructor for IVSOutputGroup2 implementation
            </summary>
            <param name="outputName">Name of the output group. See VS_OUTPUTGROUP_CNAME_Build in vsshell.idl for the list of standard values</param>
            <param name="msBuildTargetName">MSBuild target name</param>
            <param name="projectManager">Project that produce this output</param>
            <param name="configuration">Configuration that produce this output</param>
        </member>
        <member name="P:Microsoft.VisualStudio.Project.OutputGroup.ProjectCfg">
            <summary>
            Get the project configuration object associated with this output group
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Project.OutputGroup.Project">
            <summary>
            Get the project object that produces this output group.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Project.OutputGroup.TargetName">
            <summary>
            Gets the msbuild target name which is assciated to the outputgroup.
            ProjectNode defines a static collection of output group names and their associated MsBuild target
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.ProjectConfig.IsFlavorDirty(Microsoft.VisualStudio.Shell.Interop._PersistStorageType)">
            <summary>
            If flavored, and if the flavor config can be dirty, ask it if it is dirty
            </summary>
            <param name="storageType">Project file or user file</param>
            <returns>0 = not dirty</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.ProjectConfig.GetXmlFragment(System.Guid,Microsoft.VisualStudio.Shell.Interop._PersistStorageType,System.String@)">
            <summary>
            If flavored, ask the flavor if it wants to provide an XML fragment
            </summary>
            <param name="flavor">Guid of the flavor</param>
            <param name="storageType">Project file or user file</param>
            <param name="fragment">Fragment that the flavor wants to save</param>
            <returns>HRESULT</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.ProjectConfig.GetProjectDesignerPages(Microsoft.VisualStudio.OLE.Interop.CAUUID[])">
            <summary>
            Implementation of the IVsSpecifyProjectDesignerPages. It will retun the pages that are configuration dependent.
            </summary>
            <param name="pages">The pages to return.</param>
            <returns>VSConstants.S_OK</returns>		
        </member>
        <member name="M:Microsoft.VisualStudio.Project.ProjectConfig.get_DisplayName(System.String@)">
            <summary>
            The display name is a two part item
            first part is the config name, 2nd part is the platform name
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.ProjectConfig.DebugLaunch(System.UInt32)">
            <summary>
            Called by the vs shell to start debugging (managed or unmanaged).
            Override this method to support other debug engines.
            </summary>
            <param name="grfLaunch">A flag that determines the conditions under which to start the debugger. For valid grfLaunch values, see __VSDBGLAUNCHFLAGS</param>
            <returns>If the method succeeds, it returns S_OK. If it fails, it returns an error code</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.ProjectConfig.QueryDebugLaunch(System.UInt32,System.Int32@)">
            <summary>
            Determines whether the debugger can be launched, given the state of the launch flags.
            </summary>
            <param name="flags">Flags that determine the conditions under which to launch the debugger. 
            For valid grfLaunch values, see __VSDBGLAUNCHFLAGS or __VSDBGLAUNCHFLAGS2.</param>
            <param name="fCanLaunch">true if the debugger can be launched, otherwise false</param>
            <returns>S_OK if the method succeeds, otherwise an error code</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.ProjectConfig.GetCfg(Microsoft.VisualStudio.Shell.Interop.IVsCfg@)">
            <summary>
            Maps back to the configuration corresponding to the browse object. 
            </summary>
            <param name="cfg">The IVsCfg object represented by the browse object</param>
            <returns>If the method succeeds, it returns S_OK. If it fails, it returns an error code. </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.ProjectConfig.GetProjectItem(Microsoft.VisualStudio.Shell.Interop.IVsHierarchy@,System.UInt32@)">
            <summary>
            Maps back to the hierarchy or project item object corresponding to the browse object.
            </summary>
            <param name="hier">Reference to the hierarchy object.</param>
            <param name="itemid">Reference to the project item.</param>
            <returns>If the method succeeds, it returns S_OK. If it fails, it returns an error code. </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.ProjectConfig.TrySplitConfigurationCanonicalName(System.String,System.String@,System.String@)">
            <summary>
            Splits the canonical configuration name into platform and configuration name.
            </summary>
            <param name="canonicalName">The canonicalName name.</param>
            <param name="configName">The name of the configuration.</param>
            <param name="platformName">The name of the platform.</param>
            <returns>true if successfull.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.ProjectConfig.GetCfgPropertyPages(Microsoft.VisualStudio.OLE.Interop.CAUUID[])">
            <summary>
            Retrieves the configuration dependent property pages.
            </summary>
            <param name="pages">The pages to return.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.ProjectConfig.Microsoft#VisualStudio#Shell#Interop#IVsProjectFlavorCfg#Close">
            <summary>
            This is called to let the flavored config let go
            of any reference it may still be holding to the base config
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.ProjectConfig.Microsoft#VisualStudio#Shell#Interop#IVsProjectFlavorCfg#get_CfgType(System.Guid@,System.IntPtr@)">
            <summary>
            Actual implementation of get_CfgType.
            When not flavored or when the flavor delegate to use
            we end up creating the requested config if we support it.
            </summary>
            <param name="iidCfg">IID representing the type of config object we should create</param>
            <param name="ppCfg">Config object that the method created</param>
            <returns>HRESULT</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Project.ProjectNode">
            <summary>
            Manages the CopyPaste and Drag and Drop scenarios for a Project.
            </summary>
            <remarks>This is a partial class.</remarks>
            <summary>
            Manages the persistent state of the project (References, options, files, etc.) and deals with user interaction via a GUI in the form a hierarchy.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Project.ProjectNode._perUserFileExtension">
            <summary>
            The user file extension.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.ProjectNode.DragEnter(Microsoft.VisualStudio.OLE.Interop.IDataObject,System.UInt32,System.UInt32,Microsoft.VisualStudio.Project.DropEffects@)">
            <summary>
            Called as soon as the mouse drags an item over a new hierarchy or hierarchy window
            </summary>
            <param name="dataObject">reference to interface IDataObject of the item being dragged</param>
            <param name="keyState">Current state of the keyboard and the mouse modifier keys. See docs for a list of possible values</param>
            <param name="itemId">Item identifier for the item currently being dragged</param>
            <param name="effect">On entry, a pointer to the current DropEffect. On return, must contain the new valid DropEffect</param>
            <returns>If the method succeeds, it returns S_OK. If it fails, it returns an error code.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.ProjectNode.DragLeave">
            <summary>
            Called when one or more items are dragged out of the hierarchy or hierarchy window, or when the drag-and-drop operation is cancelled or completed.
            </summary>
            <returns>If the method succeeds, it returns S_OK. If it fails, it returns an error code.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.ProjectNode.DragOver(System.UInt32,System.UInt32,Microsoft.VisualStudio.Project.DropEffects@)">
            <summary>
            Called when one or more items are dragged over the target hierarchy or hierarchy window. 
            </summary>
            <param name="keyState">Current state of the keyboard keys and the mouse modifier buttons. See <seealso cref="T:Microsoft.VisualStudio.Shell.Interop.IVsHierarchyDropDataTarget"/></param>
            <param name="itemId">Item identifier of the drop data target over which the item is being dragged</param>
            <param name="effect"> On entry, reference to the value of the pdwEffect parameter of the IVsHierarchy object, identifying all effects that the hierarchy supports. 
            On return, the pdwEffect parameter must contain one of the effect flags that indicate the result of the drop operation. For a list of pwdEffects values, see <seealso cref="M:Microsoft.VisualStudio.Project.ProjectNode.DragEnter(Microsoft.VisualStudio.OLE.Interop.IDataObject,System.UInt32,System.UInt32,Microsoft.VisualStudio.Project.DropEffects@)"/></param>
            <returns>If the method succeeds, it returns S_OK. If it fails, it returns an error code.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.ProjectNode.Drop(Microsoft.VisualStudio.OLE.Interop.IDataObject,System.UInt32,System.UInt32,Microsoft.VisualStudio.Project.DropEffects@)">
            <summary>
            Called when one or more items are dropped into the target hierarchy or hierarchy window when the mouse button is released.
            </summary>
            <param name="dataObject">Reference to the IDataObject interface on the item being dragged. This data object contains the data being transferred in the drag-and-drop operation. 
            If the drop occurs, then this data object (item) is incorporated into the target hierarchy or hierarchy window.</param>
            <param name="keyState">Current state of the keyboard and the mouse modifier keys. See <seealso cref="T:Microsoft.VisualStudio.Shell.Interop.IVsHierarchyDropDataTarget"/></param>
            <param name="itemId">Item identifier of the drop data target over which the item is being dragged</param>
            <param name="effect">Visual effects associated with the drag-and drop-operation, such as a cursor, bitmap, and so on. 
            The value of dwEffects passed to the source object via the OnDropNotify method is the value of pdwEffects returned by the Drop method</param>
            <returns>If the method succeeds, it returns S_OK. If it fails, it returns an error code. </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.ProjectNode.GetDropInfo(Microsoft.VisualStudio.Project.DropEffects@,Microsoft.VisualStudio.OLE.Interop.IDataObject@,Microsoft.VisualStudio.Shell.Interop.IDropSource@)">
            <summary>
            Returns information about one or more of the items being dragged
            </summary>
            <param name="effects">Pointer to a DWORD value describing the effects displayed while the item is being dragged, 
            such as cursor icons that change during the drag-and-drop operation. 
            For example, if the item is dragged over an invalid target point 
            (such as the item's original location), the cursor icon changes to a circle with a line through it. 
            Similarly, if the item is dragged over a valid target point, the cursor icon changes to a file or folder.</param>
            <param name="dataObject">Pointer to the IDataObject interface on the item being dragged. 
            This data object contains the data being transferred in the drag-and-drop operation. 
            If the drop occurs, then this data object (item) is incorporated into the target hierarchy or hierarchy window.</param>
            <param name="dropSource">Pointer to the IDropSource interface of the item being dragged.</param>
            <returns>If the method succeeds, it returns S_OK. If it fails, it returns an error code.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.ProjectNode.OnDropNotify(System.Boolean,Microsoft.VisualStudio.Project.DropEffects)">
            <summary>
            Notifies clients that the dragged item was dropped. 
            </summary>
            <param name="fDropped">If true, then the dragged item was dropped on the target. If false, then the drop did not occur.</param>
            <param name="effect">Visual effects associated with the drag-and-drop operation, such as cursors, bitmaps, and so on. 
            The value of dwEffects passed to the source object via OnDropNotify method is the value of pdwEffects returned by Drop method.</param>
            <returns>If the method succeeds, it returns S_OK. If it fails, it returns an error code. </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.ProjectNode.OnBeforeDropNotify(Microsoft.VisualStudio.OLE.Interop.IDataObject,Microsoft.VisualStudio.Project.DropEffects,System.Boolean@)">
            <summary>
            Allows the drag source to prompt to save unsaved items being dropped. 
            Notifies the source hierarchy that information dragged from it is about to be dropped on a target. 
            This method is called immediately after the mouse button is released on a drop. 
            </summary>
            <param name="dataObject">Reference to the IDataObject interface on the item being dragged. 
            This data object contains the data being transferred in the drag-and-drop operation. 
            If the drop occurs, then this data object (item) is incorporated into the hierarchy window of the new hierarchy.</param>
            <param name="effect">Current state of the keyboard and the mouse modifier keys.</param>
            <param name="cancelDrop">If true, then the drop is cancelled by the source hierarchy. If false, then the drop can continue.</param>
            <returns>If the method succeeds, it returns S_OK. If it fails, it returns an error code. </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.ProjectNode.OnPaste(System.Boolean,Microsoft.VisualStudio.Project.DropEffects)">
             <summary>
             Called after your cut/copied items has been pasted
             </summary>
            <param name="wasCut">If true, then the IDataObject has been successfully pasted into a target hierarchy. 
             If false, then the cut or copy operation was cancelled.</param>
             <param name="dropEffect">Visual effects associated with the drag and drop operation, such as cursors, bitmaps, and so on. 
             These should be the same visual effects used in OnDropNotify</param>
             <returns>If the method succeeds, it returns S_OK. If it fails, it returns an error code. </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.ProjectNode.OnClear(System.Boolean)">
            <summary>
            Called when your cut/copied operation is canceled
            </summary>
            <param name="wasCut">This flag informs the source that the Cut method was called (true), 
            rather than Copy (false), so the source knows whether to "un-cut-highlight" the items that were cut.</param>
            <returns>If the method succeeds, it returns S_OK. If it fails, it returns an error code. </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.ProjectNode.CanTargetNodeAcceptDrop(System.UInt32)">
            <summary>
            Determines if a node can accept drop opertaion.
            </summary>
            <param name="itemid">The id of the node.</param>
            <returns>true if the node acceots drag operation.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.ProjectNode.PackageSelectionDataObject(System.Boolean)">
            <summary>
            Returns a dataobject from selected nodes
            </summary>
            <param name="cutHighlightItems">boolean that defines if the selected items must be cut</param>
            <returns>data object for selected items</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.ProjectNode.AddFolderFromOtherProject(System.String,Microsoft.VisualStudio.Project.HierarchyNode)">
            <summary>
            This is used to recursively add a folder from an other project.
            Note that while we copy the folder content completely, we only
            add to the project items which are part of the source project.
            </summary>
            <param name="folderToAdd">Project reference (from data object) using the format: {Guid}|project|folderPath</param>
            <param name="targetNode">Node to add the new folder to</param>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Microsoft.VisualStudio.Project.ProjectNode.WalkSourceProjectAndAdd(Microsoft.VisualStudio.Shell.Interop.IVsHierarchy,System.UInt32,Microsoft.VisualStudio.Project.HierarchyNode,System.Boolean)" -->
        <member name="M:Microsoft.VisualStudio.Project.ProjectNode.AddNodeIfTargetExistInStorage(Microsoft.VisualStudio.Project.HierarchyNode,System.String,System.String)">
            <summary>
            Add an existing item (file/folder) to the project if it already exist in our storage.
            </summary>
            <param name="parentNode">Node to that this item to</param>
            <param name="name">Name of the item being added</param>
            <param name="targetPath">Path of the item being added</param>
            <returns>Node that was added</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.ProjectNode.CutToClipboard">
            <summary>
            Handle the Cut operation to the clipboard
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.ProjectNode.CopyToClipboard">
            <summary>
            Handle the Copy operation to the clipboard
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.ProjectNode.PasteFromClipboard(Microsoft.VisualStudio.Project.HierarchyNode)">
            <summary>
            Handle the Paste operation to a targetNode
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.ProjectNode.AllowPasteCommand">
            <summary>
            Determines if the paste command should be allowed.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.ProjectNode.RegisterClipboardNotifications(System.Boolean)">
            <summary>
            Register/Unregister for Clipboard events for the UiHierarchyWindow (solution explorer)
            </summary>
            <param name="register">true for register, false for unregister</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.ProjectNode.ProcessSelectionDataObject(Microsoft.VisualStudio.OLE.Interop.IDataObject,Microsoft.VisualStudio.Project.HierarchyNode)">
            <summary>
            Process dataobject from Drag/Drop/Cut/Copy/Paste operation
            </summary>
            <remarks>The targetNode is set if the method is called from a drop operation, otherwise it is null</remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.ProjectNode.QueryDropDataType(Microsoft.VisualStudio.OLE.Interop.IDataObject)">
            <summary>
            Get the dropdatatype from the dataobject
            </summary>
            <param name="pDataObject">The dataobject to be analysed for its format</param>
            <returns>dropdatatype or none if dataobject does not contain known format</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.ProjectNode.QueryDropEffect(Microsoft.VisualStudio.Project.DropDataType,System.UInt32)">
            <summary>
            Returns the drop effect.
            </summary>
            <remarks>
            // A directory based project should perform as follow:
            	NO MODIFIER 
            		- COPY if not from current hierarchy, 
            		- MOVE if from current hierarchy
            	SHIFT DRAG - MOVE
            	CTRL DRAG - COPY
            	CTRL-SHIFT DRAG - NO DROP (used for reference based projects only)
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.ProjectNode.CleanupSelectionDataObject(System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
             After a drop or paste, will use the dwEffects 
             to determine whether we need to clean up the source nodes or not. If
             justCleanup is set, it only does the cleanup work.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.ProjectNode.AddFilesFromProjectReferences(Microsoft.VisualStudio.Project.HierarchyNode,System.String[])">
            <summary>
            Moves files from one part of our project to another.
            </summary>
            <param name="targetNode">the targetHandler node</param>
            <param name="projectReferences">List of projectref string</param>
            <returns>true if succeeded</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.ProjectNode.CleanAndFlushClipboard">
            <summary>
            Empties all the data structures added to the clipboard and flushes the clipboard.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Project.ProjectNode.outputGroupNames">
            <summary>
            List of output groups names and their associated target
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Project.ProjectNode.BuildLock">
            <summary>A project will only try to build if it can obtain a lock on this object</summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Project.ProjectNode.itemIdMap">
            <summary>Maps integer ids to project item instances</summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Project.ProjectNode._site">
            <summary>A service provider call back object provided by the IDE hosting the project manager</summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Project.ProjectNode._options">
            <summary>
            A cached copy of project options.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Project.ProjectNode.lastModifiedTime">
            <summary>
            This property returns the time of the last change made to this project.
            It is not the time of the last change on the project file, but actually of
            the in memory project settings.  In other words, it is the last time that 
            SetProjectDirty was called.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Project.ProjectNode.buildEngine">
            <summary>
            MSBuild engine we are going to use 
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Project.ProjectNode.buildDependencyList">
            <summary>
            The build dependency list passed to IVsDependencyProvider::EnumDependencies 
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Project.ProjectNode.supportsProjectDesigner">
            <summary>
            Defines if Project System supports Project Designer
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Project.ProjectNode.disableScc">
            <summary>
            Field for determining whether sourcecontrol should be disabled.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Project.ProjectNode.isRegisteredWithScc">
            <summary>
            Flag for controling how many times we register with the Scc manager.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Project.ProjectNode.disableQueryEdit">
            <summary>
            Flag for controling query edit should communicate with the scc manager.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Project.ProjectNode.canProjectDeleteItems">
            <summary>
            Control if command with potential destructive behavior such as delete should
            be enabled for nodes of this project.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Project.ProjectNode.tokenProcessor">
            <summary>
            Token processor used by the project sample.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Project.ProjectNode.outputBaseRelativePath">
            <summary>
            Member to store output base relative path. Used by OutputBaseRelativePath property
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Project.ProjectNode.xmlFragments">
            <summary>
            Used for flavoring to hold the XML fragments
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Project.ProjectNode.catidMapping">
            <summary>
            Used to map types to CATID. This provide a generic way for us to do this
            and make it simpler for a project to provide it's CATIDs for the different type of objects
            for which it wants to support extensibility. This also enables us to have multiple
            type mapping to the same CATID if we choose to.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Project.ProjectNode.package">
            <summary>
            The internal package implementation.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.ProjectNode.EnsureTrailingDirectoryChar(System.String)">
            <summary>
            Adds the <see cref="F:System.IO.Path.DirectorySeparatorChar"/> character to the end of the path if it doesn't already exist at the end.
            </summary>
            <param name="path">The string to add the trailing directory separator character to.</param>
            <returns>The original string with the specified character at the end.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.ProjectNode.EnsureTrailingChar(System.String,System.Char)">
            <summary>
            Adds the specified character to the end of the string if it doesn't already exist at the end.
            </summary>
            <param name="value">The string to add the trailing character to.</param>
            <param name="charToEnsure">The character that will be at the end of the string upon return.</param>
            <returns>The original string with the specified character at the end.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.ProjectNode.AddNonmemberItems">
            <summary>
            Adds non member items to the hierarchy.
            </summary>
            <param name="project">The project to modify.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.ProjectNode.RemoveNonmemberItems">
            <summary>
            Removes non member item nodes from hierarchy.
            </summary>
            <param name="project">The project to modify.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.ProjectNode.IsNodeNonmemberItem(Microsoft.VisualStudio.Project.HierarchyNode)">
            <summary>
            This is the filter for non member items.
            </summary>
            <param name="node">Node to be filtered.</param>
            <returns>Returns if the node is a non member item node or not.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.ProjectNode.GetRelativeFileSystemEntries(System.String,System.String,System.Collections.Generic.IList{System.String},System.Collections.Generic.IList{System.String})">
            <summary>
            Gets the file system entries of a folder and its all sub-folders with relative path.
            </summary>
            <param name="baseFolder">Base folder.</param>
            <param name="filter">Filter to be used. default is "*"</param>
            <param name="fileList">Files list containing the relative file paths.</param>
            <param name="folderList">Folders list containing the relative folder paths.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.ProjectNode.ExcludeProjectBuildItems(System.Collections.Generic.IList{System.String},System.Collections.Generic.IList{System.String})">
            <summary>
            Excludes the file and folder items from their corresponding maps if they are part of the build.
            </summary>
            <param name="fileList">List containing relative files paths.</param>
            <param name="folderList">List containing relative folder paths.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.ProjectNode.AddNonmemberFolderItems(System.Collections.Generic.IList{System.String})">
            <summary>
            Adds non member folder items to the hierarcy.
            </summary>
            <param name="project">The project to modify.</param>
            <param name="folderList">Folders list containing the folder names.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.ProjectNode.AddNonmemberFileItems(System.Collections.Generic.IList{System.String})">
            <summary>
            Adds non member file items to the hierarcy.
            </summary>
            <param name="project">The project to modify.</param>
            <param name="fileList">Files containing the information about the non member file items.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.ProjectNode.EnsureParentFolderIncluded(Microsoft.VisualStudio.Project.HierarchyNode)">
            <summary>
            Walks up in the hierarchy and ensures that all parent folder nodes of 'node' are included in the project.
            </summary>
            <param name="node">Start hierarchy node.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.ProjectNode.FindNodes(System.Collections.Generic.IList{Microsoft.VisualStudio.Project.HierarchyNode},Microsoft.VisualStudio.Project.HierarchyNode,System.Func{Microsoft.VisualStudio.Project.HierarchyNode,System.Boolean})">
            <summary>
            Finds child nodes uner the parent node and places them in the currentList.
            </summary>
            <param name="currentList">List to be populated with the nodes.</param>
            <param name="parent">Parent node under which the nodes should be searched.</param>
            <param name="filter">Filter to be used while selecting the node.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.ProjectNode.GetRelativePath(System.String,System.String)">
            <summary>
            Makes subPath relative with respect to basePath.
            </summary>
            <param name="basePath">Base folder path.</param>
            <param name="subpath">Path of the sub folder or file.</param>
            <returns>The relative path for the subPath if it shares the same root with basePath or subPath otherwise.</returns>
            <remarks>
            We introduced GetRelativePath method because the Microsoft.VisualStudio.Shell.PackageUtilities.MakeRelative() doesn't
            work as expected in some cases (as of 11/12/2007). For example:
            Test # 1
            Base Path:      C:\a\b\r\d\..\..\e\f
            Sub Path:       c:\a\b\e\f\g\h\..\i\j.txt
            Expected:       g\i\j.txt
            Actual:         c:\a\b\e\f\g\h\..\i\j.txt
            -------------
            Test # 2
            Base Path:      \\mghaznawks\a\e\f
            Sub Path:       \\mghaznawks\e\f\g\h\i\j.txt
            Expected:       \\mghaznawks\e\f\g\h\i\j.txt
            Actual:         ..\..\..\e\f\g\h\i\j.txt
            Note that the base root path is \\mghaznawks\a\   Ref: System.IO.Path.GetPathRoot(string)
            -------------
            Test # 3
            Base Path:      \\mghaznawks\C$\a\..\e\f
            Sub Path:       \\mghaznawks\D$\e\f\g\h\i\j.txt
            Expected:       \\mghaznawks\D$\e\f\g\h\i\j.txt
            Actual:         ..\..\..\..\..\D$\e\f\g\h\i\j.txt
            -------------
            Test # 4
            Base Path:      \\mghaznawks\C$\a\..\e\f
            Sub Path:       \\mghaznawks\c$\e\f\g\h\i\j.txt
            Expected:       g\h\i\j.txt
            Actual:         ..\..\..\..\..\c$\e\f\g\h\i\j.txt
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.ProjectNode.IsFileItem(Microsoft.Build.Evaluation.ProjectItem)">
            <summary>
            Returns if the buildItem is a file item or not.
            </summary>
            <param name="buildItem">BuildItem to be checked.</param>
            <returns>Returns true if the buildItem is a file item, false otherwise.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.ProjectNode.VerifyStringArgument(System.String,System.String)">
            <summary>
            Verifies that the specified string argument is non-null and non-empty, asserting if it
            is not and throwing a new <see cref="T:System.ArgumentException"/>.
            </summary>
            <param name="argument">The argument to check.</param>
            <param name="argumentName">The name of the argument.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.ProjectNode.SetProperty(System.Int32,System.Object)">
            <summary>
            Sets the properties for the project node.
            </summary>
            <param name="propid">Identifier of the hierarchy property. For a list of propid values, <see cref="T:Microsoft.VisualStudio.Shell.Interop.__VSHPROPID"/> </param>
            <param name="value">The value to set. </param>
            <returns>A success or failure value.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.ProjectNode.SetEditLabel(System.String)">
            <summary>
            Renames the project node.
            </summary>
            <param name="label">The new name</param>
            <returns>A success or failure value.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.ProjectNode.GetAutomationObject">
            <summary>
            Gets the automation object for the project node.
            </summary>
            <returns>An instance of an EnvDTE.Project implementation object representing the automation object for the project.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.ProjectNode.Close">
            <summary>
            Closes the project node.
            </summary>
            <returns>A success or failure value.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.ProjectNode.SetSite(Microsoft.VisualStudio.OLE.Interop.IServiceProvider)">
            <summary>
            Sets the service provider from which to access the services. 
            </summary>
            <param name="site">An instance to an Microsoft.VisualStudio.OLE.Interop object</param>
            <returns>A success or failure value.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.ProjectNode.GetProperty(System.Int32)">
            <summary>
            Gets the properties of the project node. 
            </summary>
            <param name="propId">The __VSHPROPID of the property.</param>
            <returns>A property dependent value. See: <see cref="T:Microsoft.VisualStudio.Shell.Interop.__VSHPROPID"/> for details.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.ProjectNode.GetGuidProperty(System.Int32,System.Guid@)">
            <summary>
            Gets the GUID value of the node. 
            </summary>
            <param name="propid">A __VSHPROPID or __VSHPROPID2 value of the guid property</param>
            <param name="guid">The guid to return for the property.</param>
            <returns>A success or failure value.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.ProjectNode.SetGuidProperty(System.Int32,System.Guid@)">
            <summary>
            Sets Guid properties for the project node.
            </summary>
            <param name="propid">A __VSHPROPID or __VSHPROPID2 value of the guid property</param>
            <param name="guid">The guid value to set.</param>
            <returns>A success or failure value.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.ProjectNode.Remove(System.Boolean)">
            <summary>
            Removes items from the hierarchy. 
            </summary>
            <devdoc>Project overwrites this.</devdoc>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.ProjectNode.GetMKDocument">
            <summary>
            Gets the moniker for the project node. That is the full path of the project file.
            </summary>
            <returns>The moniker for the project file.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.ProjectNode.Dispose(System.Boolean)">
            <summary>
            Disposes the project node object.
            </summary>
            <param name="disposing">Flag determining ehether it was deterministic or non deterministic clean up.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.ProjectNode.QueryStatusOnNode(System.Guid,System.UInt32,System.IntPtr,EnvDTE.vsCommandStatus@)">
            <summary>
            Handles command status on the project node. If a command cannot be handled then the base should be called.
            </summary>
            <param name="cmdGroup">A unique identifier of the command group. The pguidCmdGroup parameter can be NULL to specify the standard group.</param>
            <param name="cmd">The command to query status for.</param>
            <param name="pCmdText">Pointer to an OLECMDTEXT structure in which to return the name and/or status information of a single command. Can be NULL to indicate that the caller does not require this information.</param>
            <param name="result">An out parameter specifying the QueryStatusResult of the command.</param>
            <returns>If the method succeeds, it returns S_OK. If it fails, it returns an error code.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.ProjectNode.ExecCommandOnNode(System.Guid,System.UInt32,Microsoft.VisualStudio.OLE.Interop.OLECMDEXECOPT,System.IntPtr,System.IntPtr)">
            <summary>
            Handles command execution.
            </summary>
            <param name="cmdGroup">Unique identifier of the command group</param>
            <param name="cmd">The command to be executed.</param>
            <param name="nCmdexecopt">Values describe how the object should execute the command.</param>
            <param name="pvaIn">Pointer to a VARIANTARG structure containing input arguments. Can be NULL</param>
            <param name="pvaOut">VARIANTARG structure to receive command output. Can be NULL.</param>
            <returns>If the method succeeds, it returns S_OK. If it fails, it returns an error code.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.ProjectNode.CanDeleteItem(Microsoft.VisualStudio.Shell.Interop.__VSDELETEITEMOPERATION)">
            <summary>
            Get the boolean value for the deletion of a project item
            </summary>
            <param name="deleteOperation">A flag that specifies the type of delete operation (delete from storage or remove from project)</param>
            <returns>true if item can be deleted from project</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.ProjectNode.GetDocumentManager">
            <summary>
            Returns a specific Document manager to handle opening and closing of the Project(Application) Designer if projectdesigner is supported.
            </summary>
            <returns>Document manager object</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.ProjectNode.RunWizard(Microsoft.VisualStudio.Project.HierarchyNode,System.String,System.String,System.IntPtr)">
            <summary>
            Executes a wizard.
            </summary>
            <param name="parentNode">The node to which the wizard should add item(s).</param>
            <param name="itemName">The name of the file that the user typed in.</param>
            <param name="wizardToRun">The name of the wizard to run.</param>
            <param name="dlgOwner">The owner of the dialog box.</param>
            <returns>A VSADDRESULT enum value describing success or failure.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.ProjectNode.AddProjectReference">
            <summary>
            Override this method if you want to modify the behavior of the Add Reference dialog
            By example you could change which pages are visible and which is visible by default.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.ProjectNode.GetCompiler">
            <summary>
            Returns the Compiler associated to the project 
            </summary>
            <returns>Null</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.ProjectNode.CreateProjectOptions">
            <summary>
            Override this method if you have your own project specific
            subclass of ProjectOptions
            </summary>
            <returns>This method returns a new instance of the ProjectOptions base class.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.ProjectNode.Load(System.String,System.String,System.String,System.UInt32,System.Guid@,System.Int32@)">
            <summary>
            Loads a project file. Called from the factory CreateProject to load the project.
            </summary>
            <param name="fileName">File name of the project that will be created. </param>
            <param name="location">Location where the project will be created.</param>
            <param name="name">If applicable, the name of the template to use when cloning a new project.</param>
            <param name="flags">Set of flag values taken from the VSCREATEPROJFLAGS enumeration.</param>
            <param name="iidProject">Identifier of the interface that the caller wants returned. </param>
            <param name="canceled">An out parameter specifying if the project creation was canceled</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.ProjectNode.AddFileFromTemplate(System.String,System.String)">
            <summary>
            Called to add a file to the project from a template.
            Override to do it yourself if you want to customize the file
            </summary>
            <param name="source">Full path of template file</param>
            <param name="target">Full path of file once added to the project</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.ProjectNode.OnOpenItem(System.String)">
            <summary>
            Called when the project opens an editor window for the given file
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.ProjectNode.AddDependentFileNode(System.Collections.Generic.IDictionary{System.String,Microsoft.Build.Evaluation.ProjectItem},System.String,System.Collections.Generic.IDictionary{System.String,Microsoft.VisualStudio.Project.HierarchyNode})">
            <summary>
            This add methos adds the "key" item to the hierarchy, potentially adding other subitems in the process
            This method may recurse if the parent is an other subitem
            
            </summary>
            <param name="subitems">List of subitems not yet added to the hierarchy</param>
            <param name="key">Key to retrieve the target item from the subitems list</param>
            <returns>Newly added node</returns>
            <remarks>If the parent node was found we add the dependent item to it otherwise we add the item ignoring the "DependentUpon" metatdata</remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.ProjectNode.PrepareBuild(System.String,System.String,System.Boolean)">
            <summary>
            This is called from the main thread before the background build starts.
             cleanBuild is not part of the vsopts, but passed down as the callpath is differently
             PrepareBuild mainly creates directories and cleans house if cleanBuild is true
            </summary>
            <param name="config"></param>
            <param name="cleanBuild"></param>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.ProjectNode.Build(System.UInt32,System.String,System.String,Microsoft.VisualStudio.Shell.Interop.IVsOutputWindowPane,System.String)">
            <summary>
            Do the build by invoking msbuild
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.ProjectNode.BuildAsync(System.UInt32,System.String,System.String,Microsoft.VisualStudio.Shell.Interop.IVsOutputWindowPane,System.String,System.Action{Microsoft.VisualStudio.Project.MSBuildResult,System.String})">
            <summary>
            Do the build by invoking msbuild
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.ProjectNode.GetProjectProperty(System.String,Microsoft.VisualStudio.Shell.Interop._PersistStorageType,System.Boolean)">
            <summary>
            Return the value of a project property
            </summary>
            <param name="propertyName">Name of the property to get</param>
            <param name="resetCache">True to avoid using the cache</param>
            <returns>null if property does not exist, otherwise value of the property</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.ProjectNode.SetProjectProperty(System.String,Microsoft.VisualStudio.Shell.Interop._PersistStorageType,System.String)">
            <summary>
            Set value of project property
            </summary>
            <param name="propertyName">Name of property</param>
            <param name="propertyValue">Value of property</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.ProjectNode.GetAssemblyName(System.String,System.String)">
            <summary>
            Get the assembly name for a give configuration
            </summary>
            <param name="config">the matching configuration in the msbuild file</param>
            <returns>assembly name</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.ProjectNode.IsCodeFile(System.String)">
            <summary>
            Determines whether a file is a code file.
            </summary>
            <param name="fileName">Name of the file to be evaluated</param>
            <returns>false by default for any fileName</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.ProjectNode.IsEmbeddedResource(System.String)">
            <summary>
            Determines whether the given file is a resource file (resx file).
            </summary>
            <param name="fileName">Name of the file to be evaluated.</param>
            <returns>true if the file is a resx file, otherwise false.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.ProjectNode.CreateFileNode(Microsoft.VisualStudio.Project.ProjectElement)">
            <summary>
            Create a file node based on an msbuild item.
            </summary>
            <param name="item">msbuild item</param>
            <returns>FileNode added</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.ProjectNode.CreateFileNode(System.String)">
            <summary>
            Create a file node based on a string.
            </summary>
            <param name="file">filename of the new filenode</param>
            <returns>File node added</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.ProjectNode.CreateDependentFileNode(Microsoft.VisualStudio.Project.ProjectElement)">
            <summary>
            Create dependent file node based on an msbuild item
            </summary>
            <param name="item">msbuild item</param>
            <returns>dependent file node</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.ProjectNode.CreateDependentFileNode(System.String)">
            <summary>
            Create a dependent file node based on a string.
            </summary>
            <param name="file">filename of the new dependent file node</param>
            <returns>Dependent node added</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.ProjectNode.CreateFolderNodes(System.String)">
            <summary>
            Walks the subpaths of a project relative path and checks if the folder nodes hierarchy is already there, if not creates it.
            </summary>
            <param name="strPath">Path of the folder, can be relative to project or absolute</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.ProjectNode.NodeHasDesigner(System.String)">
            <summary>
            Defines if Node has Designer. By default we do not support designers for nodes
            </summary>
            <param name="itemPath">Path to item to query for designer support</param>
            <returns>true if node has designer</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.ProjectNode.GetConfigurationIndependentPropertyPages">
            <summary>
            List of Guids of the config independent property pages. It is called by the GetProperty for VSHPROPID_PropertyPagesCLSIDList property.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.ProjectNode.GetConfigurationDependentPropertyPages">
            <summary>
            Returns a list of Guids of the configuration dependent property pages. It is called by the GetProperty for VSHPROPID_CfgPropertyPagesCLSIDList property.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.ProjectNode.GetPriorityProjectDesignerPages">
            <summary>
            An ordered list of guids of the prefered property pages. See <see cref="!:__VSHPROPID.VSHPROPID_PriorityPropertyPagesCLSIDList"/>
            </summary>
            <returns>An array of guids.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.ProjectNode.VerifySubfolderExists(System.String,Microsoft.VisualStudio.Project.HierarchyNode)">
            <summary>
            Takes a path and verifies that we have a node with that name.
            It is meant to be a helper method for CreateFolderNodes().
            For some scenario it may be useful to override.
            </summary>
            <param name="path">full path to the subfolder we want to verify.</param>
            <param name="parent">the parent node where to add the subfolder if it does not exist.</param>
            <returns>the foldernode correcsponding to the path.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.ProjectNode.CreateFolderNode(System.String,Microsoft.VisualStudio.Project.ProjectElement)">
            <summary>
            To support virtual folders, override this method to return your own folder nodes
            </summary>
            <param name="path">Path to store for this folder</param>
            <param name="element">Element corresponding to the folder</param>
            <returns>A FolderNode that can then be added to the hierarchy</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.ProjectNode.GetSelectedNodes">
            <summary>
            Gets the list of selected HierarchyNode objects
            </summary>
            <returns>A list of HierarchyNode objects</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.ProjectNode.UpdateSccStateIcons">
            <summary>
            Recursevily walks the hierarchy nodes and redraws the state icons
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.ProjectNode.ToggleShowAllFiles">
            <summary>
            Toggles the state of Show all files
            </summary>
            <returns>S_OK if it's possible to toggle the state, OLECMDERR_E_NOTSUPPORTED if not</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.ProjectNode.AddWebReference">
            <summary>
            Handles the Add web reference command.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.ProjectNode.UnloadProject">
            <summary>
            Unloads the project.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.ProjectNode.CleanProject">
            <summary>
            Handles the clean project command.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.ProjectNode.Reload">
            <summary>
            Reload project from project file
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.ProjectNode.RenameProjectFile(System.String)">
            <summary>
            Renames the project file
            </summary>
            <param name="newFile">The full path of the new project file.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.ProjectNode.IsItemTypeFileType(System.String)">
            <summary>
            Called by the project to know if the item is a file (that is part of the project)
            or an intermediate file used by the MSBuild tasks/targets
            Override this method if your project has more types or different ones
            </summary>
            <param name="type">Type name</param>
            <returns>True = items of this type should be included in the project</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.ProjectNode.FilterItemTypeToBeAddedToHierarchy(System.String)">
            <summary>
            Filter items that should not be processed as file items. Example: Folders and References.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.ProjectNode.SetOutputLogger(Microsoft.VisualStudio.Shell.Interop.IVsOutputWindowPane)">
            <summary>
            Associate window output pane to the build logger
            </summary>
            <param name="output"></param>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.ProjectNode.SetBuildConfigurationProperties(System.String,System.String)">
            <summary>
            Set configuration properties for a specific configuration
            </summary>
            <param name="config">configuration name</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.ProjectNode.InvokeMSBuild(System.String)">
            <summary>
            This execute an MSBuild target for a design-time build.
            </summary>
            <param name="target">Name of the MSBuild target to execute</param>
            <returns>Result from executing the target (success/failure)</returns>
            <remarks>
            If you depend on the items/properties generated by the target
            you should be aware that any call to BuildTarget on any project
            will reset the list of generated items/properties
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.ProjectNode.DoMSBuildSubmission(Microsoft.VisualStudio.Project.BuildKind,System.String,System.Action{Microsoft.VisualStudio.Project.MSBuildResult,System.String})">
            <summary>
            Start MSBuild build submission
            </summary>
            If buildKind is ASync, this method starts the submission and returns. uiThreadCallback will be called on UI thread once submissions completes.
            if buildKind is Sync, this method executes the submission and runs uiThreadCallback
            <param name="buildKind">Is it a Sync or ASync build</param>
            <param name="target">target to build</param>
            <param name="projectInstance">project instance to build; if null, this.BuildProject.CreateProjectInstance() is used to populate</param>
            <param name="uiThreadCallback">callback to be run UI thread </param>
            <returns>A Build submission instance.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.ProjectNode.InitializeProjectProperties">
            <summary>
            Initialize common project properties with default value if they are empty
            </summary>
            <remarks>The following common project properties are defaulted to projectName (if empty):
               AssemblyName, Name and RootNamespace.
            If the project filename is not set then no properties are set</remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.ProjectNode.CreateConfigProvider">
            <summary>
            Factory method for configuration provider
            </summary>
            <returns>Non-null configuration provider created</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.ProjectNode.CreateReferenceContainerNode">
            <summary>
            Factory method for reference container node
            </summary>
            <returns>ReferenceContainerNode created</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.ProjectNode.SaveAs(System.String)">
            <summary>
            Saves the project file on a new name.
            </summary>
            <param name="newFileName">The new name of the project file.</param>
            <returns>Success value or an error code.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.ProjectNode.SaveMSBuildProjectFileAs(System.String)">
            <summary>
            Saves project file related information to the new file name. It also calls msbuild API to save the project file.
            It is called by the SaveAs method and the SetEditLabel before the project file rename related events are triggered. 
            An implementer can override this method to provide specialized semantics on how the project file is renamed in the msbuild file.
            </summary>
            <param name="newFileName">The new full path of the project file</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.ProjectNode.AddFileToMSBuild(System.String)">
            <summary>
            Adds a file to the msbuild project.
            </summary>
            <param name="file">The file to be added.</param>
            <returns>A non-null ProjectElement describing the newly added file.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.ProjectNode.AddFileToMSBuild(System.String,System.String,System.String)">
            <summary>
            Adds a file to the msbuild project.
            </summary>
            <param name="file">The file to be added.</param>
            <returns>A non-null ProjectElement describing the newly added file.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.ProjectNode.AddFolderToMSBuild(System.String)">
            <summary>
            Adds a folder to the msbuild project.
            </summary>
            <param name="folder">The folder to be added.</param>
            <returns>A non-null ProjectElement describing the newly added folder.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.ProjectNode.AddFolderToMSBuild(System.String,System.String)">
            <summary>
            Adds a folder to the msbuild project.
            </summary>
            <param name="folder">The folder to be added.</param>
            <returns>A non-null ProjectElement describing the newly added folder.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.ProjectNode.CanOverwriteExistingItem(System.String,System.String)">
            <summary>
            Determines whether an item can be owerwritten in the hierarchy.
            </summary>
            <param name="originalFileName">The orginal filname.</param>
            <param name="computedNewFileName">The computed new file name, that will be copied to the project directory or into the folder .</param>
            <returns>S_OK for success, or an error message</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.ProjectNode.OverwriteExistingItem(Microsoft.VisualStudio.Project.HierarchyNode)">
            <summary>
            Handle owerwriting of an existing item in the hierarchy.
            </summary>
            <param name="existingNode">The node that exists.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.ProjectNode.AddNewFileNodeToHierarchy(Microsoft.VisualStudio.Project.HierarchyNode,System.String,System.String)">
            <summary>
            Adds a new file node to the hierarchy.
            </summary>
            <param name="parentNode">The parent of the new fileNode</param>
            <param name="fileName">The file name</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.ProjectNode.IsCurrentStateASuppressCommandsMode">
            <summary>
            Defines whther the current mode of the project is in a supress command mode.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.ProjectNode.GetOutputGroupNames">
            <summary>
            This is the list of output groups that the configuration object should
            provide.
            The first string is the name of the group.
            The second string is the target name (MSBuild) for that group.
            
            To add/remove OutputGroups, simply override this method and edit the list.
            
            To get nice display names and description for your groups, override:
                   - GetOutputGroupDisplayName
                   - GetOutputGroupDescription
            </summary>
            <returns>List of output group name and corresponding MSBuild target</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.ProjectNode.GetOutputGroupDisplayName(System.String)">
            <summary>
            Get the display name of the given output group.
            </summary>
            <param name="canonicalName">Canonical name of the output group</param>
            <returns>Display name</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.ProjectNode.GetOutputGroupDescription(System.String)">
            <summary>
            Get the description of the given output group.
            </summary>
            <param name="canonicalName">Canonical name of the output group</param>
            <returns>Description</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.ProjectNode.SetCurrentConfiguration">
            <summary>
            Set the configuration in MSBuild.
            This does not get persisted and is used to evaluate msbuild conditions
            which are based on the $(Configuration) property.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.ProjectNode.SetConfiguration(System.String,System.String)">
            <summary>
            Set the configuration property in MSBuild.
            This does not get persisted and is used to evaluate msbuild conditions
            which are based on the $(Configuration) property.
            </summary>
            <param name="config">Configuration name</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.ProjectNode.ProcessReferences">
            <summary>
            Loads reference items from the project file into the hierarchy.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.ProjectNode.ProcessFolders(System.Collections.Generic.IDictionary{System.String,Microsoft.VisualStudio.Project.HierarchyNode})">
            <summary>
            Loads folders from the project file into the hierarchy.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.ProjectNode.ProcessFiles(System.Collections.Generic.IDictionary{System.String,Microsoft.VisualStudio.Project.HierarchyNode})">
            <summary>
            Loads file items from the project file into the hierarchy.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.ProjectNode.ProcessDependentFileNodes(System.Collections.Generic.IList{System.String},System.Collections.Generic.Dictionary{System.String,Microsoft.Build.Evaluation.ProjectItem},System.Collections.Generic.IDictionary{System.String,Microsoft.VisualStudio.Project.HierarchyNode})">
            <summary>
            Processes dependent filenodes from list of subitems. Multi level supported, but not circular dependencies.
            </summary>
            <param name="subitemsKeys">List of sub item keys </param>
            <param name="subitems"></param>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.ProjectNode.LoadNonBuildInformation">
            <summary>
            For flavored projects which implement IPersistXMLFragment, load the information now
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.ProjectNode.CompareNodes(Microsoft.VisualStudio.Project.HierarchyNode,Microsoft.VisualStudio.Project.HierarchyNode)">
            <summary>
            Used to sort nodes in the hierarchy.
            <note type="caller">
            This method returns inverted values when compared to other compare operations such as <see cref="M:System.Collections.Generic.Comparer`1.Compare(`0,`0)"/>.
            </note>
            </summary>
            <param name="node1">The first hierarchy node.</param>
            <param name="node2">The second hierarchy node.</param>
            <returns>
            A signed integer indicating the relative position of <paramref name="node1"/> and <paramref name="node2"/>, as shown in the following table.
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <description>Less than zero</description>
            <description><paramref name="node1"/> appears after <paramref name="node2"/>.</description>
            </item>
            <item>
            <description>Zero</description>
            <description><paramref name="node1"/> is unordered with respect to <paramref name="node2"/>.</description>
            </item>
            <item>
            <description>Greater than zero</description>
            <description><paramref name="node1"/> appears before <paramref name="node2"/>.</description>
            </item>
            </list>
            </returns>
            <exception cref="T:System.ArgumentNullException">
            If <paramref name="node1"/> is <see langword="null"/>.
            <para>-or-</para>
            <para>If <paramref name="node2"/> is <see langword="null"/>.</para>
            </exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.ProjectNode.OnHandleConfigurationRelatedGlobalProperties(System.Object,Microsoft.VisualStudio.Project.ActiveConfigurationChangedEventArgs)">
            <summary>
            Handles global properties related to configuration and platform changes invoked by a change in the active configuration.
            </summary>
            <param name="sender">The sender of the event.</param>
            <param name="eventArgs">The event args</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.ProjectNode.FlushBuildLoggerContent">
            <summary>
            Flush any remaining content from build logger.
            This method is called as part of the callback method passed to the buildsubmission during async build
            so that results can be printed the the build is finished.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.ProjectNode.SuspendMSBuild">
            <summary>
            Suspends MSBuild
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.ProjectNode.ResumeMSBuild(System.String,System.String,Microsoft.VisualStudio.Shell.Interop.IVsOutputWindowPane,System.String)">
            <summary>
            Resumes MSBuild.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.ProjectNode.ResumeMSBuild(System.String,System.String,System.String)">
            <summary>
            Resumes MSBuild.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.ProjectNode.ResumeMSBuild(System.String)">
            <summary>
            Resumes MSBuild.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.ProjectNode.CallMSBuild(System.String,System.String,Microsoft.VisualStudio.Shell.Interop.IVsOutputWindowPane,System.String)">
            <summary>
            Calls MSBuild if it is not suspended. If it is suspended then it will remember to call when msbuild is resumed.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.ProjectNode.CallMSBuild(System.String,System.String,System.String)">
            <summary>
            Overloaded method. Calls MSBuild if it is not suspended. Does not log on the outputwindow. If it is suspended then it will remeber to call when msbuild is resumed.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.ProjectNode.CallMSBuild(System.String)">
            <summary>
            Calls MSBuild if it is not suspended. Does not log and uses current configuration. If it is suspended then it will remeber to call when msbuild is resumed.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.ProjectNode.CallMSBuild(System.String,Microsoft.VisualStudio.Shell.Interop.IVsOutputWindowPane)">
            <summary>
            Calls MSBuild if it is not suspended. Uses current configuration. If it is suspended then it will remeber to call when msbuild is resumed.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.ProjectNode.Build(System.String,System.String,Microsoft.VisualStudio.Shell.Interop.IVsOutputWindowPane,System.String)">
            <summary>
            Overloaded method to invoke MSBuild
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.ProjectNode.Build(System.String,System.String,System.String)">
            <summary>
            Overloaded method to invoke MSBuild. Does not log build results to the output window pane.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.ProjectNode.Build(System.String)">
            <summary>
            Overloaded method. Invokes MSBuild using the default configuration and does without logging on the output window pane.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.ProjectNode.Build(System.String,Microsoft.VisualStudio.Shell.Interop.IVsOutputWindowPane)">
            <summary>
            Overloaded method. Invokes MSBuild using the default configuration.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.ProjectNode.GetOutputPath(System.String,System.String)">
            <summary>
            Get the output path for a specific configuration name
            </summary>
            <param name="config">name of configuration</param>
            <returns>Output path</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.ProjectNode.GetProjectProperty(System.String,Microsoft.VisualStudio.Shell.Interop._PersistStorageType)">
            <summary>
            Get value of Project property
            </summary>
            <param name="propertyName">Name of Property to retrieve</param>
            <returns>Evaluated value of property.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.ProjectNode.GetProjectPropertyUnevaluated(System.String)">
            <summary>
            Gets the unevaluated value of a project property.
            </summary>
            <param name="propertyName">The name of the property to retrieve.</param>
            <returns>Unevaluated value of the property.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.ProjectNode.SetProjectFileDirty(System.Boolean)">
            <summary>
            Set dirty state of project
            </summary>
            <param name="value">boolean value indicating dirty state</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.ProjectNode.GetOutputAssembly(System.String,System.String)">
            <summary>
            Get output assembly for a specific configuration name
            </summary>
            <param name="config">Name of configuration</param>
            <returns>Name of output assembly</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.ProjectNode.NodeFromItemId(System.UInt32)">
            <summary>
            Get Node from ItemID.
            </summary>
            <param name="itemId">ItemID for the requested node</param>
            <returns>Node if found</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.ProjectNode.CreateMSBuildFileItem(System.String,System.String)">
            <summary>
            This method return new project element, and add new MSBuild item to the project/build hierarchy
            </summary>
            <param name="file">file name</param>
            <param name="itemType">MSBuild item type</param>
            <returns>new project element</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.ProjectNode.GetProjectElement(Microsoft.Build.Evaluation.ProjectItem)">
            <summary>
            This method returns new project element based on existing MSBuild item. It does not modify/add project/build hierarchy at all.
            </summary>
            <param name="item">MSBuild item instance</param>
            <returns>wrapping project element</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.ProjectNode.CreateFolderNode(System.String)">
            <summary>
            Create FolderNode from Path
            </summary>
            <param name="path">Path to folder</param>
            <returns>FolderNode created that can be added to the hierarchy</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.ProjectNode.QueryEditProjectFile(System.Boolean)">
            <summary>
            Verify if the file can be written to.
            Return false if the file is read only and/or not checked out
            and the user did not give permission to change it.
            Note that exact behavior can also be affected based on the SCC
            settings under Tools->Options.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.ProjectNode.GetNestedProjectForHierarchy(Microsoft.VisualStudio.Shell.Interop.IVsHierarchy)">
            <summary>
            Checks whether a hierarchy is a nested project.
            </summary>
            <param name="hierarchy"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.ProjectNode.GetBaseDirectoryForAddingFiles(Microsoft.VisualStudio.Project.HierarchyNode)">
            <summary>
            Given a node determines what is the directory that can accept files.
            If the node is a FoldeNode than it is the Url of the Folder.
            If the node is a ProjectNode it is the project folder.
            Otherwise (such as FileNode subitem) it delegate the resolution to the parent node.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.ProjectNode.GetProjectExtensions">
            <summary>
            Get the project extensions
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.ProjectNode.SetProjectExtensions(System.String,System.String)">
            <summary>
            Set the xmlText as a project extension element with the id passed.
            </summary>
            <param name="id">The id of the project extension element.</param>
            <param name="xmlText">The value to set for a project extension.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.ProjectNode.RegisterSccProject">
            <summary>
            Register the project with the Scc manager.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.ProjectNode.UnregisterProject">
            <summary>
             Unregisters us from the SCC manager
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.ProjectNode.GetCatIdForType(System.Type)">
            <summary>
            Get the CATID corresponding to the specified type.
            </summary>
            <param name="type">Type of the object for which you want the CATID</param>
            <returns>CATID</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.ProjectNode.AddCatIdMapping(System.Type,System.Guid)">
            <summary>
            This is used to specify a CATID corresponding to a BrowseObject or an ExtObject.
            The CATID can be any GUID you choose. For types which are your owns, you could use
            their type GUID, while for other types (such as those provided in the MPF) you should
            provide a different GUID.
            </summary>
            <param name="type">Type of the extensible object</param>
            <param name="catId">GUID that extender can use to uniquely identify your object type</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.ProjectNode.LoadXmlFragment(Microsoft.VisualStudio.Shell.Interop.IPersistXMLFragment,System.String)">
            <summary>
            Initialize an object with an XML fragment.
            </summary>
            <param name="iPersistXMLFragment">Object that support being initialized with an XML fragment</param>
            <param name="configName">Name of the configuration being initialized, null if it is the project</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.ProjectNode.PersistXmlFragments">
            <summary>
            Retrieve all XML fragments that need to be saved from the flavors and store the information in msbuild.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.ProjectNode.GetMkDocument(System.UInt32,System.String@)">
            <summary>
            Callback from the additem dialog. Deals with adding new and existing items
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.ProjectNode.AddItemWithSpecific(System.UInt32,Microsoft.VisualStudio.Shell.Interop.VSADDITEMOPERATION,System.String,System.UInt32,System.String[],System.IntPtr,System.UInt32,System.Guid@,System.String,System.Guid@,Microsoft.VisualStudio.Shell.Interop.VSADDRESULT[])">
            <summary>
            Creates new items in a project, adds existing files to a project, or causes Add Item wizards to be run
            </summary>
            <param name="itemIdLoc"></param>
            <param name="op"></param>
            <param name="itemName"></param>
            <param name="filesToOpen"></param>
            <param name="files">Array of file names. 
            If dwAddItemOperation is VSADDITEMOP_CLONEFILE the first item in the array is the name of the file to clone. 
            If dwAddItemOperation is VSADDITEMOP_OPENDIRECTORY, the first item in the array is the directory to open. 
            If dwAddItemOperation is VSADDITEMOP_RUNWIZARD, the first item is the name of the wizard to run, 
            and the second item is the file name the user supplied (same as itemName).</param>
            <param name="dlgOwner"></param>
            <param name="editorFlags"></param>
            <param name="editorType"></param>
            <param name="physicalView"></param>
            <param name="logicalView"></param>
            <param name="result"></param>
            <returns>S_OK if it succeeds </returns>
            <remarks>The result array is initalized to failure.</remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.ProjectNode.GenerateUniqueItemName(System.UInt32,System.String,System.String,System.String@)">
            <summary>
            for now used by add folder. Called on the ROOT, as only the project should need
            to implement this.
            for folders, called with parent folder, blank extension and blank suggested root
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.ProjectNode.TransferItem(System.String,System.String,Microsoft.VisualStudio.Shell.Interop.IVsWindowFrame)">
            <summary>
            Implements IVsProject3::TransferItem
            This function is called when an open miscellaneous file is being transferred
            to our project. The sequence is for the shell to call AddItemWithSpecific and
            then use TransferItem to transfer the open document to our project.
            </summary>
            <param name="oldMkDoc">Old document name</param>
            <param name="newMkDoc">New document name</param>
            <param name="frame">Optional frame if the document is open</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.ProjectNode.GetBuildSystemKind(System.UInt32@)">
            <summary>
            Used to determine the kind of build system, in VS 2005 there's only one defined kind: MSBuild 
            </summary>
            <param name="kind"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.ProjectNode.AddComponent(Microsoft.VisualStudio.Shell.Interop.VSADDCOMPOPERATION,System.UInt32,System.IntPtr[],System.IntPtr,Microsoft.VisualStudio.Shell.Interop.VSADDCOMPRESULT[])">
            <summary>
            Add Components to the Project.
            Used by the environment to add components specified by the user in the Component Selector dialog 
            to the specified project
            </summary>
            <param name="dwAddCompOperation">The component operation to be performed.</param>
            <param name="cComponents">Number of components to be added</param>
            <param name="rgpcsdComponents">array of component selector data</param>
            <param name="hwndDialog">Handle to the component picker dialog</param>
            <param name="pResult">Result to be returned to the caller</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.ProjectNode.GetSccFiles(System.UInt32,Microsoft.VisualStudio.OLE.Interop.CALPOLESTR[],Microsoft.VisualStudio.OLE.Interop.CADWORD[])">
            <summary>
            This method is called to determine which files should be placed under source control for a given VSITEMID within this hierarchy.
            </summary>
            <param name="itemid">Identifier for the VSITEMID being queried.</param>
            <param name="stringsOut">Pointer to an array of CALPOLESTR strings containing the file names for this item.</param>
            <param name="flagsOut">Pointer to a CADWORD array of flags stored in DWORDs indicating that some of the files have special behaviors.</param>
            <returns>If the method succeeds, it returns S_OK. If it fails, it returns an error code. </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.ProjectNode.GetSccSpecialFiles(System.UInt32,System.String,Microsoft.VisualStudio.OLE.Interop.CALPOLESTR[],Microsoft.VisualStudio.OLE.Interop.CADWORD[])">
            <summary>
            This method is called to discover special (hidden files) associated with a given VSITEMID within this hierarchy. 
            </summary>
            <param name="itemid">Identifier for the VSITEMID being queried.</param>
            <param name="sccFile">One of the files associated with the node</param>
            <param name="stringsOut">Pointer to an array of CALPOLESTR strings containing the file names for this item.</param>
            <param name="flagsOut">Pointer to a CADWORD array of flags stored in DWORDs indicating that some of the files have special behaviors.</param>
            <returns>If the method succeeds, it returns S_OK. If it fails, it returns an error code. </returns>
            <remarks>This method is called to discover any special or hidden files associated with an item in the project hierarchy. It is called when GetSccFiles returns with the SFF_HasSpecialFiles flag set for any of the files associated with the node.</remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.ProjectNode.SccGlyphChanged(System.Int32,System.UInt32[],Microsoft.VisualStudio.Shell.Interop.VsStateIcon[],System.UInt32[])">
            <summary>
            This method is called by the source control portion of the environment to inform the project of changes to the source control glyph on various nodes. 
            </summary>
            <param name="affectedNodes">Count of changed nodes.</param>
            <param name="itemidAffectedNodes">An array of VSITEMID identifiers of the changed nodes.</param>
            <param name="newGlyphs">An array of VsStateIcon glyphs representing the new state of the corresponding item in rgitemidAffectedNodes.</param>
            <param name="newSccStatus">An array of status flags from SccStatus corresponding to rgitemidAffectedNodes. </param>
            <returns>If the method succeeds, it returns S_OK. If it fails, it returns an error code. </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.ProjectNode.SetSccLocation(System.String,System.String,System.String,System.String)">
            <summary>
            This method is called by the source control portion of the environment when a project is initially added to source control, or to change some of the project's settings.
            </summary>
            <param name="sccProjectName">String, opaque to the project, that identifies the project location on the server. Persist this string in the project file. </param>
            <param name="sccLocalPath">String, opaque to the project, that identifies the path to the server. Persist this string in the project file.</param>
            <param name="sccAuxPath">String, opaque to the project, that identifies the local path to the project. Persist this string in the project file.</param>
            <param name="sccProvider">String, opaque to the project, that identifies the source control package. Persist this string in the project file.</param>
            <returns>If the method succeeds, it returns S_OK. If it fails, it returns an error code.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.ProjectNode.GetFile(System.Int32,System.UInt32,System.UInt32@,System.String@)">
            <summary>
            Allows you to query the project for special files and optionally create them. 
            </summary>
            <param name="fileId">__PSFFILEID of the file</param>
            <param name="flags">__PSFFLAGS flags for the file</param>
            <param name="itemid">The itemid of the node in the hierarchy</param>
            <param name="fileName">The file name of the special file.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.ProjectNode.GetInner">
            <summary>
            Get the inner object of an aggregated hierarchy
            </summary>
            <returns>A HierarchyNode</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.ProjectNode.GetReferenceContainer">
            <summary>
            Returns the reference container node.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.ProjectNode.GetAggregateProjectTypeGuids(System.String@)">
            <summary>
            Retrieve the list of project GUIDs that are aggregated together to make this project.
            </summary>
            <param name="projectTypeGuids">Semi colon separated list of Guids. Typically, the last GUID would be the GUID of the base project factory</param>
            <returns>HResult</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.ProjectNode.InitializeForOuter(System.String,System.String,System.String,System.UInt32,System.Guid@,System.IntPtr@,System.Int32@)">
            <summary>
            This is where the initialization occurs.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.ProjectNode.OnAggregationComplete">
            <summary>
            This is called after the project is done initializing the different layer of the aggregations
            </summary>
            <returns>HResult</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.ProjectNode.SetAggregateProjectTypeGuids(System.String)">
            <summary>
            Set the list of GUIDs that are aggregated together to create this project.
            </summary>
            <param name="projectTypeGuids">Semi-colon separated list of GUIDs, the last one is usually the project factory of the base project factory</param>
            <returns>HResult</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.ProjectNode.SetInnerProject(System.Object)">
            <summary>
            We are always the inner most part of the aggregation
            and as such we don't support setting an inner project
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.ProjectNode.Microsoft#VisualStudio#Shell#Interop#IVsBuildPropertyStorage#GetItemAttribute(System.UInt32,System.String,System.String@)">
            <summary>
            Get the property of an item
            </summary>
            <param name="item">ItemID</param>
            <param name="attributeName">Name of the property</param>
            <param name="attributeValue">Value of the property (out parameter)</param>
            <returns>HRESULT</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.ProjectNode.Microsoft#VisualStudio#Shell#Interop#IVsBuildPropertyStorage#GetPropertyValue(System.String,System.String,System.UInt32,System.String@)">
            <summary>
            Get the value of the property in the project file
            </summary>
            <param name="propertyName">Name of the property to remove</param>
            <param name="configName">Configuration for which to remove the property</param>
            <param name="storage">Project or user file (_PersistStorageType)</param>
            <param name="propertyValue">Value of the property (out parameter)</param>
            <returns>HRESULT</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.ProjectNode.Microsoft#VisualStudio#Shell#Interop#IVsBuildPropertyStorage#RemoveProperty(System.String,System.String,System.UInt32)">
            <summary>
            Delete a property
            In our case this simply mean defining it as null
            </summary>
            <param name="propertyName">Name of the property to remove</param>
            <param name="configName">Configuration for which to remove the property</param>
            <param name="storage">Project or user file (_PersistStorageType)</param>
            <returns>HRESULT</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.ProjectNode.Microsoft#VisualStudio#Shell#Interop#IVsBuildPropertyStorage#SetItemAttribute(System.UInt32,System.String,System.String)">
            <summary>
            Set a property on an item
            </summary>
            <param name="item">ItemID</param>
            <param name="attributeName">Name of the property</param>
            <param name="attributeValue">New value for the property</param>
            <returns>HRESULT</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.ProjectNode.Microsoft#VisualStudio#Shell#Interop#IVsBuildPropertyStorage#SetPropertyValue(System.String,System.String,System.UInt32,System.String)">
            <summary>
            Set a project property
            </summary>
            <param name="propertyName">Name of the property to set</param>
            <param name="configName">Configuration for which to set the property</param>
            <param name="storage">Project file or user file (_PersistStorageType)</param>
            <param name="propertyValue">New value for that property</param>
            <returns>HRESULT</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.ProjectNode.AddIndependentFileNode(Microsoft.Build.Evaluation.ProjectItem,System.Collections.Generic.IDictionary{System.String,Microsoft.VisualStudio.Project.HierarchyNode})">
            <summary>
            Add an item to the hierarchy based on the item path
            </summary>
            <param name="item">Item to add</param>
            <returns>Added node</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.ProjectNode.AddDependentFileNodeToNode(Microsoft.Build.Evaluation.ProjectItem,Microsoft.VisualStudio.Project.HierarchyNode)">
            <summary>
            Add a dependent file node to the hierarchy
            </summary>
            <param name="item">msbuild item to add</param>
            <param name="parentNode">Parent Node</param>
            <returns>Added node</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.ProjectNode.AddFileNodeToNode(Microsoft.Build.Evaluation.ProjectItem,Microsoft.VisualStudio.Project.HierarchyNode)">
            <summary>
            Add a file node to the hierarchy
            </summary>
            <param name="item">msbuild item to add</param>
            <param name="parentNode">Parent Node</param>
            <returns>Added node</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.ProjectNode.GetItemParentNode(Microsoft.Build.Evaluation.ProjectItem,System.Collections.Generic.IDictionary{System.String,Microsoft.VisualStudio.Project.HierarchyNode})">
            <summary>
            Get the parent node of an msbuild item
            </summary>
            <param name="item">msbuild item</param>
            <returns>parent node</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.ProjectNode.SetSccSettings(System.String,System.String,System.String,System.String)">
            <summary>
            Updates our scc project settings. 
            </summary>
            <param name="sccProjectName">String, opaque to the project, that identifies the project location on the server. Persist this string in the project file. </param>
            <param name="sccLocalPath">String, opaque to the project, that identifies the path to the server. Persist this string in the project file.</param>
            <param name="sccAuxPath">String, opaque to the project, that identifies the local path to the project. Persist this string in the project file.</param>
            <param name="sccProvider">String, opaque to the project, that identifies the source control package. Persist this string in the project file.</param>
            <returns>Returns true if something changed.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.ProjectNode.InitSccInfo">
            <summary>
            Sets the scc info from the project file.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.ProjectNode.SetProjectGuidFromProjectFile">
            <summary>
            Sets the project guid from the project file. If no guid is found a new one is created and assigne for the instance project guid.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.ProjectNode.BuildPrelude(Microsoft.VisualStudio.Shell.Interop.IVsOutputWindowPane)">
            <summary>
            Helper for sharing common code between Build() and BuildAsync()
            </summary>
            <param name="output"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.ProjectNode.CloseAllNodes(Microsoft.VisualStudio.Project.HierarchyNode)">
            <summary>
            Recusively parses the tree and closes all nodes.
            </summary>
            <param name="node">The subtree to close.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.ProjectNode.SetBuildProject(Microsoft.Build.Evaluation.Project)">
            <summary>
            Set the build project with the new project instance value
            </summary>
            <param name="project">The new build project instance</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.ProjectNode.SetupProjectGlobalPropertiesThatAllProjectSystemsMustSet">
            <summary>
            Setup the global properties for project instance.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.ProjectNode.TryBeginBuild(System.Boolean,System.Boolean)">
            <summary>
            Attempts to lock in the privilege of running a build in Visual Studio.
            </summary>
            <param name="designTime"><c>false</c> if this build was called for by the Solution Build Manager; <c>true</c> otherwise.</param>
            <param name="requiresUIThread">
            Need to claim the UI thread for build under the following conditions:
            1. The build must use a resource that uses the UI thread, such as
            - you set HostServices and you have a host object which requires (even indirectly) the UI thread (VB and C# compilers do this for instance.)
            or,
            2. The build requires the in-proc node AND waits on the UI thread for the build to complete, such as:
            - you use a ProjectInstance to build, or
            - you have specified a host object, whether or not it requires the UI thread, or
            - you set HostServices and you have specified a node affinity.
            - In addition to the above you also call submission.Execute(), or you call submission.ExecuteAsync() and then also submission.WaitHandle.Wait*().
            </param>
            <returns>A value indicating whether a build may proceed.</returns>
            <remarks>
            This method must be called on the UI thread.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.ProjectNode.EndBuild(Microsoft.Build.Execution.BuildSubmission,System.Boolean,System.Boolean)">
            <summary>
            Lets Visual Studio know that we're done with our design-time build so others can use the build manager.
            </summary>
            <param name="submission">The build submission that built, if any.</param>
            <param name="designTime">This must be the same value as the one passed to <see cref="M:Microsoft.VisualStudio.Project.ProjectNode.TryBeginBuild(System.Boolean,System.Boolean)"/>.</param>
            <param name="requiresUIThread">This must be the same value as the one passed to <see cref="M:Microsoft.VisualStudio.Project.ProjectNode.TryBeginBuild(System.Boolean,System.Boolean)"/>.</param>
            <remarks>
            This method must be called on the UI thread.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.ProjectNode.ShowRetargetingDialog">
            <summary>
            
            </summary>
            <returns>
            <c>true</c> if the project will be retargeted.  <c>false</c> to load project in unloaded state.
            </returns>
        </member>
        <member name="P:Microsoft.VisualStudio.Project.ProjectNode.ProjectGuid">
            <summary>
            This Guid must match the Guid you registered under
            HKLM\Software\Microsoft\VisualStudio\%version%\Projects.
            Among other things, the Project framework uses this 
            guid to find your project and item templates.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Project.ProjectNode.ProjectType">
            <summary>
            Returns a caption for VSHPROPID_TypeName.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Microsoft.VisualStudio.Project.ProjectNode.ProjectIdGuid">
            <summary>
            This is the project instance guid that is peristed in the project file
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Project.ProjectNode.ReevaluateProjectFileTargetName">
            <summary>
            The target name that will be used for evaluating the project file (i.e., pseudo-builds).
            This target is used to trigger a build with when the project system changes. 
            Example: The language projrcts are triggering a build with the Compile target whenever 
            the project system changes.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Project.ProjectNode.ProjectObject">
            <summary>
            This is the object that will be returned by EnvDTE.Project.Object for this project
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Project.ProjectNode.IsProjectFileDirty">
            <summary>
            Override this property to specify when the project file is dirty.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Project.ProjectNode.SupportsProjectDesigner">
            <summary>
            True if the project uses the Project Designer Editor instead of the property page frame to edit project properties.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Project.ProjectNode.ShowProjectInSolutionPage">
            <summary>
            Defines the flag that supports the VSHPROPID.ShowProjInSolutionPage
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Project.ProjectNode.CanFileNodesHaveChilds">
            <summary>
            Gets or sets the ability of a project filenode to have child nodes (sub items).
            Example would be C#/VB forms having resx and designer files.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Project.ProjectNode.FileTemplateProcessor">
            <summary>
            Get and set the Token processor.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Project.ProjectNode.Site">
            <summary>
            Gets a service provider object provided by the IDE hosting the project
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Project.ProjectNode.ImageHandler">
            <summary>
            Gets an ImageHandler for the project node.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Project.ProjectNode.LastModifiedTime">
            <summary>
            This property returns the time of the last change made to this project.
            It is not the time of the last change on the project file, but actually of
            the in memory project settings.  In other words, it is the last time that 
            SetProjectDirty was called.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Project.ProjectNode.IsNewProject">
            <summary>
            Determines whether this project is a new project.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Project.ProjectNode.ProjectFolder">
            <summary>
            Gets the path to the folder containing the project.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Project.ProjectNode.ProjectFile">
            <summary>
            Gets or sets the project filename.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Project.ProjectNode.BaseUri">
            <summary>
            Gets the Base Uniform Resource Identifier (URI).
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Project.ProjectNode.IsClosed">
            <summary>
            Gets whether or not the project is closed.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Project.ProjectNode.BuildInProgress">
            <summary>
            Gets whether or not the project is being built.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Project.ProjectNode.OutputBaseRelativePath">
            <summary>
            Gets or set the relative path to the folder containing the project ouput. 
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Project.ProjectNode.InteropSafeIVsHierarchy">
            <summary>
            Version of this node as an IVsHierarchy that can be safely passed to native code from a background thread. 
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Project.ProjectNode.InteropSafeIVsUIHierarchy">
            <summary>
            Version of this node as an IVsUIHierarchy that can be safely passed to native code from a background thread. 
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Project.ProjectNode.InteropSafeIVsProject3">
            <summary>
            Version of this node as an IVsProject3 that can be safely passed to native code from a background thread. 
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Project.ProjectNode.InteropSafeIVsSccProject2">
            <summary>
            Version of this node as an IVsSccProject2 that can be safely passed to native code from a background thread. 
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Project.ProjectNode.InteropSafeIVsUIHierWinClipboardHelperEvents">
            <summary>
            Version of this node as an IVsUIHierWinClipboardHelperEvents that can be safely passed to native code from a background thread. 
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Project.ProjectNode.DisableQueryEdit">
            <summary>
            Gets or sets the flag whether query edit should communicate with the scc manager.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Project.ProjectNode.ItemIdMap">
            <summary>
            Gets a collection of integer ids that maps to project item instances
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Project.ProjectNode.Tracker">
            <summary>
            Get the helper object that track document changes.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Project.ProjectNode.BuildLogger">
            <summary>
            Gets or sets the build logger.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Project.ProjectNode.TaskProvider">
            <summary>
            Gets the taskprovider.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Project.ProjectNode.FileName">
            <summary>
            Gets the project file name.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Project.ProjectNode.ConfigProvider">
            <summary>
            Gets the configuration provider.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Project.ProjectNode.IsSccDisabled">
            <summary>
            Gets or sets whether or not source code control is disabled for this project.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Project.ProjectNode.CanProjectDeleteItems">
            <summary>
            Gets or set whether items can be deleted for this project.
            Enabling this feature can have the potential destructive behavior such as deleting files from disk.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Project.ProjectNode.HasProjectOpened">
            <summary>
            Determines whether the project was fully opened. This is set when the OnAfterOpenProject has triggered.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Project.ProjectNode.EventTriggeringFlag">
            <summary>
            Gets or sets event triggering flags.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Project.ProjectNode.BuildProject">
            <summary>
            Defines the build project that has loaded the project file.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Project.ProjectNode.CurrentConfig">
            <summary>
            Gets the current config.
            </summary>
            <value>The current config.</value>
        </member>
        <member name="P:Microsoft.VisualStudio.Project.ProjectNode.BuildEngine">
            <summary>
            Defines the build engine that is used to build the project file.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Project.ProjectNode.Package">
            <summary>
            The internal package implementation.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Project.ProjectNode.ShowAllFilesEnabled">
            <summary>
            Gets if the ShowAllFiles is enabled or not.
            </summary>
            <value>true if the ShowAllFiles option is enabled, false otherwise.</value>
        </member>
        <member name="P:Microsoft.VisualStudio.Project.ProjectNode.Microsoft#VisualStudio#Project#IProjectEventsProvider#ProjectEventsProvider">
            <summary>
            Defines the provider for the project events
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Project.ProjectContainerNode.buildNestedProjectsOnBuild">
            <summary>
            Setting this flag to true will build all nested project when building this project
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Project.ProjectContainerNode.nestedProjectNodeReloader">
             <summary>
             Defines the listener that would listen on file changes on the nested project node.
             </summary>
            <devremark>			
            This might need a refactoring when nested projects can be added and removed by demand.
             </devremark>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.ProjectContainerNode.GetNestedHierarchy(System.UInt32,System.Guid@,System.IntPtr@,System.UInt32@)">
            <summary>
            Gets the nested hierarchy.
            </summary>
            <param name="itemId">The item id.</param>
            <param name="iidHierarchyNested">Identifier of the interface to be returned in ppHierarchyNested.</param>
            <param name="ppHierarchyNested">Pointer to the interface whose identifier was passed in iidHierarchyNested.</param>
            <param name="pItemId">Pointer to an item identifier of the root node of the nested hierarchy.</param>
            <returns>If the method succeeds, it returns S_OK. If it fails, it returns an error code. If ITEMID is not a nested hierarchy, this method returns E_FAIL.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.ProjectContainerNode.ReloadItem(System.UInt32,System.UInt32)">
            <summary>
            Called to reload a project item. 
            Reloads a project and its nested project nodes.
            </summary>
            <param name="itemId">Specifies itemid from VSITEMID.</param>
            <param name="reserved">Reserved.</param>
            <returns>If the method succeeds, it returns S_OK. If it fails, it returns an error code. </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.ProjectContainerNode.Reload">
            <summary>
            Reloads a project and its nested project nodes.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.ProjectContainerNode.EnumNestedHierachiesForBuildDependency">
            <summary>
            Enumerates the nested hierachies that should be added to the build dependency list.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.ProjectContainerNode.CreateNestedProjectNodes">
            <summary>
            This is used when loading the project to loop through all the items
            and for each SubProject it finds, it create the project and a node
            in our Hierarchy to hold the project.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.ProjectContainerNode.AddExistingNestedProject(Microsoft.VisualStudio.Project.ProjectElement,Microsoft.VisualStudio.Shell.Interop.__VSCREATEPROJFLAGS)">
            <summary>
            Add an existing project as a nested node of our hierarchy.
            This is used while loading the project and can also be used
            to add an existing project to our hierarchy.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.ProjectContainerNode.RunVSTemplateWizard(Microsoft.VisualStudio.Project.ProjectElement,System.Boolean)">
            <summary>
            Let the wizard code execute and provide us the information we need.
            Our SolutionFolder automation object should be called back with the
            details at which point it will call back one of our method to add
            a nested project.
            If you are trying to add a new subproject this is probably the
            method you want to call. If you are just trying to clone a template
            project file, then AddNestedProjectFromTemplate is what you want.
            </summary>
            <param name="element">The project item to use as the base of the nested project.</param>
            <param name="silent">true if the wizard should run silently, otherwise false.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.ProjectContainerNode.AddNestedProjectFromTemplate(Microsoft.VisualStudio.Project.ProjectElement,Microsoft.VisualStudio.Shell.Interop.__VSCREATEPROJFLAGS)">
            <summary>
            This will clone a template project file and add it as a
            subproject to our hierarchy.
            If you want to create a project for which there exist a
            vstemplate, consider using RunVsTemplateWizard instead.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.ProjectContainerNode.AddNestedProjectFromTemplate(System.String,System.String,System.String,Microsoft.VisualStudio.Project.ProjectElement,Microsoft.VisualStudio.Shell.Interop.__VSCREATEPROJFLAGS)">
            <summary>
            This can be called directly or through RunVsTemplateWizard.
            This will clone a template project file and add it as a
            subproject to our hierarchy.
            If you want to create a project for which there exist a
            vstemplate, consider using RunVsTemplateWizard instead.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.ProjectContainerNode.CreateNestedProjectNode(Microsoft.VisualStudio.Project.ProjectElement)">
            <summary>
            Override this method if you want to provide your own type of nodes.
            This would be the case if you derive a class from NestedProjectNode
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.ProjectContainerNode.AddVirtualProjects">
            <summary>
            Links the nested project nodes to the solution. The default implementation parses all nested project nodes and calles AddVirtualProjectEx on them.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.ProjectContainerNode.GetProjectTemplatePath(Microsoft.VisualStudio.Project.ProjectElement)">
            <summary>
            Based on the Template and TypeGuid properties of the
            element, generate the full template path.
            
            TypeGuid should be the Guid of a registered project factory.
            Template can be a full path, a project template (for projects
            that support VsTemplates) or a relative path (for other projects).
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.ProjectContainerNode.GetRegisteredProject(Microsoft.VisualStudio.Project.ProjectElement)">
            <summary>
            Get information from the registry based for the project 
            factory corresponding to the TypeGuid of the element
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.ProjectContainerNode.ReloadNestedProjectNode(Microsoft.VisualStudio.Project.NestedProjectNode)">
            <summary>
            Reloads a nested project node by deleting it and readding it.
            </summary>
            <param name="node">The node to reload.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.ProjectContainerNode.OnNestedProjectFileChangedOnDisk(System.Object,Microsoft.VisualStudio.Project.FileChangedOnDiskEventArgs)">
            <summary>
            Event callback. Called when one of the nested project files is changed.
            </summary>
            <param name="sender">The FileChangeManager object.</param>
            <param name="e">Event args containing the file name that was updated.</param>
        </member>
        <member name="P:Microsoft.VisualStudio.Project.ProjectContainerNode.NestedProjectNodeReloader">
            <summary>
            Returns teh object that handles listening to file changes on the nested project files.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Project.ProjectContainerNode.Object">
            <summary>
            This is the object that will be returned by EnvDTE.Project.Object for this project
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Project.ProjectContainerNode.BuildNestedProjectsOnBuild">
            <summary>
            Defines whether nested projects should be build with the parent project
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Project.ProjectDocumentsListener.Mutex">
            <summary>
            Defines an object that will be a mutex for this object for synchronizing thread calls.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.ProjectDocumentsListener.Dispose">
            <summary>
            The IDispose interface Dispose method for disposing the object determinastically.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.ProjectDocumentsListener.Dispose(System.Boolean)">
            <summary>
            The method that does the cleanup.
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="T:Microsoft.VisualStudio.Project.ProjectElement">
            <summary>
            This class represent a project item (usualy a file) and allow getting and
            setting attribute on it.
            This class allow us to keep the internal details of our items hidden from
            our derived classes.
            While the class itself is public so it can be manipulated by derived classes,
            its internal constructors make sure it can only be created from within the assembly.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.ProjectElement.#ctor(Microsoft.VisualStudio.Project.ProjectNode,System.String,System.String)">
            <summary>
            Constructor to create a new MSBuild.ProjectItem and add it to the project
            Only have internal constructors as the only one who should be creating
            such object is the project itself (see Project.CreateFileNode()).
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.ProjectElement.#ctor(Microsoft.VisualStudio.Project.ProjectNode,Microsoft.Build.Evaluation.ProjectItem,System.Boolean)">
            <summary>
            Constructor to Wrap an existing MSBuild.ProjectItem
            Only have internal constructors as the only one who should be creating
            such object is the project itself (see Project.CreateFileNode()).
            </summary>
            <param name="project">Project that owns this item</param>
            <param name="existingItem">an MSBuild.ProjectItem; can be null if virtualFolder is true</param>
            <param name="virtualFolder">Is this item virtual (such as reference folder)</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.ProjectElement.RemoveFromProjectFile">
            <summary>
            Calling this method remove this item from the project file.
            Once the item is delete, you should not longer be using it.
            Note that the item should be removed from the hierarchy prior to this call.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.ProjectElement.SetMetadata(System.String,System.String)">
            <summary>
            Set an attribute on the project element
            </summary>
            <param name="attributeName">Name of the attribute to set</param>
            <param name="attributeValue">Value to give to the attribute.  Use <c>null</c> to delete the metadata definition.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.ProjectElement.GetMetadata(System.String)">
            <summary>
            Get the value of an attribute on a project element
            </summary>
            <param name="attributeName">Name of the attribute to get the value for</param>
            <returns>Value of the attribute</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.ProjectElement.GetMetadataAndThrow(System.String,System.Exception)">
            <summary>
            Gets the attribute and throws the handed exception if the exception if the attribute is empty or null.
            </summary>
            <param name="attributeName">The name of the attribute to get.</param>
            <param name="exception">The exception to be thrown if not found or empty.</param>
            <returns>The attribute if found</returns>
            <remarks>The method will throw an Exception and neglect the passed in exception if the attribute is deleted</remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.ProjectElement.RefreshProperties">
            <summary>
            Reevaluate all properties for the current item
            This should be call if you believe the property for this item
            may have changed since it was created/refreshed, or global properties
            this items depends on have changed.
            Be aware that there is a perf cost in calling this function.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.ProjectElement.GetFullPathForElement">
            <summary>
            Return an absolute path for the passed in element.
            If the element is already an absolute path, it is returned.
            Otherwise, it is unrelativized using the project directory
            as the base.
            Note that any ".." in the paths will be resolved.
            
            For non-file system based project, it may make sense to override.
            </summary>
            <returns>FullPath</returns>
        </member>
        <member name="P:Microsoft.VisualStudio.Project.ProjectElement.HasItemBeenDeleted">
            <summary>
            Has the item been deleted
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Project.ProjectFactory">
            <summary>
            Creates projects within the solution
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Project.ProjectFactory.buildEngine">
            <summary>
            The msbuild engine that we are going to use.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Project.ProjectFactory.buildProject">
            <summary>
            The msbuild project for the project file.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.ProjectFactory.CreateProject(System.String,System.String,System.String,System.UInt32,System.Guid@,System.IntPtr@,System.Int32@)">
            <summary>
            Rather than directly creating the project, ask VS to initate the process of
            creating an aggregated project in case we are flavored. We will be called
            on the IVsAggregatableProjectFactory to do the real project creation.
            </summary>
            <param name="fileName">Project file</param>
            <param name="location">Path of the project</param>
            <param name="name">Project Name</param>
            <param name="flags">Creation flags</param>
            <param name="projectGuid">Guid of the project</param>
            <param name="project">Project that end up being created by this method</param>
            <param name="canceled">Was the project creation canceled</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.ProjectFactory.PreCreateForOuter(System.IntPtr)">
            <summary>
            Instantiate the project class, but do not proceed with the
            initialization just yet.
            Delegate to CreateProject implemented by the derived class.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.ProjectFactory.ProjectTypeGuids(System.String)">
            <summary>
            Retrives the list of project guids from the project file.
            If you don't want your project to be flavorable, override
            to only return your project factory Guid:
                 return this.GetType().GUID.ToString("B");
            </summary>
            <param name="file">Project file to look into to find the Guid list</param>
            <returns>List of semi-colon separated GUIDs</returns>
        </member>
        <member name="P:Microsoft.VisualStudio.Project.ProjectFactory.BuildEngine">
            <summary>
            The msbuild engine that we are going to use.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Project.ProjectFactory.BuildProject">
            <summary>
            The msbuild project for the temporary project file.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Project.ProjectFileConstants">
            <summary>
            Defines the constant strings used with project files.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Project.ProjectOptions.CodePage">
            <devdoc>must be an int if not null</devdoc>
        </member>
        <member name="P:Microsoft.VisualStudio.Project.ProjectOptions.UserLocaleId">
            <devdoc>must be an int if not null.</devdoc>
        </member>
        <member name="T:Microsoft.VisualStudio.Project.ProjectPackage">
            <summary>
            Defines abstract package.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Project.ProjectPackage.solutionListeners">
            <summary>
            This is the place to register all the solution listeners.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Project.ProjectPackage._initialized">
            <summary>
            This field is set to <see langword="true"/> when <see cref="M:Microsoft.VisualStudio.Project.ProjectPackage.Initialize"/> is called,
            indicating that the reference count in <see cref="F:Microsoft.VisualStudio.Project.ProjectPackage._singleFileGeneratorNodeExtenderReferenceCount"/>
            has been incremented and needs to be decremented when <see cref="M:Microsoft.VisualStudio.Project.ProjectPackage.Dispose(System.Boolean)"/> is called.
            </summary>
            <remarks>
            Once set to <see langword="true"/>, this field is never altered. The <see cref="F:Microsoft.VisualStudio.Project.ProjectPackage._disposed"/>
            field tracks whether a call to <see cref="M:Microsoft.VisualStudio.Project.ProjectPackage.Dispose(System.Boolean)"/> has occurred.
            </remarks>
        </member>
        <member name="F:Microsoft.VisualStudio.Project.ProjectPackage._disposed">
            <summary>
            This field is set to <see langword="true"/> when <see cref="M:Microsoft.VisualStudio.Project.ProjectPackage.Dispose(System.Boolean)"/> is called,
            indicating that the reference count in <see cref="F:Microsoft.VisualStudio.Project.ProjectPackage._singleFileGeneratorNodeExtenderReferenceCount"/>
            has been decremented (if required), and should not be decremented again if <see cref="M:Microsoft.VisualStudio.Project.ProjectPackage.Dispose(System.Boolean)"/>
            is called multiple times.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Project.ProjectPackage._singleFileGeneratorNodeExtenderReferenceCount">
            <summary>
            This field tracks the reference count for the number of <see cref="T:Microsoft.VisualStudio.Project.ProjectPackage"/> instances
            which are initialized and need the <see cref="F:Microsoft.VisualStudio.Project.ProjectPackage._singleFileGeneratorNodeExtenderProvider"/>
            object to be registered with the <see cref="T:EnvDTE.ObjectExtenders"/> service.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Project.ProjectPackage.SolutionListeners">
            <summary>
            Add your listener to this list. They should be added in the overridden Initialize befaore calling the base.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Project.ProjectReferenceNode.referencedProjectGuid">
            <summary>
            The name of the assembly this refernce represents
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Project.ProjectReferenceNode.referencedProject">
            <summary>
            This is a reference to the automation object for the referenced project.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Project.ProjectReferenceNode.canRemoveReference">
            <summary>
            This state is controlled by the solution events.
            The state is set to false by OnBeforeUnloadProject.
            The state is set to true by OnBeforeCloseProject event.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Project.ProjectReferenceNode.isNodeValid">
            <summary>
            Possibility for solution listener to update the state on the dangling reference.
            It will be set in OnBeforeUnloadProject then the nopde is invalidated then it is reset to false.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.ProjectReferenceNode.#ctor(Microsoft.VisualStudio.Project.ProjectNode,Microsoft.VisualStudio.Project.ProjectElement)">
            <summary>
            Constructor for the ReferenceNode. It is called when the project is reloaded, when the project element representing the refernce exists. 
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.ProjectReferenceNode.#ctor(Microsoft.VisualStudio.Project.ProjectNode,System.String,System.String,System.String)">
            <summary>
            constructor for the ProjectReferenceNode
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.ProjectReferenceNode.AddReference">
            <summary>
            The node is added to the hierarchy and then updates the build dependency list.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.ProjectReferenceNode.Remove(System.Boolean)">
            <summary>
            Overridden method. The method updates the build dependency list before removing the node from the hierarchy.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.ProjectReferenceNode.BindReferenceData">
            <summary>
            Links a reference node to the project file.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.ProjectReferenceNode.CanShowDefaultIcon">
            <summary>
            Defines whether this node is valid node for painting the refererence icon.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.ProjectReferenceNode.CanAddReference(Microsoft.VisualStudio.Project.ReferenceNode.CannotAddReferenceErrorMessage@)">
            <summary>
            Checks if a project reference can be added to the hierarchy. It calls base to see if the reference is not already there, then checks for circular references.
            </summary>
            <param name="errorHandler">The error handler delegate to return</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.ProjectReferenceNode.IsReferenceInCycle(System.Guid)">
            <summary>
            Checks whether a reference added to a given project would introduce a circular dependency.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Project.ProjectReferenceNode.IsNodeValid">
            <summary>
            Possiblity to shortcut and set the dangling project reference icon.
            It is ussually manipulated by solution listsneres who handle reference updates.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Project.ProjectReferenceNode.CanRemoveReference">
            <summary>
            Controls the state whether this reference can be removed or not. Think of the project unload scenario where the project reference should not be deleted.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Project.ProjectReferenceNode.ReferencedProjectObject">
            <summary>
            Gets the automation object for the referenced project.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Project.ProjectReferenceNode.ReferencedProjectOutputPath">
            <summary>
            Gets the full path to the assembly generated by this project.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Project.PropertiesEditorLauncher">
            <summary>
            This class is used to enable launching the project properties
            editor from the Properties Browser.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.PropertiesEditorLauncher.EditComponent(System.ComponentModel.ITypeDescriptorContext,System.Object)">
            <summary>
            Launch the Project Properties Editor (properties pages)
            </summary>
            <returns>If we succeeded or not</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.ReferenceContainerNode.GetAutomationObject">
            <summary>
            Returns an instance of the automation object for ReferenceContainerNode
            </summary>
            <returns>An intance of the Automation.OAReferenceFolderItem type if succeeeded</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.ReferenceContainerNode.GetEditLabel">
            <summary>
            Disable inline editing of Caption of a ReferendeContainerNode
            </summary>
            <returns>null</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.ReferenceContainerNode.PrepareSelectedNodesForClipboard">
            <summary>
            References node cannot be dragged.
            </summary>
            <returns>A stringbuilder.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.ReferenceContainerNode.ExcludeFromProject">
            <summary>
            Not supported.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.ReferenceContainerNode.CanShowDefaultIcon">
            <summary>
            Defines whether this node is valid node for painting the refererences icon.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.ReferenceContainerNode.LoadReferencesFromBuildProject(Microsoft.Build.Evaluation.Project)">
            <summary>
            Adds references to this container from a MSBuild project.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.ReferenceContainerNode.AddReferenceFromSelectorData(Microsoft.VisualStudio.Shell.Interop.VSCOMPONENTSELECTORDATA)">
            <summary>
            Adds a reference to this container using the selector data structure to identify it.
            </summary>
            <param name="selectorData">data describing selected component</param>
            <returns>Reference in case of a valid reference node has been created. Otherwise null</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.ReferenceContainerNode.AddReferenceFromSelectorData(Microsoft.VisualStudio.Shell.Interop.VSCOMPONENTSELECTORDATA,System.String)">
            <summary>
            Adds a reference to this container using the selector data structure to identify it.
            </summary>
            <param name="selectorData">data describing selected component</param>
            <returns>Reference in case of a valid reference node has been created. Otherwise null</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.ReferenceContainerNode.CreateProjectReferenceNode(Microsoft.VisualStudio.Project.ProjectElement)">
            <summary>
            Creates a project reference node given an existing project element.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.ReferenceContainerNode.CreateProjectReferenceNode(Microsoft.VisualStudio.Shell.Interop.VSCOMPONENTSELECTORDATA)">
            <summary>
            Create a Project to Project reference given a VSCOMPONENTSELECTORDATA structure
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.ReferenceContainerNode.CreateFileComponent(Microsoft.VisualStudio.Shell.Interop.VSCOMPONENTSELECTORDATA)">
            <summary>
            Creates an assemby or com reference node given a selector data.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.ReferenceContainerNode.CreateFileComponent(Microsoft.VisualStudio.Shell.Interop.VSCOMPONENTSELECTORDATA,System.String)">
            <summary>
            Creates an assemby or com reference node given a selector data.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.ReferenceContainerNode.CreateAssemblyReferenceNode(Microsoft.VisualStudio.Project.ProjectElement)">
            <summary>
            Creates an assembly refernce node from a project element.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.ReferenceContainerNode.CreateAssemblyReferenceNode(System.String)">
            <summary>
            Creates an assembly reference node from a file path.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.ReferenceContainerNode.CreateComReferenceNode(Microsoft.VisualStudio.Project.ProjectElement)">
            <summary>
            Creates a com reference node from the project element.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.ReferenceContainerNode.CreateComReferenceNode(Microsoft.VisualStudio.Shell.Interop.VSCOMPONENTSELECTORDATA)">
            <summary>
            Creates a com reference node from a selector data.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.ReferenceContainerNode.CreateComReferenceNode(Microsoft.VisualStudio.Shell.Interop.VSCOMPONENTSELECTORDATA,System.String)">
            <summary>
            Creates a com reference node from a selector data.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Project.RegisteredProjectType">
            <summary>
            Gets registry settings from for a project.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.RegisteredProjectType.GetVSTemplateFile(System.String)">
            <summary>
            If the project support VsTemplates, returns the path to
            the vstemplate file corresponding to the requested template
            
            You can pass in a string such as: "Windows\Console Application"
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Project.SelectionListener.Mutex">
            <summary>
            Defines an object that will be a mutex for this object for synchronizing thread calls.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.SelectionListener.Dispose">
            <summary>
            The IDispose interface Dispose method for disposing the object determinastically.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.SelectionListener.Dispose(System.Boolean)">
            <summary>
            The method that does the cleanup.
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="T:Microsoft.VisualStudio.Project.SingleFileGenerator">
            <summary>
            Provides support for single file generator.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.SingleFileGenerator.#ctor(Microsoft.VisualStudio.Project.ProjectNode)">
            <summary>
            Overloadde ctor.
            </summary>
            <param name="ProjectNode">The associated project</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.SingleFileGenerator.RunGenerator(System.String)">
            <summary>
            Runs the generator on the current project item.
            </summary>
            <param name="document"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.SingleFileGenerator.InvokeGenerator(Microsoft.VisualStudio.Project.FileNode)">
            <summary>
            Invokes the specified generator
            </summary>
            <param name="fileNode">The node on which to invoke the generator.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.SingleFileGenerator.ComputeNamespace(System.String)">
            <summary>
            Computes the names space based on the folder for the ProjectItem. It just replaces DirectorySeparatorCharacter
            with "." for the directory in which the file is located.
            </summary>
            <returns>Returns the computed name space</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.SingleFileGenerator.UpdateGeneratedCodeFile(Microsoft.VisualStudio.Project.FileNode,System.Byte[],System.Int32,System.String)">
            <summary>
            This is called after the single file generator has been invoked to create or update the code file.
            </summary>
            <param name="fileNode">The node associated to the generator</param>
            <param name="data">data to update the file with</param>
            <param name="size">size of the data</param>
            <param name="fileName">Name of the file to update or create</param>
            <returns>full path of the file</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.SingleFileGenerator.GetBufferContents(System.String,Microsoft.VisualStudio.TextManager.Interop.IVsTextStream@)">
            <summary>
            Returns the buffer contents for a moniker.
            </summary>
            <returns>Buffer contents</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.SingleFileGenerator.VerifyFileDirtyInRdt(System.String,Microsoft.VisualStudio.Shell.Interop.IVsHierarchy@,Microsoft.VisualStudio.Shell.Interop.IVsPersistDocData@,System.UInt32@)">
            <summary>
            Returns TRUE if open and dirty. Note that documents can be open without a
            window frame so be careful. Returns the DocData and doc cookie if requested
            </summary>
            <param name="document">document path</param>
            <param name="pHier">hierarchy</param>
            <param name="ppDocData">doc data associated with document</param>
            <param name="cookie">item cookie</param>
            <returns>True if FIle is dirty</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.SingleFileGenerator.CanEditFile(System.String)">
            <summary>
            This function asks to the QueryEditQuerySave service if it is possible to
            edit the file.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Project.SolutionListener.Mutex">
            <summary>
            Defines an object that will be a mutex for this object for synchronizing thread calls.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.SolutionListener.OnQueryChangeProjectParent(Microsoft.VisualStudio.Shell.Interop.IVsHierarchy,Microsoft.VisualStudio.Shell.Interop.IVsHierarchy,System.Int32@)">
            <summary>
            Fired before a project is moved from one parent to another in the solution explorer
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.SolutionListener.Dispose">
            <summary>
            The IDispose interface Dispose method for disposing the object determinastically.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.SolutionListener.Dispose(System.Boolean)">
            <summary>
            The method that does the cleanup.
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="T:Microsoft.VisualStudio.Project.SolutionListenerForBuildDependencyUpdate">
            <summary>
            The purpose of this class is to set a build dependency from a modeling project to all its sub projects
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.SolutionListenerForBuildDependencyUpdate.OnAfterOpenProject(Microsoft.VisualStudio.Shell.Interop.IVsHierarchy,System.Int32)">
            <summary>
            Update build dependency list if solution is fully loaded
            </summary>
            <param name="hierarchy"></param>
            <param name="added"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.SolutionListenerForBuildDependencyUpdate.OnAfterOpenSolution(System.Object,System.Int32)">
            <summary>
            Called at load time when solution has finished opening.
            </summary>
            <param name="pUnkReserved">reserved</param>
            <param name="fNewSolution">true if this is a new solution</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.SolutionListenerForBuildDependencyUpdate.UpdateDependencyListWithSubProjects(Microsoft.VisualStudio.Project.IBuildDependencyOnProjectContainer)">
            <summary>
            Update dependency list
            </summary>
            <param name="projectNode">Project node to be updated. If null then all ProjectContainer nodes are updated</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.SolutionListenerForBuildDependencyUpdate.GetListOfProjectContainerNodes">
            <summary>
            Enum all projects in the solution and collect all that derives from ProjectContainerNode
            </summary>
            <returns>List of ProjectContainerNode nodes</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.SolutionListenerForBuildDependencyUpdate.AddBuildDependenyToNestedProject(Microsoft.VisualStudio.Project.IBuildDependencyUpdate,Microsoft.VisualStudio.Shell.Interop.IVsHierarchy)">
            <summary>
            Add build dependency to ProjectContainerNode if IVsBuildDependency is supported by the nested project
            </summary>
            <param name="projectContainer">Project Container where we should add the build dependency</param>
            <param name="nestedProject">Nested project to set a build dependency against</param>
        </member>
        <member name="T:Microsoft.VisualStudio.Project.SolutionListenerForProjectEvents">
            <summary>
            This class triggers the project events for "our" hierrachies.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.SolutionListenerForProjectEvents.RaiseAfterProjectFileOpened(System.Boolean)">
            <summary>
            Raises after project file opened event.
            </summary>
            <param name="added">True if the project is added to the solution after the solution is opened. false if the project is added to the solution while the solution is being opened.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.SolutionListenerForProjectEvents.RaiseBeforeProjectFileClosed(System.Boolean)">
            <summary>
            Raises the before  project file closed event.
            </summary>
            <param name="added">true if the project was removed from the solution before the solution was closed. false if the project was removed from the solution while the solution was being closed.</param>
        </member>
        <!-- Badly formed XML comment ignored for member "E:Microsoft.VisualStudio.Project.SolutionListenerForProjectEvents.ProjectFileOpened" -->
        <member name="E:Microsoft.VisualStudio.Project.SolutionListenerForProjectEvents.ProjectFileClosing">
            <summary>
            Event raised before the project file closed.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.SolutionListenerForProjectReferenceUpdate.OnBeforeCloseProject(Microsoft.VisualStudio.Shell.Interop.IVsHierarchy,System.Int32)">
            <summary>
            Delete this project from the references of projects of this type, if it is found.
            </summary>
            <param name="hierarchy"></param>
            <param name="removed"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.SolutionListenerForProjectReferenceUpdate.OnAfterLoadProject(Microsoft.VisualStudio.Shell.Interop.IVsHierarchy,Microsoft.VisualStudio.Shell.Interop.IVsHierarchy)">
            <summary>
            Needs to update the dangling reference on projects that contain this hierarchy as project reference.
            </summary>
            <param name="stubHierarchy"></param>
            <param name="realHierarchy"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Project.SuspendFileChanges">
            <summary>
            helper to make the editor ignore external changes
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Project.TokenProcessor">
            <summary>
            Contain a number of functions that handle token replacement
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.TokenProcessor.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.TokenProcessor.Reset">
            <summary>
            Reset list of TokenReplacer entries
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.TokenProcessor.AddReplace(System.String,System.String)">
            <summary>
            Add a replacement type entry
            </summary>
            <param name="token">token to replace</param>
            <param name="replacement">replacement string</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.TokenProcessor.AddReplaceBetween(System.String,System.String,System.String,System.String)">
            <summary>
            Add replace between entry
            </summary>
            <param name="tokenStart">Start token</param>
            <param name="tokenEnd">End token</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.TokenProcessor.AddDelete(System.String)">
            <summary>
            Add a deletion entry
            </summary>
            <param name="tokenToDelete">Token to delete</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.TokenProcessor.UntokenFile(System.String,System.String)">
            <summary>
            For all known token, replace token with correct value
            </summary>
            <param name="source">File of the source file</param>
            <param name="destination">File of the destination file</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.TokenProcessor.ReplaceTokens(System.String@,Microsoft.VisualStudio.Project.ReplacePairToken)">
            <summary>
            Replaces the tokens in a buffer with the replacement string
            </summary>
            <param name="buffer">Buffer to update</param>
            <param name="tokenToReplace">replacement data</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.TokenProcessor.DeleteTokens(System.String@,Microsoft.VisualStudio.Project.DeleteToken)">
            <summary>
            Deletes the token from the buffer
            </summary>
            <param name="buffer">Buffer to update</param>
            <param name="tokenToDelete">token to delete</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.TokenProcessor.ReplaceBetweenTokens(System.String@,Microsoft.VisualStudio.Project.ReplaceBetweenPairToken)">
            <summary>
            Replaces the token from the buffer between the provided tokens
            </summary>
            <param name="buffer">Buffer to update</param>
            <param name="rpBetweenToken">replacement token</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.TokenProcessor.GuidToForm1(System.Guid)">
            <summary>
            Generates a string representation of a guid with the following format:
            0x01020304, 0x0506, 0x0708, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F, 0x10
            </summary>
            <param name="value">Guid to be generated</param>
            <returns>The guid as string</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.TokenProcessor.IsValidIdentifierChar(System.Char)">
            <summary>
            This function will accept a subset of the characters that can create an
            identifier name: there are other unicode char that can be inside the name, but
            this function will not allow. By now it can work this way, but when and if the
            VSIP package will handle also languages different from english, this function
            must be changed.
            </summary>
            <param name="c">Character to validate</param>
            <returns>true if successful false otherwise</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.TokenProcessor.IsValidIdentifierStartChar(System.Char)">
            <summary>
            Verifies if the start character is valid
            </summary>
            <param name="c">Start character</param>
            <returns>true if successful false otherwise</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.TokenProcessor.GetFileNamespace(System.String,Microsoft.VisualStudio.Project.ProjectNode)">
            <summary>
            The goal here is to reduce the risk of name conflict between 2 classes
            added in different directories. This code does NOT garanty uniqueness.
            To garanty uniqueness, you should change this function to work with
            the language service to verify that the namespace+class generated does
            not conflict.
            </summary>
            <param name="fileFullPath">Full path to the new file</param>
            <returns>Namespace to use for the new file</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Project.TrackDocumentsHelper">
            <summary>
            Used by a project to query the environment for permission to add, remove, or rename a file or directory in a solution
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.TrackDocumentsHelper.GetIVsTrackProjectDocuments2">
            <summary>
            Gets the IVsTrackProjectDocuments2 object by asking the service provider for it.
            </summary>
            <returns>the IVsTrackProjectDocuments2 object</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.TrackDocumentsHelper.CanAddItems(System.String[],Microsoft.VisualStudio.Shell.Interop.VSQUERYADDFILEFLAGS[])">
            <summary>
            Asks the environment for permission to add files.
            </summary>
            <param name="files">The files to add.</param>
            <param name="flags">The VSQUERYADDFILEFLAGS flags associated to the files added</param>
            <returns>true if the file can be added, false if not.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.TrackDocumentsHelper.OnItemAdded(System.String,Microsoft.VisualStudio.Shell.Interop.VSADDFILEFLAGS)">
            <summary>
            Notify the environment about a file just added
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.TrackDocumentsHelper.CanRemoveItems(System.String[],Microsoft.VisualStudio.Shell.Interop.VSQUERYREMOVEFILEFLAGS[])">
            <summary>
             Asks the environment for permission to remove files.
            </summary>
            <param name="files">an array of files to remove</param>
            <param name="flags">The VSQUERYREMOVEFILEFLAGS associated to the files to be removed.</param>
            <returns>true if the files can be removed, false if not.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.TrackDocumentsHelper.OnItemRemoved(System.String,Microsoft.VisualStudio.Shell.Interop.VSREMOVEFILEFLAGS)">
            <summary>
            Notify the environment about a file just removed
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.TrackDocumentsHelper.CanRenameItem(System.String,System.String,Microsoft.VisualStudio.Shell.Interop.VSRENAMEFILEFLAGS)">
            <summary>
             Asks the environment for permission to rename files.
            </summary>
            <param name="oldFileName">Path to the file to be renamed.</param>
            <param name="newFileName">Path to the new file.</param>
            <param name="flag">The VSRENAMEFILEFLAGS associated with the file to be renamed.</param>
            <returns>true if the file can be renamed. Otherwise false.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.TrackDocumentsHelper.OnItemRenamed(System.String,System.String,Microsoft.VisualStudio.Shell.Interop.VSRENAMEFILEFLAGS)">
            <summary>
            Get's called to tell the env that a file was renamed
            </summary>
            
        </member>
        <member name="T:Microsoft.VisualStudio.Project.UpdateSolutionEventsListener">
            <summary>
            Defines an abstract class implementing IVsUpdateSolutionEvents interfaces.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Project.UpdateSolutionEventsListener.solutionEvents2Cookie">
            <summary>
            The cookie associated to the the events based IVsUpdateSolutionEvents2.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Project.UpdateSolutionEventsListener.solutionEvents3Cookie">
            <summary>
            The cookie associated to the theIVsUpdateSolutionEvents3 events.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Project.UpdateSolutionEventsListener.solutionBuildManager">
            <summary>
            The IVsSolutionBuildManager2 object controlling the update solution events.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Project.UpdateSolutionEventsListener.serviceProvider">
            <summary>
            The associated service provider.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Project.UpdateSolutionEventsListener.isDisposed">
            <summary>
            Flag determining if the object has been disposed.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Project.UpdateSolutionEventsListener.Mutex">
            <summary>
            Defines an object that will be a mutex for this object for synchronizing thread calls.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.UpdateSolutionEventsListener.#ctor(System.IServiceProvider)">
            <summary>
            Overloaded constructor.
            </summary>
            <param name="serviceProvider">A service provider.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.UpdateSolutionEventsListener.OnAfterActiveSolutionCfgChange(Microsoft.VisualStudio.Shell.Interop.IVsCfg,Microsoft.VisualStudio.Shell.Interop.IVsCfg)">
            <summary>
            Fired after the active solution config is changed (pOldActiveSlnCfg can be NULL).
            </summary>
            <param name="oldActiveSlnCfg">Old configuration.</param>
            <param name="newActiveSlnCfg">New configuration.</param>
            <returns>If the method succeeds, it returns S_OK. If it fails, it returns an error code.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.UpdateSolutionEventsListener.OnBeforeActiveSolutionCfgChange(Microsoft.VisualStudio.Shell.Interop.IVsCfg,Microsoft.VisualStudio.Shell.Interop.IVsCfg)">
            <summary>
            Fired before the active solution config is changed (pOldActiveSlnCfg can be NULL
            </summary>
            <param name="oldActiveSlnCfg">Old configuration.</param>
            <param name="newActiveSlnCfg">New configuration.</param>
            <returns>If the method succeeds, it returns S_OK. If it fails, it returns an error code.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.UpdateSolutionEventsListener.OnActiveProjectCfgChange(Microsoft.VisualStudio.Shell.Interop.IVsHierarchy)">
            <summary>
            Called when the active project configuration for a project in the solution has changed. 
            </summary>
            <param name="hierarchy">The project whose configuration has changed.</param>
            <returns>If the method succeeds, it returns S_OK. If it fails, it returns an error code.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.UpdateSolutionEventsListener.UpdateProjectCfg_Begin(Microsoft.VisualStudio.Shell.Interop.IVsHierarchy,Microsoft.VisualStudio.Shell.Interop.IVsCfg,Microsoft.VisualStudio.Shell.Interop.IVsCfg,System.UInt32,System.Int32@)">
            <summary>
            Called right before a project configuration begins to build. 
            </summary>
            <param name="hierarchy">The project that is to be build.</param>
            <param name="configProject">A configuration project object.</param>
            <param name="configSolution">A configuration solution object.</param>
            <param name="action">The action taken.</param>
            <param name="cancel">A flag indicating cancel.</param>
            <returns>If the method succeeds, it returns S_OK. If it fails, it returns an error code.</returns>
            <remarks>The values for the action are defined in the enum _SLNUPDACTION env\msenv\core\slnupd2.h</remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.UpdateSolutionEventsListener.UpdateProjectCfg_Done(Microsoft.VisualStudio.Shell.Interop.IVsHierarchy,Microsoft.VisualStudio.Shell.Interop.IVsCfg,Microsoft.VisualStudio.Shell.Interop.IVsCfg,System.UInt32,System.Int32,System.Int32)">
            <summary>
            Called right after a project configuration is finished building. 
            </summary>
            <param name="hierarchy">The project that has finished building.</param>
            <param name="configProject">A configuration project object.</param>
            <param name="configSolution">A configuration solution object.</param>
            <param name="action">The action taken.</param>
            <param name="success">Flag indicating success.</param>
            <param name="cancel">Flag indicating cancel.</param>
            <returns>If the method succeeds, it returns S_OK. If it fails, it returns an error code.</returns>
            <remarks>The values for the action are defined in the enum _SLNUPDACTION env\msenv\core\slnupd2.h</remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.UpdateSolutionEventsListener.UpdateSolution_Begin(System.Int32@)">
            <summary>
            Called before any build actions have begun. This is the last chance to cancel the build before any building begins. 
            </summary>
            <param name="cancelUpdate">Flag indicating cancel update.</param>
            <returns>If the method succeeds, it returns S_OK. If it fails, it returns an error code.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.UpdateSolutionEventsListener.UpdateSolution_Cancel">
            <summary>
            Called when a build is being cancelled. 
            </summary>
            <returns>If the method succeeds, it returns S_OK. If it fails, it returns an error code.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.UpdateSolutionEventsListener.UpdateSolution_Done(System.Int32,System.Int32,System.Int32)">
            <summary>
            Called when a build is completed. 
            </summary>
            <param name="succeeded">true if no update actions failed.</param>
            <param name="modified">true if any update action succeeded.</param>
            <param name="cancelCommand">true if update actions were canceled.</param>
            <returns>If the method succeeds, it returns S_OK. If it fails, it returns an error code.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.UpdateSolutionEventsListener.UpdateSolution_StartUpdate(System.Int32@)">
            <summary>
            Called before the first project configuration is about to be built. 
            </summary>
            <param name="cancelUpdate">A flag indicating cancel update.</param>
            <returns>If the method succeeds, it returns S_OK. If it fails, it returns an error code.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.UpdateSolutionEventsListener.Dispose">
            <summary>
            The IDispose interface Dispose method for disposing the object determinastically.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.UpdateSolutionEventsListener.Dispose(System.Boolean)">
            <summary>
            The method that does the cleanup.
            </summary>
            <param name="disposing">true if called from IDispose.Dispose; false if called from Finalizer.</param>
        </member>
        <member name="P:Microsoft.VisualStudio.Project.UpdateSolutionEventsListener.ServiceProvider">
            <summary>
            The associated service provider.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Project.UpdateSolutionEventsListener.SolutionBuildManager2">
            <summary>
            The solution build manager object controlling the solution events.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Project.UpdateSolutionEventsListener.SolutionBuildManager3">
            <summary>
            The solution build manager object controlling the solution events.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.Utilities.GetMSBuildPath(System.IServiceProvider)">
            <summary>
            Look in the registry under the current hive for the path
            of MSBuild
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.Utilities.GetMSBuildPath(System.IServiceProvider,System.String)">
            <summary>
            Search the registry for the tools path for MSBuild.
            </summary>
            <param name="serviceProvider">The service provider.</param>
            <param name="version">Msbuild version.</param>
            <returns>The msbuild tools path</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.Utilities.IsVisualStudioInDesignMode(System.IServiceProvider)">
            <summary>
            Is Visual Studio in design mode.
            </summary>
            <param name="serviceProvider">The service provider.</param>
            <returns>true if visual studio is in design mode</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.Utilities.IsInAutomationFunction(System.IServiceProvider)">
            <!-- Failed to insert some or all of included XML --><include file="doc\VsShellUtilities.uex" path="docs/doc[@for=&quot;Utilities.IsInAutomationFunction&quot;]/*"/>
            <devdoc>
            Is an extensibility object executing an automation function.
            </devdoc>
            <param name="serviceProvider">The service provider.</param>
            <returns>true if the extensiblity object is executing an automation function.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.Utilities.CreateSemicolonDelimitedListOfStringFromGuids(System.Guid[])">
            <summary>
            Creates a semicolon delinited list of strings. This can be used to provide the properties for VSHPROPID_CfgPropertyPagesCLSIDList, VSHPROPID_PropertyPagesCLSIDList, VSHPROPID_PriorityPropertyPagesCLSIDList
            </summary>
            <param name="guids">An array of Guids.</param>
            <returns>A semicolon delimited string, or null</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.Utilities.GuidsArrayFromSemicolonDelimitedStringOfGuids(System.String)">
            <summary>
            Take list of guids as a single string and generate an array of Guids from it
            </summary>
            <param name="guidList">Semi-colon separated list of Guids</param>
            <returns>Array of Guids</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.Utilities.ValidateFileName(System.IServiceProvider,System.String)">
            <summary>
            Validates a file path by validating all file parts. If the 
            the file name is invalid it throws an exception if the project is in automation. Otherwise it shows a dialog box with the error message.
            </summary>
            <param name="serviceProvider">The service provider</param>
            <param name="filePath">A full path to a file name</param>
            <exception cref="T:System.InvalidOperationException">In case of failure an InvalidOperationException is thrown.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.Utilities.CreateCALPOLESTR(System.Collections.Generic.IList{System.String})">
            <summary>
            Creates a CALPOLESTR from a list of strings 
            It is the responsability of the caller to release this memory.
            </summary>
            <param name="guids"></param>
            <returns>A CALPOLESTR that was created from the the list of strings.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.Utilities.CreateCADWORD(System.Collections.Generic.IList{Microsoft.VisualStudio.Shell.Interop.tagVsSccFilesFlags})">
            <summary>
            Creates a CADWORD from a list of tagVsSccFilesFlags. Memory is allocated for the elems. 
            It is the responsability of the caller to release this memory.
            </summary>
            <param name="guids"></param>
            <returns>A CADWORD created from the list of tagVsSccFilesFlags.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.Utilities.GetImageList(System.IO.Stream)">
            <summary>
            Splits a bitmap from a Stream into an ImageList
            </summary>
            <param name="imageStream">A Stream representing a Bitmap</param>
            <returns>An ImageList object representing the images from the given stream</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.Utilities.GetImageList(System.Object)">
            <summary>
            Splits a bitmap from a pointer to an ImageList
            </summary>
            <param name="imageListAsPointer">A pointer to a bitmap of images to split</param>
            <returns>An ImageList object representing the images from the given stream</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.Utilities.GetActiveConfigurationName(EnvDTE.Project)">
            <summary>
            Gets the active configuration name.
            </summary>
            <param name="automationObject">The automation object.</param>
            <returns>The name of the active configuartion.</returns>		
        </member>
        <member name="M:Microsoft.VisualStudio.Project.Utilities.GetActivePlatformName(EnvDTE.Project)">
            <summary>
            Gets the active configuration name.
            </summary>
            <param name="automationObject">The automation object.</param>
            <returns>The name of the active configuartion.</returns>		
        </member>
        <member name="M:Microsoft.VisualStudio.Project.Utilities.IsSameComObject(System.Object,System.Object)">
            <summary>
            Verifies that two objects represent the same instance of a COM object.
            This essentially compares the IUnkown pointers of the 2 objects.
            This is needed in scenario where aggregation is involved.
            </summary>
            <param name="obj1">Can be an object, interface or IntPtr</param>
            <param name="obj2">Can be an object, interface or IntPtr</param>
            <returns>True if the 2 items represent the same thing</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.Utilities.QueryInterfaceIUnknown(System.Object)">
            <summary>
            Retrieve the IUnknown for the managed or COM object passed in.
            </summary>
            <param name="objToQuery">Managed or COM object.</param>
            <returns>Pointer to the IUnknown interface of the object.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.Utilities.ContainsInvalidFileNameChars(System.String)">
            <summary>
            Returns true if thename that can represent a path, absolut or relative, or a file name contains invalid filename characters.
            </summary>
            <param name="name">File name</param>
            <returns>true if file name is invalid</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Microsoft.VisualStudio.Project.Utilities.IsFileNameInvalid(System.String)" -->
        <member name="M:Microsoft.VisualStudio.Project.Utilities.ConvertToType``1(``0,System.Type,System.Globalization.CultureInfo)">
            <summary>
            Helper method to call a converter explicitely to convert to an enum type
            </summary>
            <typeparam name="T">THe enum to convert to</typeparam>
            <typeparam name="V">The converter that will be created</typeparam>
            <param name="value">The enum value to be converted to</param>
            <param name="typeToConvert">The type to convert</param>
            <param name="culture">The culture to use to read the localized strings</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.Utilities.ConvertFromType``1(System.String,System.Globalization.CultureInfo)">
            <summary>
            Helper method for converting from a string to an enum using a converter.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value"></param>
            <param name="culture">The culture to use to read the localized strings</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.Utilities.SetStringValueFromConvertedEnum``1(``0,System.Globalization.CultureInfo)">
            <summary>
            Sets a string value from an enum
            </summary>
            <typeparam name="T">The enum type</typeparam>
            <param name="enumValue">The value of teh enum.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.Utilities.InitializeMsBuildProject(Microsoft.Build.Evaluation.ProjectCollection,System.String)">
            <summary>
            Initializes the in memory project. Sets BuildEnabled on the project to true.
            </summary>
            <param name="engine">The build engine to use to create a build project.</param>
            <param name="fullProjectPath">The full path of the project.</param>
            <returns>A loaded msbuild project.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.Utilities.ReinitializeMsBuildProject(Microsoft.Build.Evaluation.ProjectCollection,System.String,Microsoft.Build.Evaluation.Project)">
            <summary>
            Loads a project file for the file. If the build project exists and it was loaded with a different file then it is unloaded first. 
            </summary>
            <param name="engine">The build engine to use to create a build project.</param>
            <param name="fullProjectPath">The full path of the project.</param>
            <param name="exitingBuildProject">An Existing build project that will be reloaded.</param>
            <returns>A loaded msbuild project.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.Utilities.InitializeMsBuildEngine(Microsoft.Build.Evaluation.ProjectCollection,System.IServiceProvider)">
            <summary>
            Initialize the build engine. Sets the build enabled property to true. The engine is initialzed if the passed in engine is null or does not have its bin path set.
            </summary>
            <param name="engine">An instance of MSBuild.ProjectCollection build engine, that will be checked if initialized.</param>
            <param name="engine">The service provider.</param>
            <returns>The buildengine to use.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.Utilities.GetOuterAs``1(System.Object)">
            <summary>
            Get the outer T implementation
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.Utilities.GetEnumConverter``1">
            <summary>
            Gets an instance of an EnumConverter for enums that have PropertyPageTypeConverter attribute
            </summary>
            <typeparam name="T">The type to search for the PropertyPageTypeConverter attribute.</typeparam>
            <returns>An instance of an enum converter, or null if none found.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.Utilities.IsFileNameAllGivenCharacter(System.Char,System.String)">
            <summary>>
            Checks if the file name is all the given character.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.Utilities.IsFilePartInValid(System.String)">
            <summary>
            Checks whether a file part contains valid characters. The file part can be any part of a non rooted path.
            </summary>
            <param name="filePart"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.Utilities.RecursivelyCopyDirectory(System.String,System.String)">
            <summary>
            Copy a directory recursively to the specified non-existing directory
            </summary>
            <param name="source">Directory to copy from</param>
            <param name="target">Directory to copy to</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.Utilities.CanonicalizeFileName(System.String)">
            <summary>
            Canonicalizes a file name, including:
             - determines the full path to the file
             - casts to upper case
            Canonicalizing a file name makes it possible to compare file names using simple simple string comparison.
            
            Note: this method does not handle shared drives and UNC drives.
            </summary>
            <param name="anyFileName">A file name, which can be relative/absolute and contain lower-case/upper-case characters.</param>
            <returns>Canonicalized file name.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.Utilities.IsTemplateFile(System.String)">
            <summary>
            Determines if a file is a template.
            </summary>
            <param name="fileName">The file to check whether it is a template file</param>
            <returns>true if the file is a template file</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.Utilities.TryGetActiveConfigurationAndPlatform(System.IServiceProvider,Microsoft.VisualStudio.Shell.Interop.IVsHierarchy,System.String@,System.String@)">
            <summary>
            Retrives the configuration and the platform using the IVsSolutionBuildManager2 interface.
            </summary>
            <param name="serviceProvider">A service provider.</param>
            <param name="hierarchy">The hierarchy whose configuration is requested.  This method calls into 
            native code and may be called on a background thread, so make sure the IVsHierarchy passed is 
            safe to use for that sort of interop.</param>
            <param name="configuration">The name of the active configuration.</param>
            <param name="platform">The name of the platform.</param>
            <returns>true if successfull.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.Utilities.IsShellInCommandLineMode(System.IServiceProvider)">
            <summary>
            Determines whether the shell is in command line mode.
            </summary>
            <param name="serviceProvider">A reference to a Service Provider.</param>
            <returns>true if the shell is in command line mode. false otherwise.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Project.UIHierarchyUtilities">
             <summary>
            This class provides some useful static shell based methods. 
             </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Project.UIHierarchyUtilities.GetUIHierarchyWindow(System.IServiceProvider,System.Guid)">
            <summary>
            Get reference to IVsUIHierarchyWindow interface from guid persistence slot.
            </summary>
            <param name="serviceProvider">The service provider.</param>
            <param name="persistenceSlot">Unique identifier for a tool window created using IVsUIShell::CreateToolWindow. 
            The caller of this method can use predefined identifiers that map to tool windows if those tool windows 
            are known to the caller. </param>
            <returns>A reference to an IVsUIHierarchyWindow interface.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Project.WindowFrameShowAction">
            <summary>
            Defines the type of action to be taken in showing the window frame.
            </summary>
        </member>
    </members>
</doc>
